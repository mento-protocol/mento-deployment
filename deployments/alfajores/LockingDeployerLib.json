{
  "address": "0x4AE57c623eE76385b6671B05FD86B1Af07A0E068",
  "abi": [],
  "transactionHash": "0x8eb2213ae8f0ebb02c477d9407e694751f0653032ea9f25344cc1c6043500201",
  "receipt": {
    "to": null,
    "from": "0x56fD3F2bEE130e9867942D0F463a16fBE49B8d81",
    "contractAddress": "0x4AE57c623eE76385b6671B05FD86B1Af07A0E068",
    "transactionIndex": 0,
    "gasUsed": "3650547",
    "logsBloom": "0x
    "blockHash": "0xb7c3cd31f802dd9875053d6f524d90231f1925c31b2f25172b9c09bdb3d0eca1",
    "transactionHash": "0x8eb2213ae8f0ebb02c477d9407e694751f0653032ea9f25344cc1c6043500201",
    "logs": [],
    "blockNumber": 21936728,
    "cumulativeGasUsed": "3650547",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 4,
  "solcInputHash": "7e83205a170b12fd7688a59ae658f360",
  "metadata": "{\"compiler\":{\"version\":\"0.8.18+commit.87f61d96\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"deploy()\":{\"returns\":{\"_0\":\"The address of the new Locking contract\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"deploy()\":{\"notice\":\"Deploys a new Locking contract\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"lib/mento-core-gov/contracts/governance/deployers/LockingDeployerLib.sol\":\"LockingDeployerLib\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"lib/mento-core-gov/contracts/governance/deployers/LockingDeployerLib.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity 0.8.18;\\n// solhint-disable max-line-length\\n\\nimport { Locking } from \\\"../locking/Locking.sol\\\";\\n\\nlibrary LockingDeployerLib {\\n  /**\\n   * @notice Deploys a new Locking contract\\n   * @return The address of the new Locking contract\\n   */\\n  function deploy() external returns (Locking) {\\n    return new Locking();\\n  }\\n}\\n\",\"keccak256\":\"0xe487fb28eadbc87ac07df14434fbc42d5bd33f79c9dbbfebeba00729a9160ce9\",\"license\":\"GPL-3.0-or-later\"},\"lib/mento-core-gov/contracts/governance/locking/Locking.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.18;\\n// solhint-disable func-name-mixedcase\\n\\nimport \\\"./interfaces/INextVersionLock.sol\\\";\\nimport \\\"./LockingBase.sol\\\";\\nimport \\\"./LockingRelock.sol\\\";\\nimport \\\"./LockingVotes.sol\\\";\\nimport \\\"./interfaces/ILocking.sol\\\";\\n\\n/**\\n * @notice https://github.com/rarible/locking-contracts/tree/4f189a96b3e85602dedfbaf69d9a1f5056d835eb\\n */\\ncontract Locking is ILocking, LockingBase, LockingRelock, LockingVotes {\\n  using LibBrokenLine for LibBrokenLine.BrokenLine;\\n\\n  function __Locking_init(\\n    IERC20Upgradeable _token,\\n    uint32 _startingPointWeek,\\n    uint32 _minCliffPeriod,\\n    uint32 _minSlopePeriod\\n  ) external initializer {\\n    __LockingBase_init_unchained(_token, _startingPointWeek, _minCliffPeriod, _minSlopePeriod);\\n    __Ownable_init_unchained();\\n    __Context_init_unchained();\\n  }\\n\\n  function stop() external onlyOwner notStopped {\\n    stopped = true;\\n    emit StopLocking(msg.sender);\\n  }\\n\\n  function start() external onlyOwner isStopped {\\n    stopped = false;\\n    emit StartLocking(msg.sender);\\n  }\\n\\n  function startMigration(address to) external onlyOwner {\\n    migrateTo = to;\\n    emit StartMigration(msg.sender, to);\\n  }\\n\\n  function lock(\\n    address account,\\n    address _delegate,\\n    uint96 amount,\\n    uint32 slopePeriod,\\n    uint32 cliff\\n  ) external override notStopped notMigrating returns (uint256) {\\n    require(amount > 0, \\\"zero amount\\\");\\n    require(cliff <= MAX_CLIFF_PERIOD, \\\"cliff too big\\\");\\n    require(slopePeriod <= MAX_SLOPE_PERIOD, \\\"period too big\\\");\\n\\n    counter++;\\n\\n    uint32 currentBlock = getBlockNumber();\\n    uint32 time = roundTimestamp(currentBlock);\\n    addLines(account, _delegate, amount, slopePeriod, cliff, time, currentBlock);\\n    accounts[account].amount = accounts[account].amount + (amount);\\n\\n    require(token.transferFrom(msg.sender, address(this), amount), \\\"transfer failed\\\");\\n\\n    emit LockCreate(counter, account, _delegate, time, amount, slopePeriod, cliff);\\n    return counter;\\n  }\\n\\n  function withdraw() external {\\n    uint96 value = getAvailableForWithdraw(msg.sender);\\n    if (value > 0) {\\n      accounts[msg.sender].amount = accounts[msg.sender].amount - (value);\\n      require(token.transfer(msg.sender, value), \\\"transfer failed\\\");\\n    }\\n    emit Withdraw(msg.sender, value);\\n  }\\n\\n  // Amount available for withdrawal\\n  function getAvailableForWithdraw(address account) public view returns (uint96) {\\n    uint96 value = accounts[account].amount;\\n    if (!stopped) {\\n      uint32 currentBlock = getBlockNumber();\\n      uint32 time = roundTimestamp(currentBlock);\\n      uint96 bias = accounts[account].locked.actualValue(time, currentBlock);\\n      value = value - (bias);\\n    }\\n    return value;\\n  }\\n\\n  //Remaining locked amount\\n  function locked(address account) external view returns (uint256) {\\n    return accounts[account].amount;\\n  }\\n\\n  //For a given Line id, the owner and delegate addresses.\\n  function getAccountAndDelegate(uint256 id) external view returns (address _account, address _delegate) {\\n    _account = locks[id].account;\\n    _delegate = locks[id].delegate;\\n  }\\n\\n  //Getting \\\"current week\\\" of the contract.\\n  function getWeek() external view returns (uint256) {\\n    return roundTimestamp(getBlockNumber());\\n  }\\n\\n  function delegateTo(uint256 id, address newDelegate) external notStopped notMigrating {\\n    address account = verifyLockOwner(id);\\n    address _delegate = locks[id].delegate;\\n    uint32 currentBlock = getBlockNumber();\\n    uint32 time = roundTimestamp(currentBlock);\\n    accounts[_delegate].balance.update(time);\\n    (uint96 bias, uint96 slope, uint32 cliff) = accounts[_delegate].balance.remove(id, time, currentBlock);\\n    LibBrokenLine.Line memory line = LibBrokenLine.Line(time, bias, slope, cliff);\\n    accounts[newDelegate].balance.update(time);\\n    accounts[newDelegate].balance.addOneLine(id, line, currentBlock);\\n    locks[id].delegate = newDelegate;\\n    emit Delegate(id, account, newDelegate, time);\\n  }\\n\\n  function totalSupply() external view returns (uint256) {\\n    if ((totalSupplyLine.initial.bias == 0) || (stopped)) {\\n      return 0;\\n    }\\n    uint32 currentBlock = getBlockNumber();\\n    uint32 time = roundTimestamp(currentBlock);\\n    return totalSupplyLine.actualValue(time, currentBlock);\\n  }\\n\\n  function balanceOf(address account) external view returns (uint256) {\\n    if ((accounts[account].balance.initial.bias == 0) || (stopped)) {\\n      return 0;\\n    }\\n    uint32 currentBlock = getBlockNumber();\\n    uint32 time = roundTimestamp(currentBlock);\\n    return accounts[account].balance.actualValue(time, currentBlock);\\n  }\\n\\n  function migrate(uint256[] memory id) external {\\n    if (migrateTo == address(0)) {\\n      return;\\n    }\\n    uint32 currentBlock = getBlockNumber();\\n    uint32 time = roundTimestamp(currentBlock);\\n    INextVersionLock nextVersionLock = INextVersionLock(migrateTo);\\n    for (uint256 i = 0; i < id.length; ++i) {\\n      address account = verifyLockOwner(id[i]);\\n      address _delegate = locks[id[i]].delegate;\\n      updateLines(account, _delegate, time);\\n      //save data Line before remove\\n      LibBrokenLine.Line memory line = accounts[account].locked.initiatedLines[id[i]];\\n      (uint96 residue, , ) = accounts[account].locked.remove(id[i], time, currentBlock);\\n\\n      accounts[account].amount = accounts[account].amount - (residue);\\n\\n      accounts[_delegate].balance.remove(id[i], time, currentBlock);\\n      totalSupplyLine.remove(id[i], time, currentBlock);\\n      nextVersionLock.initiateData(id[i], line, account, _delegate);\\n\\n      require(token.transfer(migrateTo, residue), \\\"transfer failed\\\");\\n    }\\n    emit Migrate(msg.sender, id);\\n  }\\n\\n  function name() public view virtual returns (string memory) {\\n    return \\\"Mento Vote-Escrow\\\";\\n  }\\n\\n  function symbol() public view virtual returns (string memory) {\\n    return \\\"veMENTO\\\";\\n  }\\n\\n  function decimals() public view virtual returns (uint8) {\\n    return 18;\\n  }\\n\\n  uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x8afdf4a98640649ccd41b7ff1a7a63a08fdac3c13daa9c314be2031f139aea45\",\"license\":\"MIT\"},\"lib/mento-core-gov/contracts/governance/locking/LockingBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.18;\\n// solhint-disable state-visibility, func-name-mixedcase\\n\\nimport \\\"openzeppelin-contracts-upgradeable/contracts/token/ERC20/IERC20Upgradeable.sol\\\";\\nimport \\\"openzeppelin-contracts-upgradeable/contracts/access/OwnableUpgradeable.sol\\\";\\nimport \\\"openzeppelin-contracts-upgradeable/contracts/governance/utils/IVotesUpgradeable.sol\\\";\\nimport \\\"./libs/LibBrokenLine.sol\\\";\\n\\n/**\\n * @notice https://github.com/rarible/locking-contracts/tree/4f189a96b3e85602dedfbaf69d9a1f5056d835eb\\n */\\nabstract contract LockingBase is OwnableUpgradeable, IVotesUpgradeable {\\n  using LibBrokenLine for LibBrokenLine.BrokenLine;\\n\\n  uint32 public constant WEEK = 120_960; //blocks one week = 120_960, day = 17_280 in CELO\\n\\n  uint32 constant MAX_CLIFF_PERIOD = 103;\\n  uint32 constant MAX_SLOPE_PERIOD = 104;\\n\\n  uint32 constant ST_FORMULA_DIVIDER = 1 * (10**8); //stFormula divider          100000000\\n  uint32 constant ST_FORMULA_CONST_MULTIPLIER = 2 * (10**7); //stFormula const multiplier  20000000\\n  uint32 constant ST_FORMULA_CLIFF_MULTIPLIER = 8 * (10**7); //stFormula cliff multiplier  80000000\\n  uint32 constant ST_FORMULA_SLOPE_MULTIPLIER = 4 * (10**7); //stFormula slope multiplier  40000000\\n\\n  /**\\n   * @dev ERC20 token to lock\\n   */\\n  IERC20Upgradeable public token;\\n  /**\\n   * @dev counter for Lock identifiers\\n   */\\n  uint256 public counter;\\n\\n  /**\\n   * @dev true if contract entered stopped state\\n   */\\n  bool public stopped;\\n\\n  /**\\n   * @dev address to migrate Locks to (zero if not in migration state)\\n   */\\n  address public migrateTo;\\n\\n  /**\\n   * @dev minimal cliff period in weeks, minCliffPeriod < MAX_CLIFF_PERIOD\\n   */\\n\\n  uint256 public minCliffPeriod;\\n\\n  /**\\n   * @dev minimal slope period in weeks, minSlopePeriod < MAX_SLOPE_PERIOD\\n   */\\n  uint256 public minSlopePeriod;\\n\\n  /**\\n   * @dev locking epoch start in weeks\\n   */\\n  uint256 public startingPointWeek;\\n\\n  /**\\n   * @dev represents one user Lock\\n   */\\n  struct Lock {\\n    address account;\\n    address delegate;\\n  }\\n\\n  mapping(uint256 => Lock) locks;\\n\\n  struct Account {\\n    LibBrokenLine.BrokenLine balance;\\n    LibBrokenLine.BrokenLine locked;\\n    uint96 amount;\\n  }\\n\\n  mapping(address => Account) accounts;\\n  LibBrokenLine.BrokenLine public totalSupplyLine;\\n\\n  /**\\n   * @dev Emitted when create Lock with parameters (account, delegate, amount, slopePeriod, cliff)\\n   */\\n  event LockCreate(\\n    uint256 indexed id,\\n    address indexed account,\\n    address indexed delegate,\\n    uint256 time,\\n    uint256 amount,\\n    uint256 slopePeriod,\\n    uint256 cliff\\n  );\\n  /**\\n   * @dev Emitted when change Lock parameters (newDelegate, newAmount, newSlopePeriod, newCliff) for Lock with given id\\n   */\\n  event Relock(\\n    uint256 indexed id,\\n    address indexed account,\\n    address indexed delegate,\\n    uint256 counter,\\n    uint256 time,\\n    uint256 amount,\\n    uint256 slopePeriod,\\n    uint256 cliff\\n  );\\n  /**\\n   * @dev Emitted when to set newDelegate address for Lock with given id\\n   */\\n  event Delegate(uint256 indexed id, address indexed account, address indexed delegate, uint256 time);\\n  /**\\n   * @dev Emitted when withdraw amount of Rari, account - msg.sender, amount - amount Rari\\n   */\\n  event Withdraw(address indexed account, uint256 amount);\\n  /**\\n   * @dev Emitted when migrate Locks with given id, account - msg.sender\\n   */\\n  event Migrate(address indexed account, uint256[] id);\\n  /**\\n   * @dev Stop run contract functions, accept withdraw, account - msg.sender\\n   */\\n  event StopLocking(address indexed account);\\n  /**\\n   * @dev Start run contract functions, accept withdraw, account - msg.sender\\n   */\\n  event StartLocking(address indexed account);\\n  /**\\n   * @dev StartMigration initiate migration to another contract, account - msg.sender, to - address delegate to\\n   */\\n  event StartMigration(address indexed account, address indexed to);\\n  /**\\n   * @dev set newMinCliffPeriod\\n   */\\n  event SetMinCliffPeriod(uint256 indexed newMinCliffPeriod);\\n  /**\\n   * @dev set newMinSlopePeriod\\n   */\\n  event SetMinSlopePeriod(uint256 indexed newMinSlopePeriod);\\n  /**\\n   * @dev set startingPointWeek\\n   */\\n  event SetStartingPointWeek(uint256 indexed newStartingPointWeek);\\n\\n  function __LockingBase_init_unchained(\\n    IERC20Upgradeable _token,\\n    uint32 _startingPointWeek,\\n    uint32 _minCliffPeriod,\\n    uint32 _minSlopePeriod\\n  ) internal onlyInitializing {\\n    token = _token;\\n    startingPointWeek = _startingPointWeek;\\n\\n    //setting min cliff and slope\\n    require(_minCliffPeriod <= MAX_CLIFF_PERIOD, \\\"cliff too big\\\");\\n    require(_minSlopePeriod <= MAX_SLOPE_PERIOD, \\\"period too big\\\");\\n    minCliffPeriod = _minCliffPeriod;\\n    minSlopePeriod = _minSlopePeriod;\\n  }\\n\\n  function addLines(\\n    address account,\\n    address _delegate,\\n    uint96 amount,\\n    uint32 slopePeriod,\\n    uint32 cliff,\\n    uint32 time,\\n    uint32 currentBlock\\n  ) internal {\\n    require(slopePeriod <= amount, \\\"Wrong value slopePeriod\\\");\\n    updateLines(account, _delegate, time);\\n    (uint96 stAmount, uint96 stSlope) = getLock(amount, slopePeriod, cliff);\\n    LibBrokenLine.Line memory line = LibBrokenLine.Line(time, stAmount, stSlope, cliff);\\n    totalSupplyLine.addOneLine(counter, line, currentBlock);\\n    accounts[_delegate].balance.addOneLine(counter, line, currentBlock);\\n    {\\n      uint96 slope = divUp(amount, slopePeriod);\\n      line = LibBrokenLine.Line(time, amount, slope, cliff);\\n    }\\n    accounts[account].locked.addOneLine(counter, line, currentBlock);\\n    locks[counter].account = account;\\n    locks[counter].delegate = _delegate;\\n  }\\n\\n  function updateLines(\\n    address account,\\n    address _delegate,\\n    uint32 time\\n  ) internal {\\n    totalSupplyLine.update(time);\\n    accounts[_delegate].balance.update(time);\\n    accounts[account].locked.update(time);\\n  }\\n\\n  /**\\n   * \\u0421alculate and return (newAmount, newSlope), using formula:\\n   * locking = (tokens * (\\n   *      ST_FORMULA_CONST_MULTIPLIER\\n   *      + ST_FORMULA_CLIFF_MULTIPLIER * (cliffPeriod - minCliffPeriod))/(MAX_CLIFF_PERIOD - minCliffPeriod)\\n   *      + ST_FORMULA_SLOPE_MULTIPLIER * (slopePeriod - minSlopePeriod))/(MAX_SLOPE_PERIOD - minSlopePeriod)\\n   *      )) / ST_FORMULA_DIVIDER\\n   **/\\n  function getLock(\\n    uint96 amount,\\n    uint32 slopePeriod,\\n    uint32 cliff\\n  ) public view returns (uint96 lockAmount, uint96 lockSlope) {\\n    require(cliff >= minCliffPeriod, \\\"cliff period < minimal lock period\\\");\\n    require(slopePeriod >= minSlopePeriod, \\\"slope period < minimal lock period\\\");\\n\\n    uint96 cliffSide = (uint96(cliff - uint32(minCliffPeriod)) * (ST_FORMULA_CLIFF_MULTIPLIER)) /\\n      (MAX_CLIFF_PERIOD - uint32(minCliffPeriod));\\n    uint96 slopeSide = (uint96((slopePeriod - uint32(minSlopePeriod))) * (ST_FORMULA_SLOPE_MULTIPLIER)) /\\n      (MAX_SLOPE_PERIOD - uint32(minSlopePeriod));\\n    uint96 multiplier = cliffSide + (slopeSide) + (ST_FORMULA_CONST_MULTIPLIER);\\n\\n    uint256 amountMultiplied = uint256(amount) * uint256(multiplier);\\n    lockAmount = uint96(amountMultiplied / (ST_FORMULA_DIVIDER));\\n    lockSlope = divUp(lockAmount, slopePeriod);\\n  }\\n\\n  function divUp(uint96 a, uint96 b) internal pure returns (uint96) {\\n    return ((a - 1) / b) + 1;\\n  }\\n\\n  function roundTimestamp(uint32 ts) public view returns (uint32) {\\n    if (ts < getEpochShift()) {\\n      return 0;\\n    }\\n    uint32 shifted = ts - (getEpochShift());\\n    return shifted / WEEK - uint32(startingPointWeek);\\n  }\\n\\n  /**\\n   * @notice method returns the amount of blocks to shift locking epoch to.\\n   * we move it to 00-00 UTC Wednesday (approx) by shifting 89964 blocks (CELO)\\n   */\\n  function getEpochShift() internal view virtual returns (uint32) {\\n    return 89964;\\n  }\\n\\n  function verifyLockOwner(uint256 id) internal view returns (address account) {\\n    account = locks[id].account;\\n    require(account == msg.sender, \\\"caller not a lock owner\\\");\\n  }\\n\\n  function getBlockNumber() internal view virtual returns (uint32) {\\n    return uint32(block.number);\\n  }\\n\\n  function setStartingPointWeek(uint32 newStartingPointWeek) public notStopped notMigrating onlyOwner {\\n    require(newStartingPointWeek < roundTimestamp(getBlockNumber()), \\\"wrong newStartingPointWeek\\\");\\n    startingPointWeek = newStartingPointWeek;\\n\\n    emit SetStartingPointWeek(newStartingPointWeek);\\n  }\\n\\n  function setMinCliffPeriod(uint32 newMinCliffPeriod) external notStopped notMigrating onlyOwner {\\n    require(newMinCliffPeriod < MAX_CLIFF_PERIOD, \\\"new cliff period > 2 years\\\");\\n    minCliffPeriod = newMinCliffPeriod;\\n\\n    emit SetMinCliffPeriod(newMinCliffPeriod);\\n  }\\n\\n  function setMinSlopePeriod(uint32 newMinSlopePeriod) external notStopped notMigrating onlyOwner {\\n    require(newMinSlopePeriod < MAX_SLOPE_PERIOD, \\\"new slope period > 2 years\\\");\\n    minSlopePeriod = newMinSlopePeriod;\\n\\n    emit SetMinSlopePeriod(newMinSlopePeriod);\\n  }\\n\\n  /**\\n   * @dev Throws if stopped\\n   */\\n  modifier notStopped() {\\n    require(!stopped, \\\"stopped\\\");\\n    _;\\n  }\\n\\n  /**\\n   * @dev Throws if not stopped\\n   */\\n  modifier isStopped() {\\n    require(stopped, \\\"not stopped\\\");\\n    _;\\n  }\\n\\n  modifier notMigrating() {\\n    require(migrateTo == address(0), \\\"migrating\\\");\\n    _;\\n  }\\n\\n  function updateAccountLines(address account, uint32 time) public notStopped notMigrating onlyOwner {\\n    accounts[account].balance.update(time);\\n    accounts[account].locked.update(time);\\n  }\\n\\n  function updateTotalSupplyLine(uint32 time) public notStopped notMigrating onlyOwner {\\n    totalSupplyLine.update(time);\\n  }\\n\\n  function updateAccountLinesBlockNumber(address account, uint32 blockNumber)\\n    external\\n    notStopped\\n    notMigrating\\n    onlyOwner\\n  {\\n    uint32 time = roundTimestamp(blockNumber);\\n    updateAccountLines(account, time);\\n  }\\n\\n  function updateTotalSupplyLineBlockNumber(uint32 blockNumber) external notStopped notMigrating onlyOwner {\\n    uint32 time = roundTimestamp(blockNumber);\\n    updateTotalSupplyLine(time);\\n  }\\n\\n  uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x0abb12a6877a635b94106d53c3143180b93bafd0e42d67dd4e87be97e3f68217\",\"license\":\"MIT\"},\"lib/mento-core-gov/contracts/governance/locking/LockingRelock.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.18;\\n\\nimport \\\"./LockingBase.sol\\\";\\n\\n/**\\n * @notice https://github.com/rarible/locking-contracts/tree/4f189a96b3e85602dedfbaf69d9a1f5056d835eb\\n */\\nabstract contract LockingRelock is LockingBase {\\n  using LibBrokenLine for LibBrokenLine.BrokenLine;\\n\\n  function relock(\\n    uint256 id,\\n    address newDelegate,\\n    uint96 newAmount,\\n    uint32 newSlopePeriod,\\n    uint32 newCliff\\n  ) external notStopped notMigrating returns (uint256) {\\n    address account = verifyLockOwner(id);\\n    uint32 currentBlock = getBlockNumber();\\n    uint32 time = roundTimestamp(currentBlock);\\n    verification(account, id, newAmount, newSlopePeriod, newCliff, time);\\n\\n    address _delegate = locks[id].delegate;\\n    accounts[account].locked.update(time);\\n\\n    rebalance(id, account, accounts[account].locked.initial.bias, removeLines(id, account, _delegate, time), newAmount);\\n\\n    counter++;\\n\\n    addLines(account, newDelegate, newAmount, newSlopePeriod, newCliff, time, currentBlock);\\n    emit Relock(id, account, newDelegate, counter, time, newAmount, newSlopePeriod, newCliff);\\n\\n    return counter;\\n  }\\n\\n  /**\\n   * @dev Verification parameters:\\n   *      1. amount > 0, slope > 0\\n   *      2. cliff period and slope period less or equal two years\\n   *      3. newFinishTime more or equal oldFinishTime\\n   */\\n  function verification(\\n    address account,\\n    uint256 id,\\n    uint96 newAmount,\\n    uint32 newSlopePeriod,\\n    uint32 newCliff,\\n    uint32 toTime\\n  ) internal view {\\n    require(newAmount > 0, \\\"zero amount\\\");\\n    require(newCliff <= MAX_CLIFF_PERIOD, \\\"cliff too big\\\");\\n    require(newSlopePeriod <= MAX_SLOPE_PERIOD, \\\"slope period too big\\\");\\n    require(newSlopePeriod > 0, \\\"slope period equal 0\\\");\\n\\n    //check Line with new parameters don`t finish earlier than old Line\\n    uint32 newEnd = toTime + (newCliff) + (newSlopePeriod);\\n    LibBrokenLine.Line memory line = accounts[account].locked.initiatedLines[id];\\n    uint32 oldSlopePeriod = uint32(divUp(line.bias, line.slope));\\n    uint32 oldEnd = line.start + (line.cliff) + (oldSlopePeriod);\\n    require(oldEnd <= newEnd, \\\"new line period lock too short\\\");\\n\\n    //check Line with new parameters don`t cut corner old Line\\n    uint32 oldCliffEnd = line.start + (line.cliff);\\n    uint32 newCliffEnd = toTime + (newCliff);\\n    if (oldCliffEnd > newCliffEnd) {\\n      uint32 balance = oldCliffEnd - (newCliffEnd);\\n      uint32 newSlope = uint32(divUp(newAmount, newSlopePeriod));\\n      uint96 newBias = newAmount - (balance * (newSlope));\\n      require(newBias >= line.bias, \\\"detect cut deposit corner\\\");\\n    }\\n  }\\n\\n  function removeLines(\\n    uint256 id,\\n    address account,\\n    address delegate,\\n    uint32 toTime\\n  ) internal returns (uint96 residue) {\\n    updateLines(account, delegate, toTime);\\n    uint32 currentBlock = getBlockNumber();\\n    accounts[delegate].balance.remove(id, toTime, currentBlock);\\n    totalSupplyLine.remove(id, toTime, currentBlock);\\n    (residue, , ) = accounts[account].locked.remove(id, toTime, currentBlock);\\n  }\\n\\n  function rebalance(\\n    uint256 id,\\n    address account,\\n    uint96 bias,\\n    uint96 residue,\\n    uint96 newAmount\\n  ) internal {\\n    require(residue <= newAmount, \\\"Impossible to relock: less amount, then now is\\\");\\n    uint96 addAmount = newAmount - (residue);\\n    uint96 amount = accounts[account].amount;\\n    uint96 balance = amount - (bias);\\n    if (addAmount > balance) {\\n      //need more, than balance, so need transfer tokens to this\\n      uint96 transferAmount = addAmount - (balance);\\n      accounts[account].amount = accounts[account].amount + (transferAmount);\\n      require(token.transferFrom(locks[id].account, address(this), transferAmount), \\\"transfer failed\\\");\\n    }\\n  }\\n\\n  uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x50361f400e4703da76324cd3710a5bdb4667aabf9fc6c311d298a9a51051ee65\",\"license\":\"MIT\"},\"lib/mento-core-gov/contracts/governance/locking/LockingVotes.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.18;\\n// solhint-disable no-unused-vars\\n\\nimport \\\"./LockingBase.sol\\\";\\n\\n/**\\n * @notice https://github.com/rarible/locking-contracts/tree/4f189a96b3e85602dedfbaf69d9a1f5056d835eb\\n */\\ncontract LockingVotes is LockingBase {\\n  using LibBrokenLine for LibBrokenLine.BrokenLine;\\n\\n  /**\\n   * @dev Returns the current amount of votes that `account` has.\\n   */\\n  function getVotes(address account) external view override returns (uint256) {\\n    uint32 currentBlock = getBlockNumber();\\n    uint32 currentWeek = roundTimestamp(currentBlock);\\n    return accounts[account].balance.actualValue(currentWeek, currentBlock);\\n  }\\n\\n  /**\\n   * @dev Returns the amount of votes that `account` had\\n   * at the end of the last period\\n   */\\n  function getPastVotes(address account, uint256 blockNumber) external view override returns (uint256) {\\n    uint32 currentWeek = roundTimestamp(uint32(blockNumber));\\n    require(blockNumber < getBlockNumber() && currentWeek > 0, \\\"block not yet mined\\\");\\n\\n    return accounts[account].balance.actualValue(currentWeek, uint32(blockNumber));\\n  }\\n\\n  /**\\n   * @dev Returns the total supply of votes available\\n   * at the end of the last period\\n   */\\n  function getPastTotalSupply(uint256 blockNumber) external view override returns (uint256) {\\n    uint32 currentWeek = roundTimestamp(uint32(blockNumber));\\n    require(blockNumber < getBlockNumber() && currentWeek > 0, \\\"block not yet mined\\\");\\n\\n    return totalSupplyLine.actualValue(currentWeek, uint32(blockNumber));\\n  }\\n\\n  /**\\n   * @dev Returns the delegate that `account` has chosen.\\n   */\\n  function delegates(\\n    address /* account */\\n  ) external pure override returns (address) {\\n    revert(\\\"not implemented\\\");\\n  }\\n\\n  /**\\n   * @dev Delegates votes from the sender to `delegatee`.\\n   */\\n  function delegate(\\n    address /* delegatee */\\n  ) external pure override {\\n    revert(\\\"not implemented\\\");\\n  }\\n\\n  /**\\n   * @dev Delegates votes from signer to `delegatee`.\\n   */\\n  function delegateBySig(\\n    address, // delegatee\\n    uint256, // nonce\\n    uint256, // expiry\\n    uint8, // v\\n    bytes32, // r\\n    bytes32 // s\\n  ) external pure override {\\n    revert(\\\"not implemented\\\");\\n  }\\n\\n  uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0xf85ae58451c39dbd8f21fcc718bf019f1e14901a75b11817c70111b79676b60c\",\"license\":\"MIT\"},\"lib/mento-core-gov/contracts/governance/locking/interfaces/ILocking.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.18;\\n\\ninterface ILocking {\\n  function lock(\\n    address account,\\n    address delegate,\\n    uint96 amount,\\n    uint32 slope,\\n    uint32 cliff\\n  ) external returns (uint256);\\n}\\n\",\"keccak256\":\"0x7d98e1f5ff58de12b95cdb21f3294d103272001b05fd9485699a27de47be64b4\",\"license\":\"MIT\"},\"lib/mento-core-gov/contracts/governance/locking/interfaces/INextVersionLock.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.18;\\n\\nimport \\\"../libs/LibBrokenLine.sol\\\";\\n\\ninterface INextVersionLock {\\n  function initiateData(\\n    uint256 idLock,\\n    LibBrokenLine.Line memory line,\\n    address locker,\\n    address delegate\\n  ) external;\\n}\\n\",\"keccak256\":\"0x87a78bd559a99dc69a8110467187015024f18b58d7fdf906d4f9abe39480567c\",\"license\":\"MIT\"},\"lib/mento-core-gov/contracts/governance/locking/libs/LibBrokenLine.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.18;\\n\\nimport \\\"./LibIntMapping.sol\\\";\\n\\n/**\\n * Line describes a linear function, how the user's voice decreases from point (start, bias) with speed slope\\n * BrokenLine - a curve that describes the curve of the change in the sum of votes of several users\\n * This curve starts with a line (Line) and then, at any time, the slope can be changed.\\n * All slope changes are stored in slopeChanges. The slope can always be reduced only, it cannot increase,\\n * because users can only run out of lockup periods.\\n **/\\n\\nlibrary LibBrokenLine {\\n  using LibIntMapping for mapping(uint256 => int96);\\n\\n  struct Line {\\n    uint32 start;\\n    uint96 bias;\\n    uint96 slope;\\n    uint32 cliff;\\n  }\\n\\n  struct Point {\\n    uint32 blockNumber;\\n    uint96 bias;\\n    uint96 slope;\\n    uint32 epoch;\\n  }\\n\\n  struct BrokenLine {\\n    mapping(uint256 => int96) slopeChanges; //change of slope applies to the next time point\\n    mapping(uint256 => Line) initiatedLines; //initiated (successfully added) Lines\\n    Point[] history;\\n    Line initial;\\n  }\\n\\n  /**\\n   * @dev Add Line, save data in LineData. Run update BrokenLine, require:\\n   *      1. slope != 0, slope <= bias\\n   *      2. line not exists\\n   **/\\n  function _addOneLine(\\n    BrokenLine storage brokenLine,\\n    uint256 id,\\n    Line memory line\\n  ) internal {\\n    require(line.slope != 0, \\\"Slope == 0, unacceptable value for slope\\\");\\n    require(line.slope <= line.bias, \\\"Slope > bias, unacceptable value for slope\\\");\\n    require(brokenLine.initiatedLines[id].bias == 0, \\\"Line with given id is already exist\\\");\\n    brokenLine.initiatedLines[id] = line;\\n\\n    update(brokenLine, line.start);\\n    brokenLine.initial.bias = brokenLine.initial.bias + (line.bias);\\n    //save bias for history in line.start minus one\\n    uint32 lineStartMinusOne = line.start - 1;\\n    //period is time without tail\\n    uint32 period = uint32(line.bias / (line.slope));\\n\\n    if (line.cliff == 0) {\\n      //no cliff, need to increase brokenLine.initial.slope write now\\n      brokenLine.initial.slope = brokenLine.initial.slope + (line.slope);\\n      //no cliff, save slope in history in time minus one\\n      brokenLine.slopeChanges.addToItem(lineStartMinusOne, safeInt(line.slope));\\n    } else {\\n      //cliffEnd finish in lineStart minus one plus cliff\\n      uint32 cliffEnd = lineStartMinusOne + (line.cliff);\\n      //save slope in history in cliffEnd\\n      brokenLine.slopeChanges.addToItem(cliffEnd, safeInt(line.slope));\\n      period = period + (line.cliff);\\n    }\\n\\n    int96 mod = safeInt(line.bias % (line.slope));\\n    uint32 endPeriod = line.start + (period);\\n    uint32 endPeriodMinus1 = endPeriod - 1;\\n    brokenLine.slopeChanges.subFromItem(endPeriodMinus1, safeInt(line.slope) - (mod));\\n    brokenLine.slopeChanges.subFromItem(endPeriod, mod);\\n  }\\n\\n  /**\\n   * @dev adding a line and saving snapshot\\n   */\\n  function addOneLine(\\n    BrokenLine storage brokenLine,\\n    uint256 id,\\n    Line memory line,\\n    uint32 blockNumber\\n  ) internal {\\n    _addOneLine(brokenLine, id, line);\\n    saveSnapshot(brokenLine, line.start, blockNumber);\\n  }\\n\\n  /**\\n   * @dev Remove Line from BrokenLine, return bias, slope, cliff. Run update BrokenLine.\\n   **/\\n  function _remove(\\n    BrokenLine storage brokenLine,\\n    uint256 id,\\n    uint32 toTime\\n  )\\n    internal\\n    returns (\\n      uint96 bias,\\n      uint96 slope,\\n      uint32 cliff\\n    )\\n  {\\n    Line memory line = brokenLine.initiatedLines[id];\\n    require(line.bias != 0, \\\"Removing Line, which not exists\\\");\\n\\n    update(brokenLine, toTime);\\n    //check time Line is over\\n    bias = line.bias;\\n    slope = line.slope;\\n    cliff = 0;\\n    //for information: bias / (slope) - this`s period while slope works\\n    uint32 finishTime = line.start + (uint32(bias / (slope))) + (line.cliff);\\n    if (toTime > finishTime) {\\n      bias = 0;\\n      slope = 0;\\n      return (bias, slope, cliff);\\n    }\\n    uint32 finishTimeMinusOne = finishTime - 1;\\n    uint32 toTimeMinusOne = toTime - 1;\\n    int96 mod = safeInt(bias % slope);\\n    uint32 cliffEnd = line.start + (line.cliff) - 1;\\n    if (toTime <= cliffEnd) {\\n      //cliff works\\n      cliff = cliffEnd - (toTime) + 1;\\n      //in cliff finish time compensate change slope by oldLine.slope\\n      brokenLine.slopeChanges.subFromItem(cliffEnd, safeInt(slope));\\n      //in new Line finish point use oldLine.slope\\n      brokenLine.slopeChanges.addToItem(finishTimeMinusOne, safeInt(slope) - (mod));\\n    } else if (toTime <= finishTimeMinusOne) {\\n      //slope works\\n      //now compensate change slope by oldLine.slope\\n      brokenLine.initial.slope = brokenLine.initial.slope - (slope);\\n      //in new Line finish point use oldLine.slope\\n      brokenLine.slopeChanges.addToItem(finishTimeMinusOne, safeInt(slope) - (mod));\\n      bias = (uint96(finishTime - (toTime)) * slope) + (uint96(mod));\\n      //save slope for history\\n      brokenLine.slopeChanges.subFromItem(toTimeMinusOne, safeInt(slope));\\n    } else {\\n      //tail works\\n      //now compensate change slope by tail\\n      brokenLine.initial.slope = brokenLine.initial.slope - (uint96(mod));\\n      bias = uint96(mod);\\n      slope = bias;\\n      //save slope for history\\n      brokenLine.slopeChanges.subFromItem(toTimeMinusOne, safeInt(slope));\\n    }\\n    brokenLine.slopeChanges.addToItem(finishTime, mod);\\n    brokenLine.initial.bias = brokenLine.initial.bias - (bias);\\n    brokenLine.initiatedLines[id].bias = 0;\\n  }\\n\\n  /**\\n   * @dev removing a line and saving snapshot\\n   */\\n  function remove(\\n    BrokenLine storage brokenLine,\\n    uint256 id,\\n    uint32 toTime,\\n    uint32 blockNumber\\n  )\\n    internal\\n    returns (\\n      uint96 bias,\\n      uint96 slope,\\n      uint32 cliff\\n    )\\n  {\\n    (bias, slope, cliff) = _remove(brokenLine, id, toTime);\\n    saveSnapshot(brokenLine, toTime, blockNumber);\\n  }\\n\\n  /**\\n   * @dev Update initial Line by parameter toTime. Calculate and set all changes\\n   **/\\n  function update(BrokenLine storage brokenLine, uint32 toTime) internal {\\n    uint32 time = brokenLine.initial.start;\\n    if (time == toTime) {\\n      return;\\n    }\\n    uint96 slope = brokenLine.initial.slope;\\n    uint96 bias = brokenLine.initial.bias;\\n    if (bias != 0) {\\n      require(toTime > time, \\\"can't update BrokenLine for past time\\\");\\n      while (time < toTime) {\\n        bias = bias - (slope);\\n\\n        int96 newSlope = safeInt(slope) + (brokenLine.slopeChanges[time]);\\n        require(newSlope >= 0, \\\"slope < 0, something wrong with slope\\\");\\n        slope = uint96(newSlope);\\n\\n        time = time + 1;\\n      }\\n    }\\n    brokenLine.initial.start = toTime;\\n    brokenLine.initial.bias = bias;\\n    brokenLine.initial.slope = slope;\\n  }\\n\\n  function actualValue(\\n    BrokenLine storage brokenLine,\\n    uint32 toTime,\\n    uint32 toBlock\\n  ) internal view returns (uint96) {\\n    uint32 fromTime = brokenLine.initial.start;\\n    if (fromTime == toTime) {\\n      if (brokenLine.history[brokenLine.history.length - 1].blockNumber < toBlock) {\\n        return (brokenLine.initial.bias);\\n      } else {\\n        return actualValueBack(brokenLine, toTime, toBlock);\\n      }\\n    }\\n    if (toTime > fromTime) {\\n      return actualValueForward(brokenLine, fromTime, toTime, brokenLine.initial.bias, brokenLine.initial.slope);\\n    }\\n    return actualValueBack(brokenLine, toTime, toBlock);\\n  }\\n\\n  function actualValueForward(\\n    BrokenLine storage brokenLine,\\n    uint32 fromTime,\\n    uint32 toTime,\\n    uint96 bias,\\n    uint96 slope\\n  ) internal view returns (uint96) {\\n    if ((bias == 0)) {\\n      return (bias);\\n    }\\n    uint32 time = fromTime;\\n\\n    while (time < toTime) {\\n      bias = bias - (slope);\\n\\n      int96 newSlope = safeInt(slope) + (brokenLine.slopeChanges[time]);\\n      require(newSlope >= 0, \\\"slope < 0, something wrong with slope\\\");\\n      slope = uint96(newSlope);\\n\\n      time = time + 1;\\n    }\\n    return bias;\\n  }\\n\\n  function actualValueBack(\\n    BrokenLine storage brokenLine,\\n    uint32 toTime,\\n    uint32 toBlock\\n  ) internal view returns (uint96) {\\n    (uint96 bias, uint96 slope, uint32 fromTime) = binarySearch(brokenLine.history, toBlock);\\n    return actualValueForward(brokenLine, fromTime, toTime, bias, slope);\\n  }\\n\\n  function safeInt(uint96 value) internal pure returns (int96 result) {\\n    require(value < 2**95, \\\"int cast error\\\");\\n    result = int96(value);\\n  }\\n\\n  function saveSnapshot(\\n    BrokenLine storage brokenLine,\\n    uint32 epoch,\\n    uint32 blockNumber\\n  ) internal {\\n    brokenLine.history.push(\\n      Point({ blockNumber: blockNumber, bias: brokenLine.initial.bias, slope: brokenLine.initial.slope, epoch: epoch })\\n    );\\n  }\\n\\n  function binarySearch(Point[] memory history, uint32 toBlock)\\n    internal\\n    pure\\n    returns (\\n      uint96,\\n      uint96,\\n      uint32\\n    )\\n  {\\n    uint256 len = history.length;\\n    if (len == 0 || history[0].blockNumber > toBlock) {\\n      return (0, 0, 0);\\n    }\\n    uint256 min = 0;\\n    uint256 max = len - 1;\\n\\n    for (uint256 i = 0; i < 128; i++) {\\n      if (min >= max) {\\n        break;\\n      }\\n      uint256 mid = (min + max + 1) / 2;\\n      if (history[mid].blockNumber <= toBlock) {\\n        min = mid;\\n      } else {\\n        max = mid - 1;\\n      }\\n    }\\n    return (history[min].bias, history[min].slope, history[min].epoch);\\n  }\\n}\\n\",\"keccak256\":\"0x118e1b315fd234a10712310cad18af4bedabc1467973b90a7d44574db0b8e702\",\"license\":\"MIT\"},\"lib/mento-core-gov/contracts/governance/locking/libs/LibIntMapping.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.18;\\n\\nlibrary LibIntMapping {\\n  function addToItem(\\n    mapping(uint256 => int96) storage map,\\n    uint256 key,\\n    int96 value\\n  ) internal {\\n    map[key] = map[key] + (value);\\n  }\\n\\n  function subFromItem(\\n    mapping(uint256 => int96) storage map,\\n    uint256 key,\\n    int96 value\\n  ) internal {\\n    map[key] = map[key] - (value);\\n  }\\n}\\n\",\"keccak256\":\"0xbec96dab3fe8c1ecd832bbe98e762b3e503ac8ea4310aa6cc60d34a6f4eda188\",\"license\":\"MIT\"},\"openzeppelin-contracts-upgradeable/contracts/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal onlyInitializing {\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal onlyInitializing {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x247c62047745915c0af6b955470a72d1696ebad4352d7d3011aef1a2463cd888\",\"license\":\"MIT\"},\"openzeppelin-contracts-upgradeable/contracts/governance/utils/IVotesUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (governance/utils/IVotes.sol)\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Common interface for {ERC20Votes}, {ERC721Votes}, and other {Votes}-enabled contracts.\\n *\\n * _Available since v4.5._\\n */\\ninterface IVotesUpgradeable {\\n    /**\\n     * @dev Emitted when an account changes their delegate.\\n     */\\n    event DelegateChanged(address indexed delegator, address indexed fromDelegate, address indexed toDelegate);\\n\\n    /**\\n     * @dev Emitted when a token transfer or delegate change results in changes to a delegate's number of votes.\\n     */\\n    event DelegateVotesChanged(address indexed delegate, uint256 previousBalance, uint256 newBalance);\\n\\n    /**\\n     * @dev Returns the current amount of votes that `account` has.\\n     */\\n    function getVotes(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of votes that `account` had at the end of a past block (`blockNumber`).\\n     */\\n    function getPastVotes(address account, uint256 blockNumber) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the total supply of votes available at the end of a past block (`blockNumber`).\\n     *\\n     * NOTE: This value is the sum of all available votes, which is not necessarily the sum of all delegated votes.\\n     * Votes that have not been delegated are still part of total supply, even though they would not participate in a\\n     * vote.\\n     */\\n    function getPastTotalSupply(uint256 blockNumber) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the delegate that `account` has chosen.\\n     */\\n    function delegates(address account) external view returns (address);\\n\\n    /**\\n     * @dev Delegates votes from the sender to `delegatee`.\\n     */\\n    function delegate(address delegatee) external;\\n\\n    /**\\n     * @dev Delegates votes from signer to `delegatee`.\\n     */\\n    function delegateBySig(\\n        address delegatee,\\n        uint256 nonce,\\n        uint256 expiry,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n}\\n\",\"keccak256\":\"0xe8e2d2f70db1913260634f710cc057d669b06eccf4dca27e18b79c3bbb101da6\",\"license\":\"MIT\"},\"openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.1) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized < type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\",\"keccak256\":\"0x037c334add4b033ad3493038c25be1682d78c00992e1acb0e2795caff3925271\",\"license\":\"MIT\"},\"openzeppelin-contracts-upgradeable/contracts/token/ERC20/IERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20Upgradeable {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x4e733d3164f73f461eaf9d8087a7ad1ea180bdc8ba0d3d61b0e1ae16d8e63dff\",\"license\":\"MIT\"},\"openzeppelin-contracts-upgradeable/contracts/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2edcb41c121abc510932e8d83ff8b82cf9cdde35e7c297622f5c29ef0af25183\",\"license\":\"MIT\"},\"openzeppelin-contracts-upgradeable/contracts/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x963ea7f0b48b032eef72fe3a7582edf78408d6f834115b9feadd673a4d5bd149\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x6080806040523461001c5761410d908161002282393081602d0152f35b600080fdfe608080604052600436101561001357600080fd5b600090813560e01c63775c300c1461002a57600080fd5b307f0000000000000000000000000000000000000000000000000000000000000000146100be57816003193601126100be576140158082019082821067ffffffffffffffff8311176100aa579082916100c38339039082f0801561009d576040516001600160a01b039091168152602090f35b50604051903d90823e3d90fd5b634e487b7160e01b84526041600452602484fd5b5080fdfe6080806040523461001657613ff9908161001c8239f35b600080fdfe608080604052600436101561001357600080fd5b60003560e01c90816306fdde0314611ae95750806307da68f514611a8e5780630fc8deca14611a5a57806315622e2314611a1b57806318160ddd14611a00578063258c97ca146119b2578063313ce567146119965780633a46b1a81461191f5780633ccfd60b146117fa57806349b321161461173a578063587cde1e146116e95780635b4df0a2146116525780635c19a95c1461163357806361bc221a1461161557806367c8c473146115f75780636a4fd4501461154457806370a0823114611519578063715018a6146114bc578063748bb5e8146112ca57806375f12b21146112a75780637ac512bb146110eb5780638606d0e1146110bf578063874d6d811461109c5780638da5cb5b146110735780638e539e8c146110195780639109ec0014610f6657806395d89b4114610f2257806398c6e76014610ef55780639ab24eb014610e985780639f4d110f14610e69578063a0f52da014610df6578063ac7ae58914610dd8578063b53546ab14610d48578063b623163314610d2a578063be9a655514610ca3578063c3cda52014610c78578063cbf9fe5f14610c32578063d4fadbde14610bbe578063d93bf4fe14610b37578063ee85dc40146104ca578063f15403f914610478578063f2fde38b146103e9578063f4359ce5146103cb578063fc0c546a146103a25763fc7881c61461020e57600080fd5b3461039d57604036600319011261039d57610227611b8c565b61024c60675461023a60ff821615611cdf565b60081c6001600160a01b031615611d15565b610257600435612b53565b6004356000908152606b60205260409020600101546001600160a01b031691906102864363ffffffff16612b1f565b9280600052606c60205261029e84604060002061376a565b600052606c60205261033f6102d561032160406000209463ffffffff6102c788600435896132b7565b919590988a84431691613cdc565b604051946102e286611c17565b828a16988987526001600160601b03809216602088015216604086015216606084015260018060a01b03169586600052606c602052604060002061376a565b84600052606c60205263ffffffff4316906004356040600020612c60565b600435600052606b6020526001604060002001836001600160601b0360a01b82541617905560405191825260018060a01b0316907f85c2730e083fbf1495501a47cbebc8a7e57eab8b6eeac16aedcebc825e268fac602060043592a4005b600080fd5b3461039d57600036600319011261039d576065546040516001600160a01b039091168152602090f35b3461039d57600036600319011261039d5760206040516201d8808152f35b3461039d57602036600319011261039d57610402611b76565b61040a613f22565b6001600160a01b038116156104245761042290613f7a565b005b60405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608490fd5b3461039d57606036600319011261039d576004356001600160601b03808216820361039d576104b96040926104ab611ba2565b6104b3611bee565b9161299b565b835191831682529091166020820152f35b3461039d5760a036600319011261039d576104e3611b8c565b6104eb611c01565b6104f3611bc8565b916104fc611bdb565b61050f60675461023a60ff821615611cdf565b61051a600435612b53565b9161052a63ffffffff4316612b1f565b9161053f6001600160601b0386161515611d4d565b610552606763ffffffff83161115611d87565b606863ffffffff871611610afb5763ffffffff861615610abf5761057f8661057a8386612bcf565b612bcf565b60018060a01b038516600052606c60205260056040600020016004356000526020526105ae6040600020611c87565b9063ffffffff80610603816105ee6105e96001600160601b036020890151166105e46001600160601b0360408b01511691611e98565b61296d565b611e0f565b1661057a838751168460608901511690612bcf565b9216911611610a7a5761062863ffffffff82511663ffffffff60608401511690612bcf565b6106328386612bcf565b63ffffffff811663ffffffff8316116109c4575b505050600435600052606b60205260018060a01b036001604060002001541660018060a01b038516600052606c60205261068784600460406000200161376a565b60018060a01b038516600052606c6020526001600160601b0360076040600020015460201c16906106b98582886128dc565b600052606c6020526106e760406000206106d686600435836132b7565b5050508563ffffffff431691613cdc565b6106f384600435612ffa565b50505061070663ffffffff431685613c6e565b60018060a01b038516600052606c602052600460406000200161074061072f86600435846132b7565b5050918663ffffffff431691613cdc565b6001600160601b0387166001600160601b038216116109685761076661078f9188611eb1565b9160018060a01b038716600052606c6020526001600160601b0360086040600020015416611eb1565b906001600160601b0382166001600160601b03821611610842575b505063ffffffff90816020976107c1606654611e00565b6066556107d58243168785848c8a8d6123b1565b6001600160601b036066549883604051988b8a52168b89015216604087015216606085015216608083015260018060a01b03169160018060a01b0316907fff9e53f270b2e95a429fec2ba89150265ce93322bdadde5312993a6297d1021a60a060043592a4604051908152f35b6108526108fe9392602092611eb1565b60018060a01b038716600052606c825261087d816001600160601b0360086040600020015416611e27565b6001600160a01b038881166000908152606c8552604080822060080180546bffffffffffffffffffffffff19166001600160601b03958616179055606554600480358452606b88528284205492516323b872dd60e01b8152928516908301523060248301529490931660448401529195869390911691839182906064820190565b03925af1801561095c5760209761092563ffffffff9492859360009161092f575b50611e5a565b97508192506107aa565b61094f91508b3d8d11610955575b6109478183611c65565b810190611e42565b8b61091f565b503d61093d565b6040513d6000823e3d90fd5b60405162461bcd60e51b815260206004820152602e60248201527f496d706f737369626c6520746f2072656c6f636b3a206c65737320616d6f756e60448201526d742c207468656e206e6f7720697360901b6064820152608490fd5b6109cd91612939565b63ffffffff806109e56105e9828c166105e48c611e98565b1691160263ffffffff8116908103610a64576001600160601b036020610a0c82938a611eb1565b93015116911610610a1f57868080610646565b60405162461bcd60e51b815260206004820152601960248201527f64657465637420637574206465706f73697420636f726e6572000000000000006044820152606490fd5b634e487b7160e01b600052601160045260246000fd5b60405162461bcd60e51b815260206004820152601e60248201527f6e6577206c696e6520706572696f64206c6f636b20746f6f2073686f727400006044820152606490fd5b60405162461bcd60e51b81526020600482015260146024820152730736c6f706520706572696f6420657175616c20360641b6044820152606490fd5b60405162461bcd60e51b8152602060048201526014602482015273736c6f706520706572696f6420746f6f2062696760601b6044820152606490fd5b3461039d5760208060031936011261039d5760043567ffffffffffffffff811161039d573660238201121561039d57806004013590610b7582611cc7565b91610b836040519384611c65565b80835260248484019160051b8301019136831161039d57602401905b828210610baf5761042284612013565b81358152908401908401610b9f565b3461039d57602036600319011261039d57610422610bda611bb5565b610c2560675491610c20610c1a60ff85161594610bf686611cdf565b60081c6001600160a01b03161592610c0d84611d15565b610c15613f22565b612b1f565b93611cdf565b611d15565b610c2d613f22565b613619565b3461039d57602036600319011261039d576001600160a01b03610c53611b76565b16600052606c60205260206001600160601b0360086040600020015416604051908152f35b3461039d5760c036600319011261039d57610c91611b76565b5060643560ff811614612c2957600080fd5b3461039d57600036600319011261039d57610cbc613f22565b60675460ff811615610cf75760ff1916606755337f5dd18d9d0267344a73ac262626686f7811c9a12e8bce0c8a1588fe1bf9b590bb600080a2005b60405162461bcd60e51b815260206004820152600b60248201526a1b9bdd081cdd1bdc1c195960aa1b6044820152606490fd5b3461039d57600036600319011261039d576020606954604051908152f35b3461039d57600036600319011261039d576080604051610d6781611c17565b60705463ffffffff811682526001600160601b03808260201c16602084015281841c16604083015260e01c6060820152610dd660405180926060908163ffffffff918281511685526001600160601b038060208301511660208701526040820151166040860152015116910152565bf35b3461039d57600036600319011261039d576020606a54604051908152f35b3461039d57602036600319011261039d57610e0f611b76565b610e17613f22565b60678054610100600160a81b031916600883901b610100600160a81b03161790556001600160a01b0316337f51ace7fc4e2a9f6104449d0bbe0532efdfd8dfebc68b225b91dd1de3bbb804fd600080a3005b3461039d57602036600319011261039d57610422610e85611bb5565b610c2560675461023a60ff821615611cdf565b3461039d57602036600319011261039d5760206001600160601b03610eec610ebe611b76565b63ffffffff431690610ecf82612b1f565b6001600160a01b039091166000908152606c865260409020613988565b16604051908152f35b3461039d57600036600319011261039d5760675460405160089190911c6001600160a01b03168152602090f35b3461039d57600036600319011261039d57610f62604051610f4281611c49565b600781526676654d454e544f60c81b602082015260405191829182611b2d565b0390f35b3461039d57602036600319011261039d5763ffffffff610f84611bb5565b610f9760675461023a60ff821615611cdf565b610f9f613f22565b166068811015610fd457806069557f88345dd2cdc36a4778bf7fed510015cf81efda1a773e1b6360fde7cb1631b210600080a2005b60405162461bcd60e51b815260206004820152601a60248201527f6e657720736c6f706520706572696f64203e20322079656172730000000000006044820152606490fd5b3461039d57602036600319011261039d5760206001600160601b03610eec60043563ffffffff906110628282169261105084612b1f565b92814316119081611067575b50612be7565b6138f8565b9050821615158761105c565b3461039d57600036600319011261039d576033546040516001600160a01b039091168152602090f35b3461039d57600036600319011261039d57602063ffffffff610eec814316612b1f565b3461039d57602036600319011261039d5760206110dd610c15611bb5565b63ffffffff60405191168152f35b3461039d57608036600319011261039d576004356001600160a01b0381169081900361039d57611119611ba2565b90611122611bee565b9061112b611bc8565b6000549260ff8460081c16159485809661129a575b8015611283575b156112275760ff1985166001176000556111be9486611215575b5060ff60005460081c169361117585612351565b6001600160601b0360a01b606554161760655563ffffffff9182809216606a5516916111a46067841115611d87565b16906111b36068831115611dc3565b606855606955612351565b6111c733613f7a565b600054906111da60ff8360081c16612351565b6111e057005b61ff0019166000557f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498602060405160018152a1005b61ffff19166101011760005586611161565b60405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b6064820152608490fd5b50303b1580156111475750600160ff861614611147565b50600160ff861610611140565b3461039d57600036600319011261039d57602060ff606754166040519015158152f35b3461039d5760a036600319011261039d5761142b6112e6611b76565b6112ee611b8c565b6112f6611c01565b6112fe611bc8565b91611307611bdb565b61131a60675461023a60ff821615611cdf565b60006001600160601b03841692611332841515611d4d565b611345606763ffffffff85161115611d87565b63ffffffff86169661135a6068891115611dc3565b611365606654611e00565b60665561138d61137a63ffffffff4316612b1f565b97888663ffffffff4316928a87876123b1565b60018060a01b0316948583526020988991606c83526113bc816001600160601b03600860408920015416611e27565b888652606c8452604080872060080180546bffffffffffffffffffffffff19166001600160601b0393841617905560655490516323b872dd60e01b8152336004820152306024820152929091166044830152909485926001600160a01b03929092169183919082906064820190565b03925af1801561095c577f9024bda3efb3f3701e8d25fdb8d8adb67deb176633f590ee4a3cd1dad74dc73e9361147063ffffffff9260809560009161149f5750611e5a565b606654988996836040519a168a528b8a0152604089015216606087015260018060a01b031694a4604051908152f35b6114b691508c8d3d10610955576109478183611c65565b8c61091f565b3461039d57600036600319011261039d576114d5613f22565b603380546001600160a01b031981169091556000906001600160a01b03167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08280a3005b3461039d57602036600319011261039d57602061153c611537611b76565b611f7a565b604051908152f35b3461039d57602036600319011261039d5763ffffffff611562611bb5565b61157560675461023a60ff821615611cdf565b61157d613f22565b1660678110156115b257806068557fa21222d0eed205eed6a46ed1fe7faf1d0b5d097b9e04a6d4e59b7f1debfc8b2b600080a2005b60405162461bcd60e51b815260206004820152601a60248201527f6e657720636c69666620706572696f64203e20322079656172730000000000006044820152606490fd5b3461039d57600036600319011261039d576020606854604051908152f35b3461039d57600036600319011261039d576020606654604051908152f35b3461039d57602036600319011261039d5761164c611b76565b50612c29565b3461039d57604036600319011261039d5761042261166e611b76565b611676611ba2565b90606754906116b460ff8316159361168d85611cdf565b6001600160a01b039360081c84161590610c20906116ae90610c0d84611d15565b95611cdf565b6116bc613f22565b1680600052606c6020526116d482604060002061376a565b600052606c602052600460406000200161376a565b3461039d57602036600319011261039d57611702611b76565b5060405162461bcd60e51b815260206004820152600f60248201526e1b9bdd081a5b5c1b195b595b9d1959608a1b6044820152606490fd5b3461039d57602036600319011261039d57611753611bb5565b61176660675461023a60ff821615611cdf565b61176e613f22565b63ffffffff8061177f814316612b1f565b169116908110156117b55780606a557f2f807974bc9b84320f39300f6395b257c58bb285c61d262ec17c8332772d6836600080a2005b60405162461bcd60e51b815260206004820152601a60248201527f77726f6e67206e65775374617274696e67506f696e745765656b0000000000006044820152606490fd5b3461039d57600036600319011261039d5761181433611eca565b6001600160601b038082169182611855575b826040519081527f884edad9ce6fa2440d8a54cc123490eb96d2768479d49ff9c7366125a942436460203392a2005b6118df602091600093338552606c84526118788282600860408920015416611eb1565b90338652606c85526008604087200191166001600160601b031982541617905560018060a01b03606554169060405194858094819363a9059cbb60e01b835233600484019092916001600160601b03602091604084019560018060a01b0316845216910152565b03925af1801561095c576118fa916000916119015750611e5a565b8180611826565b611919915060203d8111610955576109478183611c65565b8361091f565b3461039d57604036600319011261039d5760206001600160601b03610eec611945611b76565b60243563ffffffff9161196f8383169361195e85612b1f565b9381431611908161198a5750612be7565b6001600160a01b03166000908152606c865260409020613988565b9050831615158861105c565b3461039d57600036600319011261039d57602060405160128152f35b3461039d57604036600319011261039d576104226119ce611b76565b6119d6611ba2565b90606754906119e860ff831615611cdf565b6001600160a01b03916116b49060081c831615611d15565b3461039d57600036600319011261039d57602061153c611f35565b3461039d57602036600319011261039d57600435600052606b60205260408060002060018060a01b036001818354169201541682519182526020820152f35b3461039d57602036600319011261039d576020611a7d611a78611b76565b611eca565b6001600160601b0360405191168152f35b3461039d57600036600319011261039d57611aa7613f22565b6001606754611ab960ff821615611cdf565b60ff191617606755337f0ba58f37677f991d1d1abdcd0196dcaf38b76014761d2f104fd8e663bcca9478600080a2005b3461039d57600036600319011261039d5780611b07610f6292611c49565b60118152704d656e746f20566f74652d457363726f7760781b6020820152604051918291825b6020808252825181830181905290939260005b828110611b6257505060409293506000838284010152601f8019910116010190565b818101860151848201604001528501611b40565b600435906001600160a01b038216820361039d57565b602435906001600160a01b038216820361039d57565b6024359063ffffffff8216820361039d57565b6004359063ffffffff8216820361039d57565b6064359063ffffffff8216820361039d57565b6084359063ffffffff8216820361039d57565b6044359063ffffffff8216820361039d57565b604435906001600160601b038216820361039d57565b6080810190811067ffffffffffffffff821117611c3357604052565b634e487b7160e01b600052604160045260246000fd5b6040810190811067ffffffffffffffff821117611c3357604052565b90601f8019910116810190811067ffffffffffffffff821117611c3357604052565b90604051611c9481611c17565b606081935463ffffffff811683526001600160601b03808260201c1660208501528160801c16604084015260e01c910152565b67ffffffffffffffff8111611c335760051b60200190565b15611ce657565b60405162461bcd60e51b81526020600482015260076024820152661cdd1bdc1c195960ca1b6044820152606490fd5b15611d1c57565b60405162461bcd60e51b81526020600482015260096024820152686d6967726174696e6760b81b6044820152606490fd5b15611d5457565b60405162461bcd60e51b815260206004820152600b60248201526a1e995c9bc8185b5bdd5b9d60aa1b6044820152606490fd5b15611d8e57565b60405162461bcd60e51b815260206004820152600d60248201526c636c69666620746f6f2062696760981b6044820152606490fd5b15611dca57565b60405162461bcd60e51b815260206004820152600e60248201526d706572696f6420746f6f2062696760901b6044820152606490fd5b6000198114610a645760010190565b9060016001600160601b0380931601918211610a6457565b9190916001600160601b0380809416911601918211610a6457565b9081602091031261039d5751801515810361039d5790565b15611e6157565b60405162461bcd60e51b815260206004820152600f60248201526e1d1c985b9cd9995c8819985a5b1959608a1b6044820152606490fd5b6001600160601b039081166000190191908211610a6457565b6001600160601b039182169082160391908211610a6457565b60018060a01b031680600052606c6020526001600160601b03600860406000200154169060ff6067541615611efd575090565b90611f2c611f329263ffffffff431690611f1682612b1f565b90600052606c6020526004604060002001613988565b90611eb1565b90565b6001600160601b038060705460201c16158015611f6e575b611f6857611f6463ffffffff431661106281612b1f565b1690565b50600090565b5060ff60675416611f4d565b60018060a01b031680600052606c6020526001600160601b03908160036040600020015460201c16158015611fdd575b611fd657611f649063ffffffff431690611fc382612b1f565b90600052606c6020526040600020613988565b5050600090565b5060ff60675416611faa565b8051821015611ffd5760209160051b010190565b634e487b7160e01b600052603260045260246000fd5b606780549192916001600160a01b039060089080821c8316156123495761203f63ffffffff4316612b1f565b60005b87518110156122de578161205f612059838b611fe9565b51612b53565b612069838b611fe9565b51600052606b602052858a6121758461216f878c600160406000200154169461209384878a6128dc565b8d88166000528d606c8060205260056040600020016120b28585611fe9565b516000526020526120c66040600020611c87565b98828b16600052816020526121036120f260046040600020019d8e6120eb8989611fe9565b51906132b7565b50509c8863ffffffff431691613cdc565b828b16600052816020526001600160601b03916121298d84846040600020015416611eb1565b938c1660005260205260406000200191166001600160601b03198254161790558560005261216a60406000206106d6866121638686611fe9565b51836132b7565b611fe9565b51612ffa565b50505061218863ffffffff431687613c6e565b612192858d611fe9565b519289888a1c163b1561039d5789906040519463ef2c967160e01b865260048601526121f5602494858701906060908163ffffffff918281511685526001600160601b038060208301511660208701526040820151166040860152015116910152565b1660a484015260c483015260008260e481838c8b8d1c165af1801561095c576122ad575b5050606554875460405163a9059cbb60e01b815290871c88166001600160a01b031660048201526001600160601b039290921660248301529091906020908390881681600081604481015b03925af191821561095c57612289926122849160009161228e5750611e5a565b611e00565b612042565b6122a7915060203d602011610955576109478183611c65565b3861091f565b67ffffffffffffffff82116122ca57506040526020612264612219565b634e487b7160e01b60009081526041600452fd5b5050505050509060405160208082018183528351809152816040840194019160005b8281106123355750505050807f9302ff85f986fa03af144f0430ecea91ded0b24af1655f46bde13c1d3c13b76b9133930390a2565b835186529481019492810192600101612300565b505050509050565b1561235857565b60405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b6064820152608490fd5b9194939092946001600160601b03811663ffffffff871611612897576001600160601b03956123e18686866128dc565b6123ec83828461299b565b604051989182906123fc8b611c17565b63ffffffff8a168b521660208a01521680604089015263ffffffff841660608901526066549015612841576001600160601b036040890151166001600160601b0360208a015116106127e95780600052606e6020526001600160601b0360406000205460201c1661279857600052606e60205261247d876040600020612f57565b61248d63ffffffff885116613619565b607054600160201b600160801b036124be6001600160601b0360208b0151166001600160601b038460201c16611e27565b60201b1690600160201b600160801b031916176070556125ec876124e863ffffffff825116612923565b63ffffffff6125126001600160601b036020850151166001600160601b036040860151169061296d565b169063ffffffff6060840151168015600014612756575063ffffffff6125726001600160601b03604061257995966070548360801b61255b858585015116868460801c16611e27565b60801b16908460801b191617607055015116613c1d565b9116613e60565b63ffffffff6125b26125a86125a38c6001600160601b036040816020840151169201511690612fb8565b613c1d565b92828c5116612bcf565b6125e68b836125df866125da6001600160601b0360406125d189612923565b96015116613c1d565b612fd0565b9116613eea565b16613eea565b63ffffffff875116607054906001600160601b036040519261260d84611c17565b63ffffffff8c168452818160201c16602085015260801c1660408301526060820152606f54600160401b811015611c335780600161264e9201606f556138a9565b9190916127405761265e91612f57565b6001600160a01b039485166000818152606c602052604090206066549198612687928b92612c60565b63ffffffff1661269682611e98565b906126a09161296d565b6126a990611e0f565b90604051956126b787611c17565b63ffffffff1686526001600160601b031660208601526001600160601b0316604085015263ffffffff166060840152169283600052606c60205260406000206004019160665461270693612c60565b606654600052606b60205260406000206001600160601b0360a01b9283825416179055606654600052604060002060010191825416179055565b634e487b7160e01b600052600060045260246000fd5b9263ffffffff6125726001600160601b0360406127796127939861278297612bcf565b94015116613c1d565b63ffffffff60608b01511690612bcf565b612579565b60405162461bcd60e51b815260206004820152602360248201527f4c696e65207769746820676976656e20696420697320616c72656164792065786044820152621a5cdd60ea1b6064820152608490fd5b60405162461bcd60e51b815260206004820152602a60248201527f536c6f7065203e20626961732c20756e61636365707461626c652076616c756560448201526920666f7220736c6f706560b01b6064820152608490fd5b60405162461bcd60e51b815260206004820152602860248201527f536c6f7065203d3d20302c20756e61636365707461626c652076616c756520666044820152676f7220736c6f706560c01b6064820152608490fd5b60405162461bcd60e51b815260206004820152601760248201527f57726f6e672076616c756520736c6f7065506572696f640000000000000000006044820152606490fd5b9061292192916128eb83613619565b60018060a01b03809216600052606c60205261290b83604060002061376a565b16600052606c602052600460406000200161376a565b565b63ffffffff9081166000190191908211610a6457565b63ffffffff9182169082160391908211610a6457565b9190916001600160601b0380809416911602918216918203610a6457565b906001600160601b0380911691821561298557160490565b634e487b7160e01b600052601260045260246000fd5b60685493929163ffffffff908184168611612acf576069549180821696838810612a7f57816129d2816304c4b40093168098612939565b16026001600160601b0395868216918203610a645760670390828211610a6457612a1283612a098193826302625a0096169061296d565b96168095612939565b160291858316928303610a645760680392818411610a6457612a408693612a46936301312d0096169061296d565b90611e27565b160190828211610a6457908216908216818102918115918304141715610a6457611f32916305f5e1006105e9920416936105e485611e98565b60405162461bcd60e51b815260206004820152602260248201527f736c6f706520706572696f64203c206d696e696d616c206c6f636b20706572696044820152611bd960f21b6064820152608490fd5b60405162461bcd60e51b815260206004820152602260248201527f636c69666620706572696f64203c206d696e696d616c206c6f636b20706572696044820152611bd960f21b6064820152608490fd5b63ffffffff80911662015f6c8110611fd65762015f6b1901818111610a64576201d88082611f3293606a5416921604612939565b6000908152606b60205260409020546001600160a01b031690338203612b7557565b60405162461bcd60e51b815260206004820152601760248201527f63616c6c6572206e6f742061206c6f636b206f776e65720000000000000000006044820152606490fd5b90600163ffffffff80931601918211610a6457565b91909163ffffffff80809416911601918211610a6457565b15612bee57565b60405162461bcd60e51b8152602060048201526013602482015272189b1bd8dac81b9bdd081e595d081b5a5b9959606a1b6044820152606490fd5b60405162461bcd60e51b815260206004820152600f60248201526e1b9bdd081a5b5c1b195b595b9d1959608a1b6044820152606490fd5b9093929193604094858101916001600160601b038084511615612ea9578084511693602092838501958387511610612e5257600187019080600052818552838b60002054861c16612e0257612dbe9492612ccf876129219c9d612d9d9795612db7956000528752600020612f57565b88612daf888563ffffffff9b8c988995612cec878651168261376a565b612d0d612d078560038401948554901c168686511690611e27565b83612efe565b8688612d1b82885116612923565b93606083612d30898951168a8651169061296d565b169801838151168015600014612dc6575050938693612d919693612d7d86612d8595612d768a612d706125da9e6125a39d5460801c168585511690611e27565b90612f24565b5116613c1d565b921690613ea6565b51168988511690612fb8565b988992858d5116612bcf565b96612da788612923565b955116613c1d565b911689613f06565b1685613f06565b511690613cdc565b849250612d919799938996612dfc96612d7d6125da9c612dec612df4966125a39d612bcf565b945116613c1d565b511690612bcf565b94612d85565b8a5162461bcd60e51b815260048101869052602360248201527f4c696e65207769746820676976656e20696420697320616c72656164792065786044820152621a5cdd60ea1b6064820152608490fd5b895162461bcd60e51b815260048101859052602a60248201527f536c6f7065203e20626961732c20756e61636365707461626c652076616c756560448201526920666f7220736c6f706560b01b6064820152608490fd5b875162461bcd60e51b815260206004820152602860248201527f536c6f7065203d3d20302c20756e61636365707461626c652076616c756520666044820152676f7220736c6f706560c01b6064820152608490fd5b90600160201b600160801b0382549160201b1690600160201b600160801b031916179055565b80546bffffffffffffffffffffffff60801b191660809290921b6bffffffffffffffffffffffff60801b16919091179055565b9060609063ffffffff81511663ffffffff19845416178355612f966001600160601b03612f8a8160208501511686612efe565b60408301511684612f24565b015181546001600160e01b031660e09190911b6001600160e01b031916179055565b906001600160601b0380911691821561298557160690565b600b91820b910b03906b7fffffffffffffffffffffff19821260016001605f1b03831317610a6457565b9190600091838352602092606e845261301560408220611c87565b848101916001600160601b0392838151161561327257839061303687613619565b5116968360408401511696829163ffffffff6130628b8261305b8d828b51169361296d565b1690612bcf565b98613075606088019a838c511690612bcf565b828116958383169b878d1161325d57908e6130c48f969594936130bf9087806130b36125a36130a38a612923565b9c6130ad8c612923565b98612fb8565b9f511691511690612bcf565b612923565b8581169e9093908f81116131685750505050906130e091612939565b6130e990612bba565b996130f38c613c1d565b6130fc91613eea565b866131068c613c1d565b9061311091612fd0565b91169061311c91613e60565b61312a604095606e94613e60565b600160201b600160801b036131468b6070549889861c16611eb1565b831b16600160201b600160801b03198097161760705583525220908154169055565b929e5093925094849f5084168091111560001461320d57908d9392916070548c866001600160601b0360801b918360801c16906131a491611eb1565b60801b16906001600160601b0360801b1916176070558a6131c486613c1d565b906131ce91612fd0565b6131d791613e60565b6131e091612939565b16906131eb9161294f565b8688166131f791611e27565b9a6132018b613c1d565b91169061311c91613eea565b50506070548989169c5091506bffffffffffffffffffffffff60801b905061323b8c608084901c8b16611eb1565b60801b16906001600160601b0360801b191617607055899a8a61320190613c1d565b50505050505050509450505092505080918190565b60405162461bcd60e51b815260048101889052601f60248201527f52656d6f76696e67204c696e652c207768696368206e6f7420657869737473006044820152606490fd5b91909260018301926000858152846020526132d460408220611c87565b94602086016001600160601b0381511615613554576001600160601b03906132fc878661376a565b5116966001600160601b036040880151169683966133278a63ffffffff61305b8c828751169361296d565b9061333e606084019263ffffffff84511690612bcf565b9863ffffffff8a16928363ffffffff841611613541578b92916133916130bf8f9363ffffffff8f6133856125a36133758493612923565b9a61337f8b612923565b99612fb8565b9a511691511690612bcf565b9b63ffffffff808e1690851611613447575050506133af908a612939565b6133b890612bba565b986133c28b613c1d565b6133d29163ffffffff1689613f06565b826133dc8b613c1d565b906133e691612fd0565b6133f69163ffffffff1688613ea6565b60409561340a613428936003935b83613ea6565b016134228a6001600160601b03835460201c16611eb1565b90612efe565b82526020522080546fffffffffffffffffffffffff0000000019169055565b919d509a509163ffffffff90811690821681106134fe57908b929160038a0184815460801c6001600160601b03169061347f91611eb1565b61348891612f24565b8561349285613c1d565b9061349c91612fd0565b6134a6918b613ea6565b6134af91612939565b63ffffffff16906134bf9161294f565b826001600160601b03166134d291611e27565b996134dc8a613c1d565b6134ec9163ffffffff1688613f06565b60409561340a61342893600393613404565b50505097506003850197885460801c6001600160601b031698826001600160601b0316998a61352c91611eb1565b61353591612f24565b8899896134dc90613c1d565b5050505050505093505092505080918190565b60405162461bcd60e51b815260206004820152601f60248201527f52656d6f76696e67204c696e652c207768696368206e6f7420657869737473006044820152606490fd5b90600b0b90600b0b019060016001605f1b0319821260016001605f1b03831317610a6457565b156135c657565b60405162461bcd60e51b815260206004820152602560248201527f736c6f7065203c20302c20736f6d657468696e672077726f6e67207769746820604482015264736c6f706560d81b6064820152608490fd5b6070549063ffffffff808084169216808314613764576001600160601b0392838560801c16906020948087871c169485613684575b50505090600160201b600160801b0392916001600160601b0360801b9060801b169463ffffffff60e01b1617921b161717607055565b8285999398929694991115613711579697925b87891690858210156136f457906136e56136bd6136b7876136ed95611eb1565b96613c1d565b916000908152606d8a526136db604082205493600b94850b90613599565b80930b12156135bf565b861698612bba565b9792613697565b929850909650909350600160201b600160801b039050388061364e565b60405162461bcd60e51b815260048101889052602560248201527f63616e2774207570646174652042726f6b656e4c696e6520666f7220706173746044820152642074696d6560d81b6064820152608490fd5b50505050565b600381018054939263ffffffff9081168186168181146138a0576001600160601b0394858860801c1695602091818a841c1695866137c7575b5050505050906137c291612921959663ffffffff191617835582612efe565b612f24565b84869297959a949996989398111561384d579894935b898616908282101561382f57906138206138036137fd8861382895611eb1565b97613c1d565b916000908152898c526136db604082205493600b94850b90613599565b881695612bba565b94936137dd565b93995093975090955090935091508190506129216137c238806137a3565b60405162461bcd60e51b8152600481018a9052602560248201527f63616e2774207570646174652042726f6b656e4c696e6520666f7220706173746044820152642074696d6560d81b6064820152608490fd5b50505050509050565b606f54811015611ffd57606f6000527f39f2babe526038520877fc7c33d81accf578af4a06c5fa6b0d038cae36e127110190600090565b8054821015611ffd5760005260206000200190600090565b9060705463ffffffff808216908085169081831461394257508110613922575050611f3291613b23565b909150611f32926001600160601b03808460801c169360201c1691613a21565b915050606f939193546000198101908111610a645761396182916138a9565b505416908316111561397e57505060201c6001600160601b031690565b611f329250613b23565b919060038301549263ffffffff9384811694808416908187146139d7575085106139b75750611f329350613bad565b925090611f32936001600160601b03808560801c169460201c1692613aa4565b91955050600282018054906000198201918211610a645782916139f9916138e0565b5054169084161115613a175750505060201c6001600160601b031690565b611f329350613bad565b90919392936001600160601b039182821615613a9d5794905b63ffffffff90818716918516821015613a955790613a86613a67613a6185613a8e95611eb1565b94613c1d565b916000908152606d6020526136db604082205493600b94850b90613599565b831695612bba565b9490613a3a565b955050505050565b5093505050565b9294939091946001600160601b039283821615613b1b5791905b63ffffffff90818416918816821015613b125790613b03613ae5613a6185613b0b95611eb1565b916000908152876020526136db604082205493600b94850b90613599565b841692612bba565b9190613abe565b96505050505050565b509450505050565b90606f54613b3081611cc7565b90613b3e6040519283611c65565b808252606f600090815260207f39f2babe526038520877fc7c33d81accf578af4a06c5fa6b0d038cae36e127118185015b848410613b91575050505050611f329291613b8991613d3f565b929092613a21565b6001838192613b9f85611c87565b815201920193019290613b6f565b929192600281018054613bbf81611cc7565b91613bcd6040519384611c65565b818352600090815260208082208185015b848410613c01575050505050611f329394613bf891613d3f565b90939192613aa4565b6001838192613c0f85611c87565b815201920193019290613bde565b6001600160601b03166001605f1b811015613c3857600b0b90565b60405162461bcd60e51b815260206004820152600e60248201526d34b73a1031b0b9ba1032b93937b960911b6044820152606490fd5b906070549160405192613c8084611c17565b63ffffffff80931684526001600160601b0390818160201c16602086015260801c166040840152166060820152606f54600160401b811015611c3357806001613ccc9201606f556138a9565b9190916127405761292191612f57565b90916003600283019201549260405193613cf585611c17565b63ffffffff80931685526001600160601b0390818160201c16602087015260801c1660408501521660608301528054600160401b811015611c3357613ccc916001820181556138e0565b9182519182158015613e46575b613e3a5760009260001990818101908111613e26579084925b60808410613db7575b5050505063ffffffff6060613dad6001600160601b0394856020613d92838a611fe9565b51015116956040613da3838a611fe9565b5101511696611fe9565b5101511691929190565b9091929483811015613e2057838101808211610a64576001808201809211610a64571c9063ffffffff80613deb848b611fe9565b51511690841610613e095750613e019095611e00565b929190613d65565b959350828101908111610a6457613e019093611e00565b94613d6e565b634e487b7160e01b85526011600452602485fd5b50600092508291508190565b611ffd5763ffffffff806020860151511690821610613d4c565b90613e7c9082600052606d602052604060002054600b0b613599565b90600052606d6020526040600020906001600160601b0319825416906001600160601b0316179055565b9091613ec2908360005282602052604060002054600b0b613599565b916000526020526040600020906001600160601b0319825416906001600160601b0316179055565b90613e7c9082600052606d602052604060002054600b0b612fd0565b9091613ec2908360005282602052604060002054600b0b612fd0565b6033546001600160a01b03163303613f3657565b606460405162461bcd60e51b815260206004820152602060248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152fd5b603380546001600160a01b039283166001600160a01b0319821681179092559091167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0600080a356fea264697066735822122041cbebc7789e370d64e6da92130a1eecc60dd59cd6c30a70bd73aa58b09191dc64736f6c63430008120033a2646970667358221220bdfbc2da09387adc1e67a625c983b428bc96a83685548f2c0b3f8af1fcdc826064736f6c63430008120033",
  "deployedBytecode": "0x608080604052600436101561001357600080fd5b600090813560e01c63775c300c1461002a57600080fd5b307f0000000000000000000000000000000000000000000000000000000000000000146100be57816003193601126100be576140158082019082821067ffffffffffffffff8311176100aa579082916100c38339039082f0801561009d576040516001600160a01b039091168152602090f35b50604051903d90823e3d90fd5b634e487b7160e01b84526041600452602484fd5b5080fdfe6080806040523461001657613ff9908161001c8239f35b600080fdfe608080604052600436101561001357600080fd5b60003560e01c90816306fdde0314611ae95750806307da68f514611a8e5780630fc8deca14611a5a57806315622e2314611a1b57806318160ddd14611a00578063258c97ca146119b2578063313ce567146119965780633a46b1a81461191f5780633ccfd60b146117fa57806349b321161461173a578063587cde1e146116e95780635b4df0a2146116525780635c19a95c1461163357806361bc221a1461161557806367c8c473146115f75780636a4fd4501461154457806370a0823114611519578063715018a6146114bc578063748bb5e8146112ca57806375f12b21146112a75780637ac512bb146110eb5780638606d0e1146110bf578063874d6d811461109c5780638da5cb5b146110735780638e539e8c146110195780639109ec0014610f6657806395d89b4114610f2257806398c6e76014610ef55780639ab24eb014610e985780639f4d110f14610e69578063a0f52da014610df6578063ac7ae58914610dd8578063b53546ab14610d48578063b623163314610d2a578063be9a655514610ca3578063c3cda52014610c78578063cbf9fe5f14610c32578063d4fadbde14610bbe578063d93bf4fe14610b37578063ee85dc40146104ca578063f15403f914610478578063f2fde38b146103e9578063f4359ce5146103cb578063fc0c546a146103a25763fc7881c61461020e57600080fd5b3461039d57604036600319011261039d57610227611b8c565b61024c60675461023a60ff821615611cdf565b60081c6001600160a01b031615611d15565b610257600435612b53565b6004356000908152606b60205260409020600101546001600160a01b031691906102864363ffffffff16612b1f565b9280600052606c60205261029e84604060002061376a565b600052606c60205261033f6102d561032160406000209463ffffffff6102c788600435896132b7565b919590988a84431691613cdc565b604051946102e286611c17565b828a16988987526001600160601b03809216602088015216604086015216606084015260018060a01b03169586600052606c602052604060002061376a565b84600052606c60205263ffffffff4316906004356040600020612c60565b600435600052606b6020526001604060002001836001600160601b0360a01b82541617905560405191825260018060a01b0316907f85c2730e083fbf1495501a47cbebc8a7e57eab8b6eeac16aedcebc825e268fac602060043592a4005b600080fd5b3461039d57600036600319011261039d576065546040516001600160a01b039091168152602090f35b3461039d57600036600319011261039d5760206040516201d8808152f35b3461039d57602036600319011261039d57610402611b76565b61040a613f22565b6001600160a01b038116156104245761042290613f7a565b005b60405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608490fd5b3461039d57606036600319011261039d576004356001600160601b03808216820361039d576104b96040926104ab611ba2565b6104b3611bee565b9161299b565b835191831682529091166020820152f35b3461039d5760a036600319011261039d576104e3611b8c565b6104eb611c01565b6104f3611bc8565b916104fc611bdb565b61050f60675461023a60ff821615611cdf565b61051a600435612b53565b9161052a63ffffffff4316612b1f565b9161053f6001600160601b0386161515611d4d565b610552606763ffffffff83161115611d87565b606863ffffffff871611610afb5763ffffffff861615610abf5761057f8661057a8386612bcf565b612bcf565b60018060a01b038516600052606c60205260056040600020016004356000526020526105ae6040600020611c87565b9063ffffffff80610603816105ee6105e96001600160601b036020890151166105e46001600160601b0360408b01511691611e98565b61296d565b611e0f565b1661057a838751168460608901511690612bcf565b9216911611610a7a5761062863ffffffff82511663ffffffff60608401511690612bcf565b6106328386612bcf565b63ffffffff811663ffffffff8316116109c4575b505050600435600052606b60205260018060a01b036001604060002001541660018060a01b038516600052606c60205261068784600460406000200161376a565b60018060a01b038516600052606c6020526001600160601b0360076040600020015460201c16906106b98582886128dc565b600052606c6020526106e760406000206106d686600435836132b7565b5050508563ffffffff431691613cdc565b6106f384600435612ffa565b50505061070663ffffffff431685613c6e565b60018060a01b038516600052606c602052600460406000200161074061072f86600435846132b7565b5050918663ffffffff431691613cdc565b6001600160601b0387166001600160601b038216116109685761076661078f9188611eb1565b9160018060a01b038716600052606c6020526001600160601b0360086040600020015416611eb1565b906001600160601b0382166001600160601b03821611610842575b505063ffffffff90816020976107c1606654611e00565b6066556107d58243168785848c8a8d6123b1565b6001600160601b036066549883604051988b8a52168b89015216604087015216606085015216608083015260018060a01b03169160018060a01b0316907fff9e53f270b2e95a429fec2ba89150265ce93322bdadde5312993a6297d1021a60a060043592a4604051908152f35b6108526108fe9392602092611eb1565b60018060a01b038716600052606c825261087d816001600160601b0360086040600020015416611e27565b6001600160a01b038881166000908152606c8552604080822060080180546bffffffffffffffffffffffff19166001600160601b03958616179055606554600480358452606b88528284205492516323b872dd60e01b8152928516908301523060248301529490931660448401529195869390911691839182906064820190565b03925af1801561095c5760209761092563ffffffff9492859360009161092f575b50611e5a565b97508192506107aa565b61094f91508b3d8d11610955575b6109478183611c65565b810190611e42565b8b61091f565b503d61093d565b6040513d6000823e3d90fd5b60405162461bcd60e51b815260206004820152602e60248201527f496d706f737369626c6520746f2072656c6f636b3a206c65737320616d6f756e60448201526d742c207468656e206e6f7720697360901b6064820152608490fd5b6109cd91612939565b63ffffffff806109e56105e9828c166105e48c611e98565b1691160263ffffffff8116908103610a64576001600160601b036020610a0c82938a611eb1565b93015116911610610a1f57868080610646565b60405162461bcd60e51b815260206004820152601960248201527f64657465637420637574206465706f73697420636f726e6572000000000000006044820152606490fd5b634e487b7160e01b600052601160045260246000fd5b60405162461bcd60e51b815260206004820152601e60248201527f6e6577206c696e6520706572696f64206c6f636b20746f6f2073686f727400006044820152606490fd5b60405162461bcd60e51b81526020600482015260146024820152730736c6f706520706572696f6420657175616c20360641b6044820152606490fd5b60405162461bcd60e51b8152602060048201526014602482015273736c6f706520706572696f6420746f6f2062696760601b6044820152606490fd5b3461039d5760208060031936011261039d5760043567ffffffffffffffff811161039d573660238201121561039d57806004013590610b7582611cc7565b91610b836040519384611c65565b80835260248484019160051b8301019136831161039d57602401905b828210610baf5761042284612013565b81358152908401908401610b9f565b3461039d57602036600319011261039d57610422610bda611bb5565b610c2560675491610c20610c1a60ff85161594610bf686611cdf565b60081c6001600160a01b03161592610c0d84611d15565b610c15613f22565b612b1f565b93611cdf565b611d15565b610c2d613f22565b613619565b3461039d57602036600319011261039d576001600160a01b03610c53611b76565b16600052606c60205260206001600160601b0360086040600020015416604051908152f35b3461039d5760c036600319011261039d57610c91611b76565b5060643560ff811614612c2957600080fd5b3461039d57600036600319011261039d57610cbc613f22565b60675460ff811615610cf75760ff1916606755337f5dd18d9d0267344a73ac262626686f7811c9a12e8bce0c8a1588fe1bf9b590bb600080a2005b60405162461bcd60e51b815260206004820152600b60248201526a1b9bdd081cdd1bdc1c195960aa1b6044820152606490fd5b3461039d57600036600319011261039d576020606954604051908152f35b3461039d57600036600319011261039d576080604051610d6781611c17565b60705463ffffffff811682526001600160601b03808260201c16602084015281841c16604083015260e01c6060820152610dd660405180926060908163ffffffff918281511685526001600160601b038060208301511660208701526040820151166040860152015116910152565bf35b3461039d57600036600319011261039d576020606a54604051908152f35b3461039d57602036600319011261039d57610e0f611b76565b610e17613f22565b60678054610100600160a81b031916600883901b610100600160a81b03161790556001600160a01b0316337f51ace7fc4e2a9f6104449d0bbe0532efdfd8dfebc68b225b91dd1de3bbb804fd600080a3005b3461039d57602036600319011261039d57610422610e85611bb5565b610c2560675461023a60ff821615611cdf565b3461039d57602036600319011261039d5760206001600160601b03610eec610ebe611b76565b63ffffffff431690610ecf82612b1f565b6001600160a01b039091166000908152606c865260409020613988565b16604051908152f35b3461039d57600036600319011261039d5760675460405160089190911c6001600160a01b03168152602090f35b3461039d57600036600319011261039d57610f62604051610f4281611c49565b600781526676654d454e544f60c81b602082015260405191829182611b2d565b0390f35b3461039d57602036600319011261039d5763ffffffff610f84611bb5565b610f9760675461023a60ff821615611cdf565b610f9f613f22565b166068811015610fd457806069557f88345dd2cdc36a4778bf7fed510015cf81efda1a773e1b6360fde7cb1631b210600080a2005b60405162461bcd60e51b815260206004820152601a60248201527f6e657720736c6f706520706572696f64203e20322079656172730000000000006044820152606490fd5b3461039d57602036600319011261039d5760206001600160601b03610eec60043563ffffffff906110628282169261105084612b1f565b92814316119081611067575b50612be7565b6138f8565b9050821615158761105c565b3461039d57600036600319011261039d576033546040516001600160a01b039091168152602090f35b3461039d57600036600319011261039d57602063ffffffff610eec814316612b1f565b3461039d57602036600319011261039d5760206110dd610c15611bb5565b63ffffffff60405191168152f35b3461039d57608036600319011261039d576004356001600160a01b0381169081900361039d57611119611ba2565b90611122611bee565b9061112b611bc8565b6000549260ff8460081c16159485809661129a575b8015611283575b156112275760ff1985166001176000556111be9486611215575b5060ff60005460081c169361117585612351565b6001600160601b0360a01b606554161760655563ffffffff9182809216606a5516916111a46067841115611d87565b16906111b36068831115611dc3565b606855606955612351565b6111c733613f7a565b600054906111da60ff8360081c16612351565b6111e057005b61ff0019166000557f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498602060405160018152a1005b61ffff19166101011760005586611161565b60405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b6064820152608490fd5b50303b1580156111475750600160ff861614611147565b50600160ff861610611140565b3461039d57600036600319011261039d57602060ff606754166040519015158152f35b3461039d5760a036600319011261039d5761142b6112e6611b76565b6112ee611b8c565b6112f6611c01565b6112fe611bc8565b91611307611bdb565b61131a60675461023a60ff821615611cdf565b60006001600160601b03841692611332841515611d4d565b611345606763ffffffff85161115611d87565b63ffffffff86169661135a6068891115611dc3565b611365606654611e00565b60665561138d61137a63ffffffff4316612b1f565b97888663ffffffff4316928a87876123b1565b60018060a01b0316948583526020988991606c83526113bc816001600160601b03600860408920015416611e27565b888652606c8452604080872060080180546bffffffffffffffffffffffff19166001600160601b0393841617905560655490516323b872dd60e01b8152336004820152306024820152929091166044830152909485926001600160a01b03929092169183919082906064820190565b03925af1801561095c577f9024bda3efb3f3701e8d25fdb8d8adb67deb176633f590ee4a3cd1dad74dc73e9361147063ffffffff9260809560009161149f5750611e5a565b606654988996836040519a168a528b8a0152604089015216606087015260018060a01b031694a4604051908152f35b6114b691508c8d3d10610955576109478183611c65565b8c61091f565b3461039d57600036600319011261039d576114d5613f22565b603380546001600160a01b031981169091556000906001600160a01b03167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08280a3005b3461039d57602036600319011261039d57602061153c611537611b76565b611f7a565b604051908152f35b3461039d57602036600319011261039d5763ffffffff611562611bb5565b61157560675461023a60ff821615611cdf565b61157d613f22565b1660678110156115b257806068557fa21222d0eed205eed6a46ed1fe7faf1d0b5d097b9e04a6d4e59b7f1debfc8b2b600080a2005b60405162461bcd60e51b815260206004820152601a60248201527f6e657720636c69666620706572696f64203e20322079656172730000000000006044820152606490fd5b3461039d57600036600319011261039d576020606854604051908152f35b3461039d57600036600319011261039d576020606654604051908152f35b3461039d57602036600319011261039d5761164c611b76565b50612c29565b3461039d57604036600319011261039d5761042261166e611b76565b611676611ba2565b90606754906116b460ff8316159361168d85611cdf565b6001600160a01b039360081c84161590610c20906116ae90610c0d84611d15565b95611cdf565b6116bc613f22565b1680600052606c6020526116d482604060002061376a565b600052606c602052600460406000200161376a565b3461039d57602036600319011261039d57611702611b76565b5060405162461bcd60e51b815260206004820152600f60248201526e1b9bdd081a5b5c1b195b595b9d1959608a1b6044820152606490fd5b3461039d57602036600319011261039d57611753611bb5565b61176660675461023a60ff821615611cdf565b61176e613f22565b63ffffffff8061177f814316612b1f565b169116908110156117b55780606a557f2f807974bc9b84320f39300f6395b257c58bb285c61d262ec17c8332772d6836600080a2005b60405162461bcd60e51b815260206004820152601a60248201527f77726f6e67206e65775374617274696e67506f696e745765656b0000000000006044820152606490fd5b3461039d57600036600319011261039d5761181433611eca565b6001600160601b038082169182611855575b826040519081527f884edad9ce6fa2440d8a54cc123490eb96d2768479d49ff9c7366125a942436460203392a2005b6118df602091600093338552606c84526118788282600860408920015416611eb1565b90338652606c85526008604087200191166001600160601b031982541617905560018060a01b03606554169060405194858094819363a9059cbb60e01b835233600484019092916001600160601b03602091604084019560018060a01b0316845216910152565b03925af1801561095c576118fa916000916119015750611e5a565b8180611826565b611919915060203d8111610955576109478183611c65565b8361091f565b3461039d57604036600319011261039d5760206001600160601b03610eec611945611b76565b60243563ffffffff9161196f8383169361195e85612b1f565b9381431611908161198a5750612be7565b6001600160a01b03166000908152606c865260409020613988565b9050831615158861105c565b3461039d57600036600319011261039d57602060405160128152f35b3461039d57604036600319011261039d576104226119ce611b76565b6119d6611ba2565b90606754906119e860ff831615611cdf565b6001600160a01b03916116b49060081c831615611d15565b3461039d57600036600319011261039d57602061153c611f35565b3461039d57602036600319011261039d57600435600052606b60205260408060002060018060a01b036001818354169201541682519182526020820152f35b3461039d57602036600319011261039d576020611a7d611a78611b76565b611eca565b6001600160601b0360405191168152f35b3461039d57600036600319011261039d57611aa7613f22565b6001606754611ab960ff821615611cdf565b60ff191617606755337f0ba58f37677f991d1d1abdcd0196dcaf38b76014761d2f104fd8e663bcca9478600080a2005b3461039d57600036600319011261039d5780611b07610f6292611c49565b60118152704d656e746f20566f74652d457363726f7760781b6020820152604051918291825b6020808252825181830181905290939260005b828110611b6257505060409293506000838284010152601f8019910116010190565b818101860151848201604001528501611b40565b600435906001600160a01b038216820361039d57565b602435906001600160a01b038216820361039d57565b6024359063ffffffff8216820361039d57565b6004359063ffffffff8216820361039d57565b6064359063ffffffff8216820361039d57565b6084359063ffffffff8216820361039d57565b6044359063ffffffff8216820361039d57565b604435906001600160601b038216820361039d57565b6080810190811067ffffffffffffffff821117611c3357604052565b634e487b7160e01b600052604160045260246000fd5b6040810190811067ffffffffffffffff821117611c3357604052565b90601f8019910116810190811067ffffffffffffffff821117611c3357604052565b90604051611c9481611c17565b606081935463ffffffff811683526001600160601b03808260201c1660208501528160801c16604084015260e01c910152565b67ffffffffffffffff8111611c335760051b60200190565b15611ce657565b60405162461bcd60e51b81526020600482015260076024820152661cdd1bdc1c195960ca1b6044820152606490fd5b15611d1c57565b60405162461bcd60e51b81526020600482015260096024820152686d6967726174696e6760b81b6044820152606490fd5b15611d5457565b60405162461bcd60e51b815260206004820152600b60248201526a1e995c9bc8185b5bdd5b9d60aa1b6044820152606490fd5b15611d8e57565b60405162461bcd60e51b815260206004820152600d60248201526c636c69666620746f6f2062696760981b6044820152606490fd5b15611dca57565b60405162461bcd60e51b815260206004820152600e60248201526d706572696f6420746f6f2062696760901b6044820152606490fd5b6000198114610a645760010190565b9060016001600160601b0380931601918211610a6457565b9190916001600160601b0380809416911601918211610a6457565b9081602091031261039d5751801515810361039d5790565b15611e6157565b60405162461bcd60e51b815260206004820152600f60248201526e1d1c985b9cd9995c8819985a5b1959608a1b6044820152606490fd5b6001600160601b039081166000190191908211610a6457565b6001600160601b039182169082160391908211610a6457565b60018060a01b031680600052606c6020526001600160601b03600860406000200154169060ff6067541615611efd575090565b90611f2c611f329263ffffffff431690611f1682612b1f565b90600052606c6020526004604060002001613988565b90611eb1565b90565b6001600160601b038060705460201c16158015611f6e575b611f6857611f6463ffffffff431661106281612b1f565b1690565b50600090565b5060ff60675416611f4d565b60018060a01b031680600052606c6020526001600160601b03908160036040600020015460201c16158015611fdd575b611fd657611f649063ffffffff431690611fc382612b1f565b90600052606c6020526040600020613988565b5050600090565b5060ff60675416611faa565b8051821015611ffd5760209160051b010190565b634e487b7160e01b600052603260045260246000fd5b606780549192916001600160a01b039060089080821c8316156123495761203f63ffffffff4316612b1f565b60005b87518110156122de578161205f612059838b611fe9565b51612b53565b612069838b611fe9565b51600052606b602052858a6121758461216f878c600160406000200154169461209384878a6128dc565b8d88166000528d606c8060205260056040600020016120b28585611fe9565b516000526020526120c66040600020611c87565b98828b16600052816020526121036120f260046040600020019d8e6120eb8989611fe9565b51906132b7565b50509c8863ffffffff431691613cdc565b828b16600052816020526001600160601b03916121298d84846040600020015416611eb1565b938c1660005260205260406000200191166001600160601b03198254161790558560005261216a60406000206106d6866121638686611fe9565b51836132b7565b611fe9565b51612ffa565b50505061218863ffffffff431687613c6e565b612192858d611fe9565b519289888a1c163b1561039d5789906040519463ef2c967160e01b865260048601526121f5602494858701906060908163ffffffff918281511685526001600160601b038060208301511660208701526040820151166040860152015116910152565b1660a484015260c483015260008260e481838c8b8d1c165af1801561095c576122ad575b5050606554875460405163a9059cbb60e01b815290871c88166001600160a01b031660048201526001600160601b039290921660248301529091906020908390881681600081604481015b03925af191821561095c57612289926122849160009161228e5750611e5a565b611e00565b612042565b6122a7915060203d602011610955576109478183611c65565b3861091f565b67ffffffffffffffff82116122ca57506040526020612264612219565b634e487b7160e01b60009081526041600452fd5b5050505050509060405160208082018183528351809152816040840194019160005b8281106123355750505050807f9302ff85f986fa03af144f0430ecea91ded0b24af1655f46bde13c1d3c13b76b9133930390a2565b835186529481019492810192600101612300565b505050509050565b1561235857565b60405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b6064820152608490fd5b9194939092946001600160601b03811663ffffffff871611612897576001600160601b03956123e18686866128dc565b6123ec83828461299b565b604051989182906123fc8b611c17565b63ffffffff8a168b521660208a01521680604089015263ffffffff841660608901526066549015612841576001600160601b036040890151166001600160601b0360208a015116106127e95780600052606e6020526001600160601b0360406000205460201c1661279857600052606e60205261247d876040600020612f57565b61248d63ffffffff885116613619565b607054600160201b600160801b036124be6001600160601b0360208b0151166001600160601b038460201c16611e27565b60201b1690600160201b600160801b031916176070556125ec876124e863ffffffff825116612923565b63ffffffff6125126001600160601b036020850151166001600160601b036040860151169061296d565b169063ffffffff6060840151168015600014612756575063ffffffff6125726001600160601b03604061257995966070548360801b61255b858585015116868460801c16611e27565b60801b16908460801b191617607055015116613c1d565b9116613e60565b63ffffffff6125b26125a86125a38c6001600160601b036040816020840151169201511690612fb8565b613c1d565b92828c5116612bcf565b6125e68b836125df866125da6001600160601b0360406125d189612923565b96015116613c1d565b612fd0565b9116613eea565b16613eea565b63ffffffff875116607054906001600160601b036040519261260d84611c17565b63ffffffff8c168452818160201c16602085015260801c1660408301526060820152606f54600160401b811015611c335780600161264e9201606f556138a9565b9190916127405761265e91612f57565b6001600160a01b039485166000818152606c602052604090206066549198612687928b92612c60565b63ffffffff1661269682611e98565b906126a09161296d565b6126a990611e0f565b90604051956126b787611c17565b63ffffffff1686526001600160601b031660208601526001600160601b0316604085015263ffffffff166060840152169283600052606c60205260406000206004019160665461270693612c60565b606654600052606b60205260406000206001600160601b0360a01b9283825416179055606654600052604060002060010191825416179055565b634e487b7160e01b600052600060045260246000fd5b9263ffffffff6125726001600160601b0360406127796127939861278297612bcf565b94015116613c1d565b63ffffffff60608b01511690612bcf565b612579565b60405162461bcd60e51b815260206004820152602360248201527f4c696e65207769746820676976656e20696420697320616c72656164792065786044820152621a5cdd60ea1b6064820152608490fd5b60405162461bcd60e51b815260206004820152602a60248201527f536c6f7065203e20626961732c20756e61636365707461626c652076616c756560448201526920666f7220736c6f706560b01b6064820152608490fd5b60405162461bcd60e51b815260206004820152602860248201527f536c6f7065203d3d20302c20756e61636365707461626c652076616c756520666044820152676f7220736c6f706560c01b6064820152608490fd5b60405162461bcd60e51b815260206004820152601760248201527f57726f6e672076616c756520736c6f7065506572696f640000000000000000006044820152606490fd5b9061292192916128eb83613619565b60018060a01b03809216600052606c60205261290b83604060002061376a565b16600052606c602052600460406000200161376a565b565b63ffffffff9081166000190191908211610a6457565b63ffffffff9182169082160391908211610a6457565b9190916001600160601b0380809416911602918216918203610a6457565b906001600160601b0380911691821561298557160490565b634e487b7160e01b600052601260045260246000fd5b60685493929163ffffffff908184168611612acf576069549180821696838810612a7f57816129d2816304c4b40093168098612939565b16026001600160601b0395868216918203610a645760670390828211610a6457612a1283612a098193826302625a0096169061296d565b96168095612939565b160291858316928303610a645760680392818411610a6457612a408693612a46936301312d0096169061296d565b90611e27565b160190828211610a6457908216908216818102918115918304141715610a6457611f32916305f5e1006105e9920416936105e485611e98565b60405162461bcd60e51b815260206004820152602260248201527f736c6f706520706572696f64203c206d696e696d616c206c6f636b20706572696044820152611bd960f21b6064820152608490fd5b60405162461bcd60e51b815260206004820152602260248201527f636c69666620706572696f64203c206d696e696d616c206c6f636b20706572696044820152611bd960f21b6064820152608490fd5b63ffffffff80911662015f6c8110611fd65762015f6b1901818111610a64576201d88082611f3293606a5416921604612939565b6000908152606b60205260409020546001600160a01b031690338203612b7557565b60405162461bcd60e51b815260206004820152601760248201527f63616c6c6572206e6f742061206c6f636b206f776e65720000000000000000006044820152606490fd5b90600163ffffffff80931601918211610a6457565b91909163ffffffff80809416911601918211610a6457565b15612bee57565b60405162461bcd60e51b8152602060048201526013602482015272189b1bd8dac81b9bdd081e595d081b5a5b9959606a1b6044820152606490fd5b60405162461bcd60e51b815260206004820152600f60248201526e1b9bdd081a5b5c1b195b595b9d1959608a1b6044820152606490fd5b9093929193604094858101916001600160601b038084511615612ea9578084511693602092838501958387511610612e5257600187019080600052818552838b60002054861c16612e0257612dbe9492612ccf876129219c9d612d9d9795612db7956000528752600020612f57565b88612daf888563ffffffff9b8c988995612cec878651168261376a565b612d0d612d078560038401948554901c168686511690611e27565b83612efe565b8688612d1b82885116612923565b93606083612d30898951168a8651169061296d565b169801838151168015600014612dc6575050938693612d919693612d7d86612d8595612d768a612d706125da9e6125a39d5460801c168585511690611e27565b90612f24565b5116613c1d565b921690613ea6565b51168988511690612fb8565b988992858d5116612bcf565b96612da788612923565b955116613c1d565b911689613f06565b1685613f06565b511690613cdc565b849250612d919799938996612dfc96612d7d6125da9c612dec612df4966125a39d612bcf565b945116613c1d565b511690612bcf565b94612d85565b8a5162461bcd60e51b815260048101869052602360248201527f4c696e65207769746820676976656e20696420697320616c72656164792065786044820152621a5cdd60ea1b6064820152608490fd5b895162461bcd60e51b815260048101859052602a60248201527f536c6f7065203e20626961732c20756e61636365707461626c652076616c756560448201526920666f7220736c6f706560b01b6064820152608490fd5b875162461bcd60e51b815260206004820152602860248201527f536c6f7065203d3d20302c20756e61636365707461626c652076616c756520666044820152676f7220736c6f706560c01b6064820152608490fd5b90600160201b600160801b0382549160201b1690600160201b600160801b031916179055565b80546bffffffffffffffffffffffff60801b191660809290921b6bffffffffffffffffffffffff60801b16919091179055565b9060609063ffffffff81511663ffffffff19845416178355612f966001600160601b03612f8a8160208501511686612efe565b60408301511684612f24565b015181546001600160e01b031660e09190911b6001600160e01b031916179055565b906001600160601b0380911691821561298557160690565b600b91820b910b03906b7fffffffffffffffffffffff19821260016001605f1b03831317610a6457565b9190600091838352602092606e845261301560408220611c87565b848101916001600160601b0392838151161561327257839061303687613619565b5116968360408401511696829163ffffffff6130628b8261305b8d828b51169361296d565b1690612bcf565b98613075606088019a838c511690612bcf565b828116958383169b878d1161325d57908e6130c48f969594936130bf9087806130b36125a36130a38a612923565b9c6130ad8c612923565b98612fb8565b9f511691511690612bcf565b612923565b8581169e9093908f81116131685750505050906130e091612939565b6130e990612bba565b996130f38c613c1d565b6130fc91613eea565b866131068c613c1d565b9061311091612fd0565b91169061311c91613e60565b61312a604095606e94613e60565b600160201b600160801b036131468b6070549889861c16611eb1565b831b16600160201b600160801b03198097161760705583525220908154169055565b929e5093925094849f5084168091111560001461320d57908d9392916070548c866001600160601b0360801b918360801c16906131a491611eb1565b60801b16906001600160601b0360801b1916176070558a6131c486613c1d565b906131ce91612fd0565b6131d791613e60565b6131e091612939565b16906131eb9161294f565b8688166131f791611e27565b9a6132018b613c1d565b91169061311c91613eea565b50506070548989169c5091506bffffffffffffffffffffffff60801b905061323b8c608084901c8b16611eb1565b60801b16906001600160601b0360801b191617607055899a8a61320190613c1d565b50505050505050509450505092505080918190565b60405162461bcd60e51b815260048101889052601f60248201527f52656d6f76696e67204c696e652c207768696368206e6f7420657869737473006044820152606490fd5b91909260018301926000858152846020526132d460408220611c87565b94602086016001600160601b0381511615613554576001600160601b03906132fc878661376a565b5116966001600160601b036040880151169683966133278a63ffffffff61305b8c828751169361296d565b9061333e606084019263ffffffff84511690612bcf565b9863ffffffff8a16928363ffffffff841611613541578b92916133916130bf8f9363ffffffff8f6133856125a36133758493612923565b9a61337f8b612923565b99612fb8565b9a511691511690612bcf565b9b63ffffffff808e1690851611613447575050506133af908a612939565b6133b890612bba565b986133c28b613c1d565b6133d29163ffffffff1689613f06565b826133dc8b613c1d565b906133e691612fd0565b6133f69163ffffffff1688613ea6565b60409561340a613428936003935b83613ea6565b016134228a6001600160601b03835460201c16611eb1565b90612efe565b82526020522080546fffffffffffffffffffffffff0000000019169055565b919d509a509163ffffffff90811690821681106134fe57908b929160038a0184815460801c6001600160601b03169061347f91611eb1565b61348891612f24565b8561349285613c1d565b9061349c91612fd0565b6134a6918b613ea6565b6134af91612939565b63ffffffff16906134bf9161294f565b826001600160601b03166134d291611e27565b996134dc8a613c1d565b6134ec9163ffffffff1688613f06565b60409561340a61342893600393613404565b50505097506003850197885460801c6001600160601b031698826001600160601b0316998a61352c91611eb1565b61353591612f24565b8899896134dc90613c1d565b5050505050505093505092505080918190565b60405162461bcd60e51b815260206004820152601f60248201527f52656d6f76696e67204c696e652c207768696368206e6f7420657869737473006044820152606490fd5b90600b0b90600b0b019060016001605f1b0319821260016001605f1b03831317610a6457565b156135c657565b60405162461bcd60e51b815260206004820152602560248201527f736c6f7065203c20302c20736f6d657468696e672077726f6e67207769746820604482015264736c6f706560d81b6064820152608490fd5b6070549063ffffffff808084169216808314613764576001600160601b0392838560801c16906020948087871c169485613684575b50505090600160201b600160801b0392916001600160601b0360801b9060801b169463ffffffff60e01b1617921b161717607055565b8285999398929694991115613711579697925b87891690858210156136f457906136e56136bd6136b7876136ed95611eb1565b96613c1d565b916000908152606d8a526136db604082205493600b94850b90613599565b80930b12156135bf565b861698612bba565b9792613697565b929850909650909350600160201b600160801b039050388061364e565b60405162461bcd60e51b815260048101889052602560248201527f63616e2774207570646174652042726f6b656e4c696e6520666f7220706173746044820152642074696d6560d81b6064820152608490fd5b50505050565b600381018054939263ffffffff9081168186168181146138a0576001600160601b0394858860801c1695602091818a841c1695866137c7575b5050505050906137c291612921959663ffffffff191617835582612efe565b612f24565b84869297959a949996989398111561384d579894935b898616908282101561382f57906138206138036137fd8861382895611eb1565b97613c1d565b916000908152898c526136db604082205493600b94850b90613599565b881695612bba565b94936137dd565b93995093975090955090935091508190506129216137c238806137a3565b60405162461bcd60e51b8152600481018a9052602560248201527f63616e2774207570646174652042726f6b656e4c696e6520666f7220706173746044820152642074696d6560d81b6064820152608490fd5b50505050509050565b606f54811015611ffd57606f6000527f39f2babe526038520877fc7c33d81accf578af4a06c5fa6b0d038cae36e127110190600090565b8054821015611ffd5760005260206000200190600090565b9060705463ffffffff808216908085169081831461394257508110613922575050611f3291613b23565b909150611f32926001600160601b03808460801c169360201c1691613a21565b915050606f939193546000198101908111610a645761396182916138a9565b505416908316111561397e57505060201c6001600160601b031690565b611f329250613b23565b919060038301549263ffffffff9384811694808416908187146139d7575085106139b75750611f329350613bad565b925090611f32936001600160601b03808560801c169460201c1692613aa4565b91955050600282018054906000198201918211610a645782916139f9916138e0565b5054169084161115613a175750505060201c6001600160601b031690565b611f329350613bad565b90919392936001600160601b039182821615613a9d5794905b63ffffffff90818716918516821015613a955790613a86613a67613a6185613a8e95611eb1565b94613c1d565b916000908152606d6020526136db604082205493600b94850b90613599565b831695612bba565b9490613a3a565b955050505050565b5093505050565b9294939091946001600160601b039283821615613b1b5791905b63ffffffff90818416918816821015613b125790613b03613ae5613a6185613b0b95611eb1565b916000908152876020526136db604082205493600b94850b90613599565b841692612bba565b9190613abe565b96505050505050565b509450505050565b90606f54613b3081611cc7565b90613b3e6040519283611c65565b808252606f600090815260207f39f2babe526038520877fc7c33d81accf578af4a06c5fa6b0d038cae36e127118185015b848410613b91575050505050611f329291613b8991613d3f565b929092613a21565b6001838192613b9f85611c87565b815201920193019290613b6f565b929192600281018054613bbf81611cc7565b91613bcd6040519384611c65565b818352600090815260208082208185015b848410613c01575050505050611f329394613bf891613d3f565b90939192613aa4565b6001838192613c0f85611c87565b815201920193019290613bde565b6001600160601b03166001605f1b811015613c3857600b0b90565b60405162461bcd60e51b815260206004820152600e60248201526d34b73a1031b0b9ba1032b93937b960911b6044820152606490fd5b906070549160405192613c8084611c17565b63ffffffff80931684526001600160601b0390818160201c16602086015260801c166040840152166060820152606f54600160401b811015611c3357806001613ccc9201606f556138a9565b9190916127405761292191612f57565b90916003600283019201549260405193613cf585611c17565b63ffffffff80931685526001600160601b0390818160201c16602087015260801c1660408501521660608301528054600160401b811015611c3357613ccc916001820181556138e0565b9182519182158015613e46575b613e3a5760009260001990818101908111613e26579084925b60808410613db7575b5050505063ffffffff6060613dad6001600160601b0394856020613d92838a611fe9565b51015116956040613da3838a611fe9565b5101511696611fe9565b5101511691929190565b9091929483811015613e2057838101808211610a64576001808201809211610a64571c9063ffffffff80613deb848b611fe9565b51511690841610613e095750613e019095611e00565b929190613d65565b959350828101908111610a6457613e019093611e00565b94613d6e565b634e487b7160e01b85526011600452602485fd5b50600092508291508190565b611ffd5763ffffffff806020860151511690821610613d4c565b90613e7c9082600052606d602052604060002054600b0b613599565b90600052606d6020526040600020906001600160601b0319825416906001600160601b0316179055565b9091613ec2908360005282602052604060002054600b0b613599565b916000526020526040600020906001600160601b0319825416906001600160601b0316179055565b90613e7c9082600052606d602052604060002054600b0b612fd0565b9091613ec2908360005282602052604060002054600b0b612fd0565b6033546001600160a01b03163303613f3657565b606460405162461bcd60e51b815260206004820152602060248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152fd5b603380546001600160a01b039283166001600160a01b0319821681179092559091167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0600080a356fea264697066735822122041cbebc7789e370d64e6da92130a1eecc60dd59cd6c30a70bd73aa58b09191dc64736f6c63430008120033a2646970667358221220bdfbc2da09387adc1e67a625c983b428bc96a83685548f2c0b3f8af1fcdc826064736f6c63430008120033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "deploy()": {
        "returns": {
          "_0": "The address of the new Locking contract"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "deploy()": {
        "notice": "Deploys a new Locking contract"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}
