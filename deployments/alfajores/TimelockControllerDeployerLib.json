{
  "address": "0xD505804c8c719A21d0dD98B18d39283c8D973b69",
  "abi": [],
  "transactionHash": "0xf77096edb074256721f217511a756b4ee56f54d1f7b0498d95abf006238e581b",
  "receipt": {
    "to": null,
    "from": "0x56fD3F2bEE130e9867942D0F463a16fBE49B8d81",
    "contractAddress": "0xD505804c8c719A21d0dD98B18d39283c8D973b69",
    "transactionIndex": 0,
    "gasUsed": "2148916",
    "logsBloom": "0x
    "blockHash": "0x1f0a4080bef404712c73c681022904254f2bfa8a871c40be287e053affcc30d1",
    "transactionHash": "0xf77096edb074256721f217511a756b4ee56f54d1f7b0498d95abf006238e581b",
    "logs": [],
    "blockNumber": 21936731,
    "cumulativeGasUsed": "2148916",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 4,
  "solcInputHash": "7e83205a170b12fd7688a59ae658f360",
  "metadata": "{\"compiler\":{\"version\":\"0.8.18+commit.87f61d96\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"deploy()\":{\"returns\":{\"_0\":\"The address of the new TimelockController contract\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"deploy()\":{\"notice\":\"Deploys a new TimelockController contract\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"lib/mento-core-gov/contracts/governance/deployers/TimelockControllerDeployerLib.sol\":\"TimelockControllerDeployerLib\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"lib/mento-core-gov/contracts/governance/TimelockController.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity 0.8.18;\\n\\n// solhint-disable-next-line max-line-length\\nimport { TimelockControllerUpgradeable } from \\\"openzeppelin-contracts-upgradeable/contracts/governance/TimelockControllerUpgradeable.sol\\\";\\n\\n/**\\n * @title TimelockController\\n * @author Mento Labs\\n * @notice A contract that manages the timelock functionality.\\n * @dev Ownable contracts should be owned by TimelockController.\\n */\\ncontract TimelockController is TimelockControllerUpgradeable {\\n  /**\\n   * @notice Initializes the TimelockController with the provided parameters.\\n   * @param minDelay The minimum delay before a proposal can be executed.\\n   * @param proposers List of addresses that are allowed to queue and cancel operations.\\n   * @param executors List of addresses that are allowed to execute proposals. 0 can be used to allow any account.\\n   * @param admin The admin address that will be used to set the proposer role and then will be renounced.\\n   * @param canceller An additional canceller address with the rights to cancel awaiting proposals.\\n   */\\n  // solhint-disable-next-line func-name-mixedcase\\n  function __MentoTimelockController_init(\\n    uint256 minDelay,\\n    address[] memory proposers,\\n    address[] memory executors,\\n    address admin,\\n    address canceller\\n  ) external initializer {\\n    __TimelockController_init(minDelay, proposers, executors, admin);\\n    _setupRole(CANCELLER_ROLE, canceller);\\n  }\\n}\\n\",\"keccak256\":\"0x0747e0ad2bf7956399a9858fe34e8d8d227c0f4416adb4427db37ba6942409be\",\"license\":\"GPL-3.0-or-later\"},\"lib/mento-core-gov/contracts/governance/deployers/TimelockControllerDeployerLib.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity 0.8.18;\\n// solhint-disable max-line-length\\n\\nimport { TimelockController } from \\\"../TimelockController.sol\\\";\\n\\nlibrary TimelockControllerDeployerLib {\\n  /**\\n   * @notice Deploys a new TimelockController contract\\n   * @return The address of the new TimelockController contract\\n   */\\n  function deploy() external returns (TimelockController) {\\n    return new TimelockController();\\n  }\\n}\\n\",\"keccak256\":\"0x35aa6c89894c49f2ac5722c4911943e94101cf60df94dcb79444bae17160c25f\",\"license\":\"GPL-3.0-or-later\"},\"openzeppelin-contracts-upgradeable/contracts/access/AccessControlUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (access/AccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControlUpgradeable.sol\\\";\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../utils/StringsUpgradeable.sol\\\";\\nimport \\\"../utils/introspection/ERC165Upgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControlUpgradeable is Initializable, ContextUpgradeable, IAccessControlUpgradeable, ERC165Upgradeable {\\n    function __AccessControl_init() internal onlyInitializing {\\n    }\\n\\n    function __AccessControl_init_unchained() internal onlyInitializing {\\n    }\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role);\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControlUpgradeable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `_msgSender()` is missing `role`.\\n     * Overriding this function changes the behavior of the {onlyRole} modifier.\\n     *\\n     * Format of the revert message is described in {_checkRole}.\\n     *\\n     * _Available since v4.6._\\n     */\\n    function _checkRole(bytes32 role) internal view virtual {\\n        _checkRole(role, _msgSender());\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        StringsUpgradeable.toHexString(account),\\n                        \\\" is missing role \\\",\\n                        StringsUpgradeable.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * May emit a {RoleGranted} event.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     *\\n     * NOTE: This function is deprecated in favor of {_grantRole}.\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0xe8f27a3e3e25067334e76799f03d4de6d8f8535c3fc4806468228a9ebd5de51a\",\"license\":\"MIT\"},\"openzeppelin-contracts-upgradeable/contracts/access/IAccessControlUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControlUpgradeable {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0xb8f5302f12138c5561362e88a78d061573e6298b7a1a5afe84a1e2c8d4d5aeaa\",\"license\":\"MIT\"},\"openzeppelin-contracts-upgradeable/contracts/governance/TimelockControllerUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.2) (governance/TimelockController.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../access/AccessControlUpgradeable.sol\\\";\\nimport \\\"../token/ERC721/IERC721ReceiverUpgradeable.sol\\\";\\nimport \\\"../token/ERC1155/IERC1155ReceiverUpgradeable.sol\\\";\\nimport \\\"../utils/AddressUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which acts as a timelocked controller. When set as the\\n * owner of an `Ownable` smart contract, it enforces a timelock on all\\n * `onlyOwner` maintenance operations. This gives time for users of the\\n * controlled contract to exit before a potentially dangerous maintenance\\n * operation is applied.\\n *\\n * By default, this contract is self administered, meaning administration tasks\\n * have to go through the timelock process. The proposer (resp executor) role\\n * is in charge of proposing (resp executing) operations. A common use case is\\n * to position this {TimelockController} as the owner of a smart contract, with\\n * a multisig or a DAO as the sole proposer.\\n *\\n * _Available since v3.3._\\n */\\ncontract TimelockControllerUpgradeable is Initializable, AccessControlUpgradeable, IERC721ReceiverUpgradeable, IERC1155ReceiverUpgradeable {\\n    bytes32 public constant TIMELOCK_ADMIN_ROLE = keccak256(\\\"TIMELOCK_ADMIN_ROLE\\\");\\n    bytes32 public constant PROPOSER_ROLE = keccak256(\\\"PROPOSER_ROLE\\\");\\n    bytes32 public constant EXECUTOR_ROLE = keccak256(\\\"EXECUTOR_ROLE\\\");\\n    bytes32 public constant CANCELLER_ROLE = keccak256(\\\"CANCELLER_ROLE\\\");\\n    uint256 internal constant _DONE_TIMESTAMP = uint256(1);\\n\\n    mapping(bytes32 => uint256) private _timestamps;\\n    uint256 private _minDelay;\\n\\n    /**\\n     * @dev Emitted when a call is scheduled as part of operation `id`.\\n     */\\n    event CallScheduled(\\n        bytes32 indexed id,\\n        uint256 indexed index,\\n        address target,\\n        uint256 value,\\n        bytes data,\\n        bytes32 predecessor,\\n        uint256 delay\\n    );\\n\\n    /**\\n     * @dev Emitted when a call is performed as part of operation `id`.\\n     */\\n    event CallExecuted(bytes32 indexed id, uint256 indexed index, address target, uint256 value, bytes data);\\n\\n    /**\\n     * @dev Emitted when operation `id` is cancelled.\\n     */\\n    event Cancelled(bytes32 indexed id);\\n\\n    /**\\n     * @dev Emitted when the minimum delay for future operations is modified.\\n     */\\n    event MinDelayChange(uint256 oldDuration, uint256 newDuration);\\n\\n    /**\\n     * @dev Initializes the contract with the following parameters:\\n     *\\n     * - `minDelay`: initial minimum delay for operations\\n     * - `proposers`: accounts to be granted proposer and canceller roles\\n     * - `executors`: accounts to be granted executor role\\n     * - `admin`: optional account to be granted admin role; disable with zero address\\n     *\\n     * IMPORTANT: The optional admin can aid with initial configuration of roles after deployment\\n     * without being subject to delay, but this role should be subsequently renounced in favor of\\n     * administration through timelocked proposals. Previous versions of this contract would assign\\n     * this admin to the deployer automatically and should be renounced as well.\\n     */\\n    function __TimelockController_init(\\n        uint256 minDelay,\\n        address[] memory proposers,\\n        address[] memory executors,\\n        address admin\\n    ) internal onlyInitializing {\\n        __TimelockController_init_unchained(minDelay, proposers, executors, admin);\\n    }\\n\\n    function __TimelockController_init_unchained(\\n        uint256 minDelay,\\n        address[] memory proposers,\\n        address[] memory executors,\\n        address admin\\n    ) internal onlyInitializing {\\n        _setRoleAdmin(TIMELOCK_ADMIN_ROLE, TIMELOCK_ADMIN_ROLE);\\n        _setRoleAdmin(PROPOSER_ROLE, TIMELOCK_ADMIN_ROLE);\\n        _setRoleAdmin(EXECUTOR_ROLE, TIMELOCK_ADMIN_ROLE);\\n        _setRoleAdmin(CANCELLER_ROLE, TIMELOCK_ADMIN_ROLE);\\n\\n        // self administration\\n        _setupRole(TIMELOCK_ADMIN_ROLE, address(this));\\n\\n        // optional admin\\n        if (admin != address(0)) {\\n            _setupRole(TIMELOCK_ADMIN_ROLE, admin);\\n        }\\n\\n        // register proposers and cancellers\\n        for (uint256 i = 0; i < proposers.length; ++i) {\\n            _setupRole(PROPOSER_ROLE, proposers[i]);\\n            _setupRole(CANCELLER_ROLE, proposers[i]);\\n        }\\n\\n        // register executors\\n        for (uint256 i = 0; i < executors.length; ++i) {\\n            _setupRole(EXECUTOR_ROLE, executors[i]);\\n        }\\n\\n        _minDelay = minDelay;\\n        emit MinDelayChange(0, minDelay);\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only by a certain role. In\\n     * addition to checking the sender's role, `address(0)` 's role is also\\n     * considered. Granting a role to `address(0)` is equivalent to enabling\\n     * this role for everyone.\\n     */\\n    modifier onlyRoleOrOpenRole(bytes32 role) {\\n        if (!hasRole(role, address(0))) {\\n            _checkRole(role, _msgSender());\\n        }\\n        _;\\n    }\\n\\n    /**\\n     * @dev Contract might receive/hold ETH as part of the maintenance process.\\n     */\\n    receive() external payable {}\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(IERC165Upgradeable, AccessControlUpgradeable) returns (bool) {\\n        return interfaceId == type(IERC1155ReceiverUpgradeable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns whether an id correspond to a registered operation. This\\n     * includes both Pending, Ready and Done operations.\\n     */\\n    function isOperation(bytes32 id) public view virtual returns (bool registered) {\\n        return getTimestamp(id) > 0;\\n    }\\n\\n    /**\\n     * @dev Returns whether an operation is pending or not.\\n     */\\n    function isOperationPending(bytes32 id) public view virtual returns (bool pending) {\\n        return getTimestamp(id) > _DONE_TIMESTAMP;\\n    }\\n\\n    /**\\n     * @dev Returns whether an operation is ready or not.\\n     */\\n    function isOperationReady(bytes32 id) public view virtual returns (bool ready) {\\n        uint256 timestamp = getTimestamp(id);\\n        return timestamp > _DONE_TIMESTAMP && timestamp <= block.timestamp;\\n    }\\n\\n    /**\\n     * @dev Returns whether an operation is done or not.\\n     */\\n    function isOperationDone(bytes32 id) public view virtual returns (bool done) {\\n        return getTimestamp(id) == _DONE_TIMESTAMP;\\n    }\\n\\n    /**\\n     * @dev Returns the timestamp at with an operation becomes ready (0 for\\n     * unset operations, 1 for done operations).\\n     */\\n    function getTimestamp(bytes32 id) public view virtual returns (uint256 timestamp) {\\n        return _timestamps[id];\\n    }\\n\\n    /**\\n     * @dev Returns the minimum delay for an operation to become valid.\\n     *\\n     * This value can be changed by executing an operation that calls `updateDelay`.\\n     */\\n    function getMinDelay() public view virtual returns (uint256 duration) {\\n        return _minDelay;\\n    }\\n\\n    /**\\n     * @dev Returns the identifier of an operation containing a single\\n     * transaction.\\n     */\\n    function hashOperation(\\n        address target,\\n        uint256 value,\\n        bytes calldata data,\\n        bytes32 predecessor,\\n        bytes32 salt\\n    ) public pure virtual returns (bytes32 hash) {\\n        return keccak256(abi.encode(target, value, data, predecessor, salt));\\n    }\\n\\n    /**\\n     * @dev Returns the identifier of an operation containing a batch of\\n     * transactions.\\n     */\\n    function hashOperationBatch(\\n        address[] calldata targets,\\n        uint256[] calldata values,\\n        bytes[] calldata payloads,\\n        bytes32 predecessor,\\n        bytes32 salt\\n    ) public pure virtual returns (bytes32 hash) {\\n        return keccak256(abi.encode(targets, values, payloads, predecessor, salt));\\n    }\\n\\n    /**\\n     * @dev Schedule an operation containing a single transaction.\\n     *\\n     * Emits a {CallScheduled} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have the 'proposer' role.\\n     */\\n    function schedule(\\n        address target,\\n        uint256 value,\\n        bytes calldata data,\\n        bytes32 predecessor,\\n        bytes32 salt,\\n        uint256 delay\\n    ) public virtual onlyRole(PROPOSER_ROLE) {\\n        bytes32 id = hashOperation(target, value, data, predecessor, salt);\\n        _schedule(id, delay);\\n        emit CallScheduled(id, 0, target, value, data, predecessor, delay);\\n    }\\n\\n    /**\\n     * @dev Schedule an operation containing a batch of transactions.\\n     *\\n     * Emits one {CallScheduled} event per transaction in the batch.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have the 'proposer' role.\\n     */\\n    function scheduleBatch(\\n        address[] calldata targets,\\n        uint256[] calldata values,\\n        bytes[] calldata payloads,\\n        bytes32 predecessor,\\n        bytes32 salt,\\n        uint256 delay\\n    ) public virtual onlyRole(PROPOSER_ROLE) {\\n        require(targets.length == values.length, \\\"TimelockController: length mismatch\\\");\\n        require(targets.length == payloads.length, \\\"TimelockController: length mismatch\\\");\\n\\n        bytes32 id = hashOperationBatch(targets, values, payloads, predecessor, salt);\\n        _schedule(id, delay);\\n        for (uint256 i = 0; i < targets.length; ++i) {\\n            emit CallScheduled(id, i, targets[i], values[i], payloads[i], predecessor, delay);\\n        }\\n    }\\n\\n    /**\\n     * @dev Schedule an operation that is to becomes valid after a given delay.\\n     */\\n    function _schedule(bytes32 id, uint256 delay) private {\\n        require(!isOperation(id), \\\"TimelockController: operation already scheduled\\\");\\n        require(delay >= getMinDelay(), \\\"TimelockController: insufficient delay\\\");\\n        _timestamps[id] = block.timestamp + delay;\\n    }\\n\\n    /**\\n     * @dev Cancel an operation.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have the 'canceller' role.\\n     */\\n    function cancel(bytes32 id) public virtual onlyRole(CANCELLER_ROLE) {\\n        require(isOperationPending(id), \\\"TimelockController: operation cannot be cancelled\\\");\\n        delete _timestamps[id];\\n\\n        emit Cancelled(id);\\n    }\\n\\n    /**\\n     * @dev Execute an (ready) operation containing a single transaction.\\n     *\\n     * Emits a {CallExecuted} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have the 'executor' role.\\n     */\\n    // This function can reenter, but it doesn't pose a risk because _afterCall checks that the proposal is pending,\\n    // thus any modifications to the operation during reentrancy should be caught.\\n    // slither-disable-next-line reentrancy-eth\\n    function execute(\\n        address target,\\n        uint256 value,\\n        bytes calldata payload,\\n        bytes32 predecessor,\\n        bytes32 salt\\n    ) public payable virtual onlyRoleOrOpenRole(EXECUTOR_ROLE) {\\n        bytes32 id = hashOperation(target, value, payload, predecessor, salt);\\n\\n        _beforeCall(id, predecessor);\\n        _execute(target, value, payload);\\n        emit CallExecuted(id, 0, target, value, payload);\\n        _afterCall(id);\\n    }\\n\\n    /**\\n     * @dev Execute an (ready) operation containing a batch of transactions.\\n     *\\n     * Emits one {CallExecuted} event per transaction in the batch.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have the 'executor' role.\\n     */\\n    // This function can reenter, but it doesn't pose a risk because _afterCall checks that the proposal is pending,\\n    // thus any modifications to the operation during reentrancy should be caught.\\n    // slither-disable-next-line reentrancy-eth\\n    function executeBatch(\\n        address[] calldata targets,\\n        uint256[] calldata values,\\n        bytes[] calldata payloads,\\n        bytes32 predecessor,\\n        bytes32 salt\\n    ) public payable virtual onlyRoleOrOpenRole(EXECUTOR_ROLE) {\\n        require(targets.length == values.length, \\\"TimelockController: length mismatch\\\");\\n        require(targets.length == payloads.length, \\\"TimelockController: length mismatch\\\");\\n\\n        bytes32 id = hashOperationBatch(targets, values, payloads, predecessor, salt);\\n\\n        _beforeCall(id, predecessor);\\n        for (uint256 i = 0; i < targets.length; ++i) {\\n            address target = targets[i];\\n            uint256 value = values[i];\\n            bytes calldata payload = payloads[i];\\n            _execute(target, value, payload);\\n            emit CallExecuted(id, i, target, value, payload);\\n        }\\n        _afterCall(id);\\n    }\\n\\n    /**\\n     * @dev Execute an operation's call.\\n     */\\n    function _execute(\\n        address target,\\n        uint256 value,\\n        bytes calldata data\\n    ) internal virtual {\\n        (bool success, ) = target.call{value: value}(data);\\n        require(success, \\\"TimelockController: underlying transaction reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Checks before execution of an operation's calls.\\n     */\\n    function _beforeCall(bytes32 id, bytes32 predecessor) private view {\\n        require(isOperationReady(id), \\\"TimelockController: operation is not ready\\\");\\n        require(predecessor == bytes32(0) || isOperationDone(predecessor), \\\"TimelockController: missing dependency\\\");\\n    }\\n\\n    /**\\n     * @dev Checks after execution of an operation's calls.\\n     */\\n    function _afterCall(bytes32 id) private {\\n        require(isOperationReady(id), \\\"TimelockController: operation is not ready\\\");\\n        _timestamps[id] = _DONE_TIMESTAMP;\\n    }\\n\\n    /**\\n     * @dev Changes the minimum timelock duration for future operations.\\n     *\\n     * Emits a {MinDelayChange} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be the timelock itself. This can only be achieved by scheduling and later executing\\n     * an operation where the timelock is the target and the data is the ABI-encoded call to this function.\\n     */\\n    function updateDelay(uint256 newDelay) external virtual {\\n        require(msg.sender == address(this), \\\"TimelockController: caller must be timelock\\\");\\n        emit MinDelayChange(_minDelay, newDelay);\\n        _minDelay = newDelay;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Receiver-onERC721Received}.\\n     */\\n    function onERC721Received(\\n        address,\\n        address,\\n        uint256,\\n        bytes memory\\n    ) public virtual override returns (bytes4) {\\n        return this.onERC721Received.selector;\\n    }\\n\\n    /**\\n     * @dev See {IERC1155Receiver-onERC1155Received}.\\n     */\\n    function onERC1155Received(\\n        address,\\n        address,\\n        uint256,\\n        uint256,\\n        bytes memory\\n    ) public virtual override returns (bytes4) {\\n        return this.onERC1155Received.selector;\\n    }\\n\\n    /**\\n     * @dev See {IERC1155Receiver-onERC1155BatchReceived}.\\n     */\\n    function onERC1155BatchReceived(\\n        address,\\n        address,\\n        uint256[] memory,\\n        uint256[] memory,\\n        bytes memory\\n    ) public virtual override returns (bytes4) {\\n        return this.onERC1155BatchReceived.selector;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[48] private __gap;\\n}\\n\",\"keccak256\":\"0x90aef154013190f8ebe5569323bd942b4eeeda4b55b09e795a9922d879490560\",\"license\":\"MIT\"},\"openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.1) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized < type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\",\"keccak256\":\"0x037c334add4b033ad3493038c25be1682d78c00992e1acb0e2795caff3925271\",\"license\":\"MIT\"},\"openzeppelin-contracts-upgradeable/contracts/token/ERC1155/IERC1155ReceiverUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC1155/IERC1155Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165Upgradeable.sol\\\";\\n\\n/**\\n * @dev _Available since v3.1._\\n */\\ninterface IERC1155ReceiverUpgradeable is IERC165Upgradeable {\\n    /**\\n     * @dev Handles the receipt of a single ERC1155 token type. This function is\\n     * called at the end of a `safeTransferFrom` after the balance has been updated.\\n     *\\n     * NOTE: To accept the transfer, this must return\\n     * `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))`\\n     * (i.e. 0xf23a6e61, or its own function selector).\\n     *\\n     * @param operator The address which initiated the transfer (i.e. msg.sender)\\n     * @param from The address which previously owned the token\\n     * @param id The ID of the token being transferred\\n     * @param value The amount of tokens being transferred\\n     * @param data Additional data with no specified format\\n     * @return `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))` if transfer is allowed\\n     */\\n    function onERC1155Received(\\n        address operator,\\n        address from,\\n        uint256 id,\\n        uint256 value,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n\\n    /**\\n     * @dev Handles the receipt of a multiple ERC1155 token types. This function\\n     * is called at the end of a `safeBatchTransferFrom` after the balances have\\n     * been updated.\\n     *\\n     * NOTE: To accept the transfer(s), this must return\\n     * `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))`\\n     * (i.e. 0xbc197c81, or its own function selector).\\n     *\\n     * @param operator The address which initiated the batch transfer (i.e. msg.sender)\\n     * @param from The address which previously owned the token\\n     * @param ids An array containing ids of each token being transferred (order and length must match values array)\\n     * @param values An array containing amounts of each token being transferred (order and length must match ids array)\\n     * @param data Additional data with no specified format\\n     * @return `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))` if transfer is allowed\\n     */\\n    function onERC1155BatchReceived(\\n        address operator,\\n        address from,\\n        uint256[] calldata ids,\\n        uint256[] calldata values,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xffcb29612efb57efc8f0d4897deb5abaeac830022c59a3aa17446d698dbc856b\",\"license\":\"MIT\"},\"openzeppelin-contracts-upgradeable/contracts/token/ERC721/IERC721ReceiverUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721ReceiverUpgradeable {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xbb2ed8106d94aeae6858e2551a1e7174df73994b77b13ebd120ccaaef80155f5\",\"license\":\"MIT\"},\"openzeppelin-contracts-upgradeable/contracts/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2edcb41c121abc510932e8d83ff8b82cf9cdde35e7c297622f5c29ef0af25183\",\"license\":\"MIT\"},\"openzeppelin-contracts-upgradeable/contracts/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x963ea7f0b48b032eef72fe3a7582edf78408d6f834115b9feadd673a4d5bd149\",\"license\":\"MIT\"},\"openzeppelin-contracts-upgradeable/contracts/utils/StringsUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/MathUpgradeable.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary StringsUpgradeable {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = MathUpgradeable.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, MathUpgradeable.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\",\"keccak256\":\"0x6b9a5d35b744b25529a2856a8093e7c03fb35a34b1c4fb5499e560f8ade140da\",\"license\":\"MIT\"},\"openzeppelin-contracts-upgradeable/contracts/utils/introspection/ERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165Upgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165Upgradeable is Initializable, IERC165Upgradeable {\\n    function __ERC165_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC165_init_unchained() internal onlyInitializing {\\n    }\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165Upgradeable).interfaceId;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x9a3b990bd56d139df3e454a9edf1c64668530b5a77fc32eb063bc206f958274a\",\"license\":\"MIT\"},\"openzeppelin-contracts-upgradeable/contracts/utils/introspection/IERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165Upgradeable {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xc6cef87559d0aeffdf0a99803de655938a7779ec0a3cd5d4383483ad85565a09\",\"license\":\"MIT\"},\"openzeppelin-contracts-upgradeable/contracts/utils/math/MathUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary MathUpgradeable {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1);\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator,\\n        Rounding rounding\\n    ) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10**64) {\\n                value /= 10**64;\\n                result += 64;\\n            }\\n            if (value >= 10**32) {\\n                value /= 10**32;\\n                result += 32;\\n            }\\n            if (value >= 10**16) {\\n                value /= 10**16;\\n                result += 16;\\n            }\\n            if (value >= 10**8) {\\n                value /= 10**8;\\n                result += 8;\\n            }\\n            if (value >= 10**4) {\\n                value /= 10**4;\\n                result += 4;\\n            }\\n            if (value >= 10**2) {\\n                value /= 10**2;\\n                result += 2;\\n            }\\n            if (value >= 10**1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10**result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result * 8) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xc1bd5b53319c68f84e3becd75694d941e8f4be94049903232cd8bc7c535aaa5a\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x6080806040523461001c576125e9908161002282393081602d0152f35b600080fdfe608080604052600436101561001357600080fd5b600090813560e01c63775c300c1461002a57600080fd5b307f0000000000000000000000000000000000000000000000000000000000000000146100be57816003193601126100be576124f18082019082821067ffffffffffffffff8311176100aa579082916100c38339039082f0801561009d576040516001600160a01b039091168152602090f35b50604051903d90823e3d90fd5b634e487b7160e01b84526041600452602484fd5b5080fdfe60808060405234610016576124d5908161001c8239f35b600080fdfe6080604052600436101561001b575b361561001957600080fd5b005b60003560e01c806301d5062a1461140b57806301ffc9a71461139b57806307bd0265146113725780630d3cf6fc14611349578063134008d3146112a657806313bc9f2014611288578063150b7a0214611233578063248a9ca3146112045780632ab0f529146111d75780632f2ff15d1461113457806331d507501461110857806336568abe14611076578063584b153e1461103f57806364d6235314610f94578063672f70c5146108c65780638065657f146108a75780638f2a0bb0146107865780638f61f4f51461075d57806391d1485414610710578063a217fddf146106f4578063b08e51c0146106cb578063b1c5f427146106a1578063bc197c8114610619578063c4d252f514610366578063d45c44351461033a578063d547741f146102f9578063e38335e5146101d7578063f23a6e61146101825763f27a0c920361000e573461017d57600036600319011261017d576020609854604051908152f35b600080fd5b3461017d5760a036600319011261017d5761019b6114ae565b506101a46114c4565b506084356001600160401b03811161017d576101c49036906004016115d6565b5060405163f23a6e6160e01b8152602090f35b6102596102526101e6366116ca565b600080526000805160206123e08339815191526020527fa01e231ca478cf51f663e103939e98de36fa76d3e4e0b1de673dc711acc3a01b5492999198939693919260ff16156102eb575b61023b858514611eea565b6102468a8514611eea565b888a888789888d611d75565b96876121cc565b60005b81811061026c5761001987612262565b8080887fc2617efa69bab66782fa219543714338489c4e9e178271560a91b82c3f612b5888886102de6102c58f986102e6998f828e6102b88f836102b3916102be96611f42565b611f52565b97611f42565b3595611f66565b906102d2828287876120be565b60405194859485612097565b0390a3611cb8565b61025c565b6102f43361199c565b610230565b3461017d57604036600319011261017d576100196004356103186114c4565b908060005260656020526103356001604060002001543390611ac9565b611be2565b3461017d57602036600319011261017d5760043560005260976020526020604060002054604051908152f35b3461017d5760208060031936011261017d57600435906000805160206124808339815191528060005260658252604060002033600052825260ff604060002054161561045e57506103c582600052609760205260016040600020541190565b15610400576097908260005252600060408120557fbaa1eb22f2a492ba1a5fea61b8df4d27c6c8b5f3971e63bb58fa14ff72eedb70600080a2005b6084906040519062461bcd60e51b82526004820152603160248201527f54696d656c6f636b436f6e74726f6c6c65723a206f7065726174696f6e2063616044820152701b9b9bdd0818994818d85b98d95b1b1959607a1b6064820152fd5b9061046833612291565b60405161047481611569565b604281528281019360603686378151156106035760308553815160019081101561060357607860218401536041905b8082116105a9575050610566579061052f6048604494936040519687916105208784019676020b1b1b2b9b9a1b7b73a3937b61d1030b1b1b7bab73a1604d1b88526104f7815180928b603789019101611789565b8401917001034b99036b4b9b9b4b733903937b6329607d1b603784015251809386840190611789565b0103602881018752018561159a565b61055860405194859362461bcd60e51b8552600485015251809281602486015285850190611789565b601f01601f19168101030190fd5b6064836040519062461bcd60e51b825280600483015260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e746044820152fd5b9091600f81166010811015610603576f181899199a1a9b1b9c1cb0b131b232b360811b901a6105d88486612280565b5360041c9180156105ed5760001901906104a3565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b3461017d5760a036600319011261017d576106326114ae565b5061063b6114c4565b506001600160401b0360443581811161017d5761065c90369060040161172b565b5060643581811161017d5761067590369060040161172b565b5060843590811161017d5761068e9036906004016115d6565b5060405163bc197c8160e01b8152602090f35b3461017d5760206106c36106b4366116ca565b96959095949194939293611d75565b604051908152f35b3461017d57600036600319011261017d5760206040516000805160206124808339815191528152f35b3461017d57600036600319011261017d57602060405160008152f35b3461017d57604036600319011261017d576107296114c4565b600435600052606560205260406000209060018060a01b0316600052602052602060ff604060002054166040519015158152f35b3461017d57600036600319011261017d5760206040516000805160206124408339815191528152f35b3461017d5760c036600319011261017d576001600160401b0360043581811161017d576107b790369060040161169a565b919060243582811161017d576107d190369060040161169a565b91909260443590811161017d576107ec90369060040161169a565b906064359460a435936107fe336117ac565b610809868914611eea565b610814848914611eea565b6108266084358886868a878e88611d75565b946108318187611fa7565b60005b89811061083d57005b8080887f4cf4410cc57040e44862ef0f45f3dd5a5e02db8eb8add648d4b0e236f1d07dca88888f8f8f906108958f9a6108a29b61088e8f8f966108886102b3866102de9b8195611f42565b99611f42565b3597611f66565b9060405196879687611eb2565b610834565b3461017d5760206106c36108ba3661151b565b94939093929192611d20565b3461017d5760a036600319011261017d576001600160401b0360243581811161017d576108f7903690600401611634565b9060443590811161017d57610910903690600401611634565b606435916001600160a01b038316830361017d576084356001600160a01b038116810361017d576000549360ff8560081c161594858096610f87575b8015610f70575b15610f145760ff19811660011760005585610f02575b5061098460ff60005460081c1661097f81611c58565b611c58565b600080516020612400833981519152600052606560205260008051602061240083398151915260016040600020018181549155816000805160206123c0833981519152600080a4600080516020612440833981519152600052600080516020612400833981519152600160406000200181815491556000805160206124408339815191526000805160206123c0833981519152600080a4600080516020612460833981519152600052600080516020612400833981519152600160406000200181815491556000805160206124608339815191526000805160206123c0833981519152600080a4600080516020612480833981519152600052600080516020612400833981519152600160406000200181815491556000805160206124808339815191526000805160206123c0833981519152600080a460008051602061240083398151915260005260406000203060005260205260ff6040600020541615610e9f575b6001600160a01b038116610df4575b5060005b8251811015610c4c57610b93906001600160a01b03610b1a8286611cc7565b511660008181527fafe71ff1fe81c59ca16af21c02420893e650adae4948ece1623218f842885477602052604090205460ff1615610be9575b506001600160a01b03610b668286611cc7565b51166000818152600080516020612420833981519152602052604090205460ff1615610b98575b50611cb8565b610afb565b600081815260008051602061242083398151915260205260408120805460ff19166001179055339190600080516020612480833981519152906000805160206123a08339815191529080a486610b8d565b60008181527fafe71ff1fe81c59ca16af21c02420893e650adae4948ece1623218f84288547760205260408120805460ff19166001179055339190600080516020612440833981519152906000805160206123a08339815191529080a486610b53565b84828560005b8151811015610cf357610c9d906001600160a01b03610c718285611cc7565b511660008181526000805160206123e0833981519152602052604090205460ff1615610ca25750611cb8565b610c52565b60008181526000805160206123e083398151915260205260408120805460ff19166001179055339190600080516020612460833981519152906000805160206123a08339815191529080a485610b8d565b50507f11c24f4ead16507c69ac467fbd5e4eed5fb5c699626d2cc6d66421df253886d5604060043580609855815190600082526020820152a16001600160a01b0381166000908152600080516020612420833981519152602052604090205460ff1615610d9a575b50610d6257005b61ff0019600054166000557f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498602060405160018152a1005b6001600160a01b0316600081815260008051602061242083398151915260205260408120805460ff19166001179055339190600080516020612480833981519152906000805160206123a08339815191529080a481610d5b565b6001600160a01b03811660009081527fa7f0fe6b160f14839da5807e54d8be701aeb7039e18d9515384c8011270d6e77602052604090205460ff16610af7576001600160a01b031660008181527fa7f0fe6b160f14839da5807e54d8be701aeb7039e18d9515384c8011270d6e7760205260408120805460ff19166001179055339190600080516020612400833981519152906000805160206123a08339815191529080a484610af7565b3060008181527fa7f0fe6b160f14839da5807e54d8be701aeb7039e18d9515384c8011270d6e7760205260408120805460ff19166001179055339190600080516020612400833981519152906000805160206123a08339815191529080a4610ae8565b61ffff19166101011760005585610969565b60405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b6064820152608490fd5b50303b1580156109535750600160ff821614610953565b50600160ff82161061094c565b3461017d57602036600319011261017d57600435303303610fe6577f11c24f4ead16507c69ac467fbd5e4eed5fb5c699626d2cc6d66421df253886d560406098548151908152836020820152a1609855005b60405162461bcd60e51b815260206004820152602b60248201527f54696d656c6f636b436f6e74726f6c6c65723a2063616c6c6572206d7573742060448201526a62652074696d656c6f636b60a81b6064820152608490fd5b3461017d57602036600319011261017d57602061106c600435600052609760205260016040600020541190565b6040519015158152f35b3461017d57604036600319011261017d5761108f6114c4565b336001600160a01b038216036110ab5761001990600435611be2565b60405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201526e103937b632b9903337b91039b2b63360891b6064820152608490fd5b3461017d57602036600319011261017d57602061106c6004356000526097602052604060002054151590565b3461017d57604036600319011261017d576004356111506114c4565b81600052606560205261116c6001604060002001543390611ac9565b81600052606560205260406000209060018060a01b0316908160005260205260ff604060002054161561119b57005b8160005260656020526040600020816000526020526040600020600160ff1982541617905533916000805160206123a0833981519152600080a4005b3461017d57602036600319011261017d57602061106c600435600052609760205260016040600020541490565b3461017d57602036600319011261017d5760043560005260656020526020600160406000200154604051908152f35b3461017d57608036600319011261017d5761124c6114ae565b506112556114c4565b506064356001600160401b03811161017d576112759036906004016115d6565b50604051630a85bd0160e11b8152602090f35b3461017d57602036600319011261017d57602061106c600435611cdb565b61001961132760006113337fc2617efa69bab66782fa219543714338489c4e9e178271560a91b82c3f612b5861131e6112de3661151b565b6000805160206124608339815191528a999597929994939452606560205260408a208a805260205260ff60408b2054161561133b575b8884848989611d20565b988997886121cc565b6102d2828287876120be565b0390a3612262565b6113443361199c565b611314565b3461017d57600036600319011261017d5760206040516000805160206124008339815191528152f35b3461017d57600036600319011261017d5760206040516000805160206124608339815191528152f35b3461017d57602036600319011261017d5760043563ffffffff60e01b811680910361017d57602090630271189760e51b81149081156113e0575b506040519015158152f35b637965db0b60e01b8114915081156113fa575b50826113d5565b6301ffc9a760e01b149050826113f3565b3461017d5760c036600319011261017d576114246114ae565b602435906044356001600160401b03811161017d576000926114a99261146f7f4cf4410cc57040e44862ef0f45f3dd5a5e02db8eb8add648d4b0e236f1d07dca9336906004016114ee565b60649591953560a43591611482336117ac565b61149260843583838b8a8a611d20565b9761149d848a611fa7565b60405196879687611eb2565b0390a3005b600435906001600160a01b038216820361017d57565b602435906001600160a01b038216820361017d57565b35906001600160a01b038216820361017d57565b9181601f8401121561017d578235916001600160401b03831161017d576020838186019501011161017d57565b60a060031982011261017d576004356001600160a01b038116810361017d579160243591604435906001600160401b03821161017d5761155d916004016114ee565b90916064359060843590565b608081019081106001600160401b0382111761158457604052565b634e487b7160e01b600052604160045260246000fd5b90601f801991011681019081106001600160401b0382111761158457604052565b6001600160401b03811161158457601f01601f191660200190565b81601f8201121561017d578035906115ed826115bb565b926115fb604051948561159a565b8284526020838301011161017d57816000926020809301838601378301015290565b6001600160401b0381116115845760051b60200190565b81601f8201121561017d5780359161164b8361161d565b92611659604051948561159a565b808452602092838086019260051b82010192831161017d578301905b828210611683575050505090565b83809161168f846114da565b815201910190611675565b9181601f8401121561017d578235916001600160401b03831161017d576020808501948460051b01011161017d57565b9060a060031983011261017d576001600160401b0360043581811161017d57836116f69160040161169a565b9390939260243583811161017d57826117119160040161169a565b9390939260443591821161017d5761155d9160040161169a565b81601f8201121561017d578035916117428361161d565b92611750604051948561159a565b808452602092838086019260051b82010192831161017d578301905b82821061177a575050505090565b8135815290830190830161176c565b60005b83811061179c5750506000910152565b818101518382015260200161178c565b6001600160a01b031660008181527fafe71ff1fe81c59ca16af21c02420893e650adae4948ece1623218f842885477602090815260408083205490936000805160206124408339815191529160ff1615611807575050505050565b61181090612291565b9084519061181d82611569565b6042825283820194606036873782511561198857603086538251906001918210156119885790607860218501536041915b81831161191a575050506118d857846118b460486105589360449798519889916118a58984019876020b1b1b2b9b9a1b7b73a3937b61d1030b1b1b7bab73a1604d1b8a526104f7815180928d603789019101611789565b0103602881018952018761159a565b5194859362461bcd60e51b8552600485015251809281602486015285850190611789565b60648386519062461bcd60e51b825280600483015260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e746044820152fd5b909192600f81166010811015611974576f181899199a1a9b1b9c1cb0b131b232b360811b901a61194a8587612280565b5360041c9280156119605760001901919061184e565b634e487b7160e01b82526011600452602482fd5b634e487b7160e01b83526032600452602483fd5b634e487b7160e01b81526032600452602490fd5b6001600160a01b031660008181526000805160206123e0833981519152602090815260408083205490936000805160206124608339815191529160ff16156119e5575050505050565b6119ee90612291565b908451906119fb82611569565b6042825283820194606036873782511561198857603086538251906001918210156119885790607860218501536041915b818311611a83575050506118d857846118b460486105589360449798519889916118a58984019876020b1b1b2b9b9a1b7b73a3937b61d1030b1b1b7bab73a1604d1b8a526104f7815180928d603789019101611789565b909192600f81166010811015611974576f181899199a1a9b1b9c1cb0b131b232b360811b901a611ab38587612280565b5360041c92801561196057600019019190611a2c565b600090808252602090606582526040938484209060018060a01b031690818552835260ff858520541615611afe575050505050565b611b0790612291565b90845190611b1482611569565b6042825283820194606036873782511561198857603086538251906001918210156119885790607860218501536041915b818311611b9c575050506118d857846118b460486105589360449798519889916118a58984019876020b1b1b2b9b9a1b7b73a3937b61d1030b1b1b7bab73a1604d1b8a526104f7815180928d603789019101611789565b909192600f81166010811015611974576f181899199a1a9b1b9c1cb0b131b232b360811b901a611bcc8587612280565b5360041c92801561196057600019019190611b45565b906000918083526065602052604083209160018060a01b03169182845260205260ff604084205416611c1357505050565b8083526065602052604083208284526020526040832060ff1981541690557ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b339380a4565b15611c5f57565b60405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b6064820152608490fd5b60001981146105ed5760010190565b80518210156106035760209160051b010190565b6000526097602052604060002054600181119081611cf7575090565b905042101590565b908060209392818452848401376000828201840152601f01601f1916010190565b94611d56611d6f94959293604051968795602087019960018060a01b03168a52604087015260a0606087015260c0860191611cff565b91608084015260a083015203601f19810183528261159a565b51902090565b969294909695919560405196602091828901998060c08b0160a08d525260e08a01919060005b85828210611e8e5750505050888103601f1990810160408b0152888252976001600160fb1b03811161017d579089969495939897929160051b80928a830137019380888601878703606089015252604085019460408260051b82010195836000925b848410611e2557505050505050611d6f9550608084015260a08301520390810183528261159a565b9193969850919398999496603f198282030184528935601e198436030181121561017d5783018681019190356001600160401b03811161017d57803603831361017d57611e7788928392600195611cff565b9b0194019401918b98969394919a9997959a611dfd565b80600192939495838060a01b03611ea4886114da565b168152019401929101611d9b565b929093611ee0926080959897969860018060a01b03168552602085015260a0604085015260a0840191611cff565b9460608201520152565b15611ef157565b60405162461bcd60e51b815260206004820152602360248201527f54696d656c6f636b436f6e74726f6c6c65723a206c656e677468206d69736d616044820152620e8c6d60eb1b6064820152608490fd5b91908110156106035760051b0190565b356001600160a01b038116810361017d5790565b91908110156106035760051b81013590601e198136030182121561017d5701908135916001600160401b03831161017d57602001823603811361017d579190565b90611fbf826000526097602052604060002054151590565b61203a576098548110611fe6574201908142116105ed576000526097602052604060002055565b60405162461bcd60e51b815260206004820152602660248201527f54696d656c6f636b436f6e74726f6c6c65723a20696e73756666696369656e746044820152652064656c617960d01b6064820152608490fd5b60405162461bcd60e51b815260206004820152602f60248201527f54696d656c6f636b436f6e74726f6c6c65723a206f7065726174696f6e20616c60448201526e1c9958591e481cd8da19591d5b1959608a1b6064820152608490fd5b6120bb949260609260018060a01b0316825260208201528160408201520191611cff565b90565b90926000938493826040519384928337810185815203925af13d15612168573d6120e7816115bb565b906120f5604051928361159a565b8152600060203d92013e5b1561210757565b60405162461bcd60e51b815260206004820152603360248201527f54696d656c6f636b436f6e74726f6c6c65723a20756e6465726c79696e6720746044820152721c985b9cd858dd1a5bdb881c995d995c9d1959606a1b6064820152608490fd5b612100565b1561217457565b60405162461bcd60e51b815260206004820152602a60248201527f54696d656c6f636b436f6e74726f6c6c65723a206f7065726174696f6e206973604482015269206e6f7420726561647960b01b6064820152608490fd5b6121d86121dd91611cdb565b61216d565b8015908115612243575b50156121ef57565b60405162461bcd60e51b815260206004820152602660248201527f54696d656c6f636b436f6e74726f6c6c65723a206d697373696e6720646570656044820152656e64656e637960d01b6064820152608490fd5b61225c9150600052609760205260016040600020541490565b386121e7565b61226e6121d882611cdb565b60005260976020526001604060002055565b908151811015610603570160200190565b60405190606082018281106001600160401b0382111761158457604052602a82526020820160403682378251156106035760309053815160019081101561060357607860218401536029905b8082116123315750506122ed5790565b606460405162461bcd60e51b815260206004820152602060248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e746044820152fd5b9091600f8116601081101561238a576f181899199a1a9b1b9c1cb0b131b232b360811b901a6123608486612280565b5360041c9180156123755760001901906122dd565b60246000634e487b7160e01b81526011600452fd5b60246000634e487b7160e01b81526032600452fdfe2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0dbd79b86ffe0ab8e8776151514217cd7cacd52c909f66475c3af44e129f0b00ff7dc9f88e569f94faad6fa0d44dd44858caf3f34f1bd1c985800aedf5793aad8b5f58e3a2316349923ce3780f8d587db2d72378aed66a8261c916544fa6846ca5b33a3829f2d1f31fd111fcd13892b72b93a782f7b93bf968903b15b040efa320b09aa5aeb3702cfd50b6b62bc4532604938f21248a27a1d5ca736082b6819cc1d8aa0f3194971a2a116679f7c2090f6939c8d4e01a2a8d7e41d55e5351469e63fd643c72710c63c0180259aba6b2d05451e3591a24e58b62239378085726f783a2646970667358221220d389039f48a13f2f361fc6aba7c592a6661f1d982ac04b18903cb02ac507c8f364736f6c63430008120033a2646970667358221220538abd3ae48eda8d2aa0e32719054ba55250331a59ca535797605e5a3d7c274e64736f6c63430008120033",
  "deployedBytecode": "0x608080604052600436101561001357600080fd5b600090813560e01c63775c300c1461002a57600080fd5b307f0000000000000000000000000000000000000000000000000000000000000000146100be57816003193601126100be576124f18082019082821067ffffffffffffffff8311176100aa579082916100c38339039082f0801561009d576040516001600160a01b039091168152602090f35b50604051903d90823e3d90fd5b634e487b7160e01b84526041600452602484fd5b5080fdfe60808060405234610016576124d5908161001c8239f35b600080fdfe6080604052600436101561001b575b361561001957600080fd5b005b60003560e01c806301d5062a1461140b57806301ffc9a71461139b57806307bd0265146113725780630d3cf6fc14611349578063134008d3146112a657806313bc9f2014611288578063150b7a0214611233578063248a9ca3146112045780632ab0f529146111d75780632f2ff15d1461113457806331d507501461110857806336568abe14611076578063584b153e1461103f57806364d6235314610f94578063672f70c5146108c65780638065657f146108a75780638f2a0bb0146107865780638f61f4f51461075d57806391d1485414610710578063a217fddf146106f4578063b08e51c0146106cb578063b1c5f427146106a1578063bc197c8114610619578063c4d252f514610366578063d45c44351461033a578063d547741f146102f9578063e38335e5146101d7578063f23a6e61146101825763f27a0c920361000e573461017d57600036600319011261017d576020609854604051908152f35b600080fd5b3461017d5760a036600319011261017d5761019b6114ae565b506101a46114c4565b506084356001600160401b03811161017d576101c49036906004016115d6565b5060405163f23a6e6160e01b8152602090f35b6102596102526101e6366116ca565b600080526000805160206123e08339815191526020527fa01e231ca478cf51f663e103939e98de36fa76d3e4e0b1de673dc711acc3a01b5492999198939693919260ff16156102eb575b61023b858514611eea565b6102468a8514611eea565b888a888789888d611d75565b96876121cc565b60005b81811061026c5761001987612262565b8080887fc2617efa69bab66782fa219543714338489c4e9e178271560a91b82c3f612b5888886102de6102c58f986102e6998f828e6102b88f836102b3916102be96611f42565b611f52565b97611f42565b3595611f66565b906102d2828287876120be565b60405194859485612097565b0390a3611cb8565b61025c565b6102f43361199c565b610230565b3461017d57604036600319011261017d576100196004356103186114c4565b908060005260656020526103356001604060002001543390611ac9565b611be2565b3461017d57602036600319011261017d5760043560005260976020526020604060002054604051908152f35b3461017d5760208060031936011261017d57600435906000805160206124808339815191528060005260658252604060002033600052825260ff604060002054161561045e57506103c582600052609760205260016040600020541190565b15610400576097908260005252600060408120557fbaa1eb22f2a492ba1a5fea61b8df4d27c6c8b5f3971e63bb58fa14ff72eedb70600080a2005b6084906040519062461bcd60e51b82526004820152603160248201527f54696d656c6f636b436f6e74726f6c6c65723a206f7065726174696f6e2063616044820152701b9b9bdd0818994818d85b98d95b1b1959607a1b6064820152fd5b9061046833612291565b60405161047481611569565b604281528281019360603686378151156106035760308553815160019081101561060357607860218401536041905b8082116105a9575050610566579061052f6048604494936040519687916105208784019676020b1b1b2b9b9a1b7b73a3937b61d1030b1b1b7bab73a1604d1b88526104f7815180928b603789019101611789565b8401917001034b99036b4b9b9b4b733903937b6329607d1b603784015251809386840190611789565b0103602881018752018561159a565b61055860405194859362461bcd60e51b8552600485015251809281602486015285850190611789565b601f01601f19168101030190fd5b6064836040519062461bcd60e51b825280600483015260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e746044820152fd5b9091600f81166010811015610603576f181899199a1a9b1b9c1cb0b131b232b360811b901a6105d88486612280565b5360041c9180156105ed5760001901906104a3565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b3461017d5760a036600319011261017d576106326114ae565b5061063b6114c4565b506001600160401b0360443581811161017d5761065c90369060040161172b565b5060643581811161017d5761067590369060040161172b565b5060843590811161017d5761068e9036906004016115d6565b5060405163bc197c8160e01b8152602090f35b3461017d5760206106c36106b4366116ca565b96959095949194939293611d75565b604051908152f35b3461017d57600036600319011261017d5760206040516000805160206124808339815191528152f35b3461017d57600036600319011261017d57602060405160008152f35b3461017d57604036600319011261017d576107296114c4565b600435600052606560205260406000209060018060a01b0316600052602052602060ff604060002054166040519015158152f35b3461017d57600036600319011261017d5760206040516000805160206124408339815191528152f35b3461017d5760c036600319011261017d576001600160401b0360043581811161017d576107b790369060040161169a565b919060243582811161017d576107d190369060040161169a565b91909260443590811161017d576107ec90369060040161169a565b906064359460a435936107fe336117ac565b610809868914611eea565b610814848914611eea565b6108266084358886868a878e88611d75565b946108318187611fa7565b60005b89811061083d57005b8080887f4cf4410cc57040e44862ef0f45f3dd5a5e02db8eb8add648d4b0e236f1d07dca88888f8f8f906108958f9a6108a29b61088e8f8f966108886102b3866102de9b8195611f42565b99611f42565b3597611f66565b9060405196879687611eb2565b610834565b3461017d5760206106c36108ba3661151b565b94939093929192611d20565b3461017d5760a036600319011261017d576001600160401b0360243581811161017d576108f7903690600401611634565b9060443590811161017d57610910903690600401611634565b606435916001600160a01b038316830361017d576084356001600160a01b038116810361017d576000549360ff8560081c161594858096610f87575b8015610f70575b15610f145760ff19811660011760005585610f02575b5061098460ff60005460081c1661097f81611c58565b611c58565b600080516020612400833981519152600052606560205260008051602061240083398151915260016040600020018181549155816000805160206123c0833981519152600080a4600080516020612440833981519152600052600080516020612400833981519152600160406000200181815491556000805160206124408339815191526000805160206123c0833981519152600080a4600080516020612460833981519152600052600080516020612400833981519152600160406000200181815491556000805160206124608339815191526000805160206123c0833981519152600080a4600080516020612480833981519152600052600080516020612400833981519152600160406000200181815491556000805160206124808339815191526000805160206123c0833981519152600080a460008051602061240083398151915260005260406000203060005260205260ff6040600020541615610e9f575b6001600160a01b038116610df4575b5060005b8251811015610c4c57610b93906001600160a01b03610b1a8286611cc7565b511660008181527fafe71ff1fe81c59ca16af21c02420893e650adae4948ece1623218f842885477602052604090205460ff1615610be9575b506001600160a01b03610b668286611cc7565b51166000818152600080516020612420833981519152602052604090205460ff1615610b98575b50611cb8565b610afb565b600081815260008051602061242083398151915260205260408120805460ff19166001179055339190600080516020612480833981519152906000805160206123a08339815191529080a486610b8d565b60008181527fafe71ff1fe81c59ca16af21c02420893e650adae4948ece1623218f84288547760205260408120805460ff19166001179055339190600080516020612440833981519152906000805160206123a08339815191529080a486610b53565b84828560005b8151811015610cf357610c9d906001600160a01b03610c718285611cc7565b511660008181526000805160206123e0833981519152602052604090205460ff1615610ca25750611cb8565b610c52565b60008181526000805160206123e083398151915260205260408120805460ff19166001179055339190600080516020612460833981519152906000805160206123a08339815191529080a485610b8d565b50507f11c24f4ead16507c69ac467fbd5e4eed5fb5c699626d2cc6d66421df253886d5604060043580609855815190600082526020820152a16001600160a01b0381166000908152600080516020612420833981519152602052604090205460ff1615610d9a575b50610d6257005b61ff0019600054166000557f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498602060405160018152a1005b6001600160a01b0316600081815260008051602061242083398151915260205260408120805460ff19166001179055339190600080516020612480833981519152906000805160206123a08339815191529080a481610d5b565b6001600160a01b03811660009081527fa7f0fe6b160f14839da5807e54d8be701aeb7039e18d9515384c8011270d6e77602052604090205460ff16610af7576001600160a01b031660008181527fa7f0fe6b160f14839da5807e54d8be701aeb7039e18d9515384c8011270d6e7760205260408120805460ff19166001179055339190600080516020612400833981519152906000805160206123a08339815191529080a484610af7565b3060008181527fa7f0fe6b160f14839da5807e54d8be701aeb7039e18d9515384c8011270d6e7760205260408120805460ff19166001179055339190600080516020612400833981519152906000805160206123a08339815191529080a4610ae8565b61ffff19166101011760005585610969565b60405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b6064820152608490fd5b50303b1580156109535750600160ff821614610953565b50600160ff82161061094c565b3461017d57602036600319011261017d57600435303303610fe6577f11c24f4ead16507c69ac467fbd5e4eed5fb5c699626d2cc6d66421df253886d560406098548151908152836020820152a1609855005b60405162461bcd60e51b815260206004820152602b60248201527f54696d656c6f636b436f6e74726f6c6c65723a2063616c6c6572206d7573742060448201526a62652074696d656c6f636b60a81b6064820152608490fd5b3461017d57602036600319011261017d57602061106c600435600052609760205260016040600020541190565b6040519015158152f35b3461017d57604036600319011261017d5761108f6114c4565b336001600160a01b038216036110ab5761001990600435611be2565b60405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201526e103937b632b9903337b91039b2b63360891b6064820152608490fd5b3461017d57602036600319011261017d57602061106c6004356000526097602052604060002054151590565b3461017d57604036600319011261017d576004356111506114c4565b81600052606560205261116c6001604060002001543390611ac9565b81600052606560205260406000209060018060a01b0316908160005260205260ff604060002054161561119b57005b8160005260656020526040600020816000526020526040600020600160ff1982541617905533916000805160206123a0833981519152600080a4005b3461017d57602036600319011261017d57602061106c600435600052609760205260016040600020541490565b3461017d57602036600319011261017d5760043560005260656020526020600160406000200154604051908152f35b3461017d57608036600319011261017d5761124c6114ae565b506112556114c4565b506064356001600160401b03811161017d576112759036906004016115d6565b50604051630a85bd0160e11b8152602090f35b3461017d57602036600319011261017d57602061106c600435611cdb565b61001961132760006113337fc2617efa69bab66782fa219543714338489c4e9e178271560a91b82c3f612b5861131e6112de3661151b565b6000805160206124608339815191528a999597929994939452606560205260408a208a805260205260ff60408b2054161561133b575b8884848989611d20565b988997886121cc565b6102d2828287876120be565b0390a3612262565b6113443361199c565b611314565b3461017d57600036600319011261017d5760206040516000805160206124008339815191528152f35b3461017d57600036600319011261017d5760206040516000805160206124608339815191528152f35b3461017d57602036600319011261017d5760043563ffffffff60e01b811680910361017d57602090630271189760e51b81149081156113e0575b506040519015158152f35b637965db0b60e01b8114915081156113fa575b50826113d5565b6301ffc9a760e01b149050826113f3565b3461017d5760c036600319011261017d576114246114ae565b602435906044356001600160401b03811161017d576000926114a99261146f7f4cf4410cc57040e44862ef0f45f3dd5a5e02db8eb8add648d4b0e236f1d07dca9336906004016114ee565b60649591953560a43591611482336117ac565b61149260843583838b8a8a611d20565b9761149d848a611fa7565b60405196879687611eb2565b0390a3005b600435906001600160a01b038216820361017d57565b602435906001600160a01b038216820361017d57565b35906001600160a01b038216820361017d57565b9181601f8401121561017d578235916001600160401b03831161017d576020838186019501011161017d57565b60a060031982011261017d576004356001600160a01b038116810361017d579160243591604435906001600160401b03821161017d5761155d916004016114ee565b90916064359060843590565b608081019081106001600160401b0382111761158457604052565b634e487b7160e01b600052604160045260246000fd5b90601f801991011681019081106001600160401b0382111761158457604052565b6001600160401b03811161158457601f01601f191660200190565b81601f8201121561017d578035906115ed826115bb565b926115fb604051948561159a565b8284526020838301011161017d57816000926020809301838601378301015290565b6001600160401b0381116115845760051b60200190565b81601f8201121561017d5780359161164b8361161d565b92611659604051948561159a565b808452602092838086019260051b82010192831161017d578301905b828210611683575050505090565b83809161168f846114da565b815201910190611675565b9181601f8401121561017d578235916001600160401b03831161017d576020808501948460051b01011161017d57565b9060a060031983011261017d576001600160401b0360043581811161017d57836116f69160040161169a565b9390939260243583811161017d57826117119160040161169a565b9390939260443591821161017d5761155d9160040161169a565b81601f8201121561017d578035916117428361161d565b92611750604051948561159a565b808452602092838086019260051b82010192831161017d578301905b82821061177a575050505090565b8135815290830190830161176c565b60005b83811061179c5750506000910152565b818101518382015260200161178c565b6001600160a01b031660008181527fafe71ff1fe81c59ca16af21c02420893e650adae4948ece1623218f842885477602090815260408083205490936000805160206124408339815191529160ff1615611807575050505050565b61181090612291565b9084519061181d82611569565b6042825283820194606036873782511561198857603086538251906001918210156119885790607860218501536041915b81831161191a575050506118d857846118b460486105589360449798519889916118a58984019876020b1b1b2b9b9a1b7b73a3937b61d1030b1b1b7bab73a1604d1b8a526104f7815180928d603789019101611789565b0103602881018952018761159a565b5194859362461bcd60e51b8552600485015251809281602486015285850190611789565b60648386519062461bcd60e51b825280600483015260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e746044820152fd5b909192600f81166010811015611974576f181899199a1a9b1b9c1cb0b131b232b360811b901a61194a8587612280565b5360041c9280156119605760001901919061184e565b634e487b7160e01b82526011600452602482fd5b634e487b7160e01b83526032600452602483fd5b634e487b7160e01b81526032600452602490fd5b6001600160a01b031660008181526000805160206123e0833981519152602090815260408083205490936000805160206124608339815191529160ff16156119e5575050505050565b6119ee90612291565b908451906119fb82611569565b6042825283820194606036873782511561198857603086538251906001918210156119885790607860218501536041915b818311611a83575050506118d857846118b460486105589360449798519889916118a58984019876020b1b1b2b9b9a1b7b73a3937b61d1030b1b1b7bab73a1604d1b8a526104f7815180928d603789019101611789565b909192600f81166010811015611974576f181899199a1a9b1b9c1cb0b131b232b360811b901a611ab38587612280565b5360041c92801561196057600019019190611a2c565b600090808252602090606582526040938484209060018060a01b031690818552835260ff858520541615611afe575050505050565b611b0790612291565b90845190611b1482611569565b6042825283820194606036873782511561198857603086538251906001918210156119885790607860218501536041915b818311611b9c575050506118d857846118b460486105589360449798519889916118a58984019876020b1b1b2b9b9a1b7b73a3937b61d1030b1b1b7bab73a1604d1b8a526104f7815180928d603789019101611789565b909192600f81166010811015611974576f181899199a1a9b1b9c1cb0b131b232b360811b901a611bcc8587612280565b5360041c92801561196057600019019190611b45565b906000918083526065602052604083209160018060a01b03169182845260205260ff604084205416611c1357505050565b8083526065602052604083208284526020526040832060ff1981541690557ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b339380a4565b15611c5f57565b60405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b6064820152608490fd5b60001981146105ed5760010190565b80518210156106035760209160051b010190565b6000526097602052604060002054600181119081611cf7575090565b905042101590565b908060209392818452848401376000828201840152601f01601f1916010190565b94611d56611d6f94959293604051968795602087019960018060a01b03168a52604087015260a0606087015260c0860191611cff565b91608084015260a083015203601f19810183528261159a565b51902090565b969294909695919560405196602091828901998060c08b0160a08d525260e08a01919060005b85828210611e8e5750505050888103601f1990810160408b0152888252976001600160fb1b03811161017d579089969495939897929160051b80928a830137019380888601878703606089015252604085019460408260051b82010195836000925b848410611e2557505050505050611d6f9550608084015260a08301520390810183528261159a565b9193969850919398999496603f198282030184528935601e198436030181121561017d5783018681019190356001600160401b03811161017d57803603831361017d57611e7788928392600195611cff565b9b0194019401918b98969394919a9997959a611dfd565b80600192939495838060a01b03611ea4886114da565b168152019401929101611d9b565b929093611ee0926080959897969860018060a01b03168552602085015260a0604085015260a0840191611cff565b9460608201520152565b15611ef157565b60405162461bcd60e51b815260206004820152602360248201527f54696d656c6f636b436f6e74726f6c6c65723a206c656e677468206d69736d616044820152620e8c6d60eb1b6064820152608490fd5b91908110156106035760051b0190565b356001600160a01b038116810361017d5790565b91908110156106035760051b81013590601e198136030182121561017d5701908135916001600160401b03831161017d57602001823603811361017d579190565b90611fbf826000526097602052604060002054151590565b61203a576098548110611fe6574201908142116105ed576000526097602052604060002055565b60405162461bcd60e51b815260206004820152602660248201527f54696d656c6f636b436f6e74726f6c6c65723a20696e73756666696369656e746044820152652064656c617960d01b6064820152608490fd5b60405162461bcd60e51b815260206004820152602f60248201527f54696d656c6f636b436f6e74726f6c6c65723a206f7065726174696f6e20616c60448201526e1c9958591e481cd8da19591d5b1959608a1b6064820152608490fd5b6120bb949260609260018060a01b0316825260208201528160408201520191611cff565b90565b90926000938493826040519384928337810185815203925af13d15612168573d6120e7816115bb565b906120f5604051928361159a565b8152600060203d92013e5b1561210757565b60405162461bcd60e51b815260206004820152603360248201527f54696d656c6f636b436f6e74726f6c6c65723a20756e6465726c79696e6720746044820152721c985b9cd858dd1a5bdb881c995d995c9d1959606a1b6064820152608490fd5b612100565b1561217457565b60405162461bcd60e51b815260206004820152602a60248201527f54696d656c6f636b436f6e74726f6c6c65723a206f7065726174696f6e206973604482015269206e6f7420726561647960b01b6064820152608490fd5b6121d86121dd91611cdb565b61216d565b8015908115612243575b50156121ef57565b60405162461bcd60e51b815260206004820152602660248201527f54696d656c6f636b436f6e74726f6c6c65723a206d697373696e6720646570656044820152656e64656e637960d01b6064820152608490fd5b61225c9150600052609760205260016040600020541490565b386121e7565b61226e6121d882611cdb565b60005260976020526001604060002055565b908151811015610603570160200190565b60405190606082018281106001600160401b0382111761158457604052602a82526020820160403682378251156106035760309053815160019081101561060357607860218401536029905b8082116123315750506122ed5790565b606460405162461bcd60e51b815260206004820152602060248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e746044820152fd5b9091600f8116601081101561238a576f181899199a1a9b1b9c1cb0b131b232b360811b901a6123608486612280565b5360041c9180156123755760001901906122dd565b60246000634e487b7160e01b81526011600452fd5b60246000634e487b7160e01b81526032600452fdfe2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0dbd79b86ffe0ab8e8776151514217cd7cacd52c909f66475c3af44e129f0b00ff7dc9f88e569f94faad6fa0d44dd44858caf3f34f1bd1c985800aedf5793aad8b5f58e3a2316349923ce3780f8d587db2d72378aed66a8261c916544fa6846ca5b33a3829f2d1f31fd111fcd13892b72b93a782f7b93bf968903b15b040efa320b09aa5aeb3702cfd50b6b62bc4532604938f21248a27a1d5ca736082b6819cc1d8aa0f3194971a2a116679f7c2090f6939c8d4e01a2a8d7e41d55e5351469e63fd643c72710c63c0180259aba6b2d05451e3591a24e58b62239378085726f783a2646970667358221220d389039f48a13f2f361fc6aba7c592a6661f1d982ac04b18903cb02ac507c8f364736f6c63430008120033a2646970667358221220538abd3ae48eda8d2aa0e32719054ba55250331a59ca535797605e5a3d7c274e64736f6c63430008120033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "deploy()": {
        "returns": {
          "_0": "The address of the new TimelockController contract"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "deploy()": {
        "notice": "Deploys a new TimelockController contract"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}
