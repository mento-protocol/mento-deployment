{
  "address": "0xf6d32f19F9af12b223061868E67D6Ae2A6512cC9",
  "abi": [],
  "transactionHash": "0x3b835a25d556c250b96c2172191ce9a3aff3ad5977044cc6a1b69e328bc8c358",
  "receipt": {
    "to": null,
    "from": "0x56fD3F2bEE130e9867942D0F463a16fBE49B8d81",
    "contractAddress": "0xf6d32f19F9af12b223061868E67D6Ae2A6512cC9",
    "transactionIndex": 0,
    "gasUsed": "544870",
    "logsBloom": "0x
    "blockHash": "0xff64d9edc0748636b7855a22be728edc4620dad8408806d5c711fb6bf09b783f",
    "transactionHash": "0x3b835a25d556c250b96c2172191ce9a3aff3ad5977044cc6a1b69e328bc8c358",
    "logs": [],
    "blockNumber": 21936727,
    "cumulativeGasUsed": "544870",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 4,
  "solcInputHash": "7e83205a170b12fd7688a59ae658f360",
  "metadata": "{\"compiler\":{\"version\":\"0.8.18+commit.87f61d96\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"deploy(address,address)\":{\"params\":{\"emissionTarget\":\"The address of the emission target\",\"mentoToken\":\"The address of the MentoToken contract\"},\"returns\":{\"_0\":\"The address of the new Emission contract\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"deploy(address,address)\":{\"notice\":\"Deploys a new Emission contract\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"lib/mento-core-gov/contracts/governance/deployers/EmissionDeployerLib.sol\":\"EmissionDeployerLib\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"lib/mento-core-gov/contracts/governance/Emission.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity 0.8.18;\\n\\nimport { Ownable } from \\\"openzeppelin-contracts-next/contracts/access/Ownable.sol\\\";\\nimport { MentoToken } from \\\"./MentoToken.sol\\\";\\n\\n/**\\n * @title Emission Contract for Mento Token\\n * @author Mento Labs\\n * @notice This contract handles the emission of Mento Tokens in an exponentially decaying manner.\\n */\\ncontract Emission is Ownable {\\n  /// @notice The max amount that will be minted through emission\\n  uint256 public constant TOTAL_EMISSION_SUPPLY = 650_000_000 * 10**18;\\n\\n  /// @notice Pre-calculated constant = EMISSION_HALF_LIFE / LN2.\\n  uint256 public constant A = 454968308;\\n\\n  /// @notice Used to not lose precision in calculations.\\n  uint256 public constant SCALER = 1e18;\\n\\n  /// @notice The timestamp when the emission process started.\\n  uint256 public immutable emissionStartTime;\\n\\n  /// @notice The MentoToken contract reference.\\n  MentoToken public mentoToken;\\n\\n  /// @notice The target address where emitted tokens are sent.\\n  address public emissionTarget;\\n\\n  /// @notice The cumulative amount of tokens that have been emitted so far.\\n  uint256 public totalEmittedAmount;\\n\\n  event EmissionTargetSet(address newTargetAddress);\\n  event TokensEmitted(address indexed target, uint256 amount);\\n\\n  /**\\n   * @notice Construct the Emission contract.\\n   * @param mentoToken_ The address of the MentoToken contract.\\n   * @param emissionTarget_ The address of the emission target.\\n   */\\n  constructor(address mentoToken_, address emissionTarget_) {\\n    emissionStartTime = block.timestamp;\\n    mentoToken = MentoToken(mentoToken_);\\n    emissionTarget = emissionTarget_;\\n  }\\n\\n  /**\\n   * @notice Set the recipient address for the emitted tokens.\\n   * @param emissionTarget_ Address of the emission target.\\n   */\\n  function setEmissionTarget(address emissionTarget_) external onlyOwner {\\n    emissionTarget = emissionTarget_;\\n    emit EmissionTargetSet(emissionTarget_);\\n  }\\n\\n  /**\\n   * @notice Emit tokens based on the exponential decay formula.\\n   * @return amount The number of tokens emitted.\\n   */\\n  function emitTokens() external returns (uint256 amount) {\\n    amount = calculateEmission();\\n    require(amount > 0, \\\"Emission: no tokens to emit\\\");\\n\\n    totalEmittedAmount += amount;\\n\\n    emit TokensEmitted(emissionTarget, amount);\\n    mentoToken.mint(emissionTarget, amount);\\n  }\\n\\n  /**\\n   * @dev Calculate the releasable token amount using a predefined formula.\\n   * The Maclaurin series is used to create a simpler approximation of the exponential decay formula.\\n   * Original formula: E(t) = supply * exp(-A * t)\\n   * Approximation: E(t) = supply * (1 - (t / A) + (t^2 / 2A^2) - (t^3 / 6A^3) + (t^4 / 24A^4))\\n   * where A = HALF_LIFE / ln(2)\\n   * @dev A 5th term (t^5 / 120A^5) is added to ensure the entire supply is minted within around 31.5 years.\\n   * @return amount Number of tokens that can be emitted.\\n   */\\n  function calculateEmission() public view returns (uint256 amount) {\\n    uint256 t = (block.timestamp - emissionStartTime);\\n\\n    uint256 term1 = (SCALER * t) / A;\\n    uint256 term2 = (term1 * t) / (2 * A);\\n    uint256 term3 = (term2 * t) / (3 * A);\\n    uint256 term4 = (term3 * t) / (4 * A);\\n    uint256 term5 = (term4 * t) / (5 * A);\\n\\n    uint256 positiveAggregate = SCALER + term2 + term4;\\n    uint256 negativeAggregate = term1 + term3 + term5;\\n\\n    // Avoiding underflow in case the scheduled amount is bigger than the total supply\\n    if (positiveAggregate < negativeAggregate) {\\n      return TOTAL_EMISSION_SUPPLY - totalEmittedAmount;\\n    }\\n\\n    uint256 scheduledRemainingSupply = (TOTAL_EMISSION_SUPPLY * (positiveAggregate - negativeAggregate)) / SCALER;\\n\\n    amount = TOTAL_EMISSION_SUPPLY - scheduledRemainingSupply - totalEmittedAmount;\\n  }\\n}\\n\",\"keccak256\":\"0xed5c413f0f119991f3c331b845c34624d04f34c141b4d02ea5850c7a2347af9a\",\"license\":\"GPL-3.0-or-later\"},\"lib/mento-core-gov/contracts/governance/MentoToken.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity 0.8.18;\\n\\nimport { ERC20Burnable, ERC20 } from \\\"openzeppelin-contracts-next/contracts/token/ERC20/extensions/ERC20Burnable.sol\\\";\\n\\n/**\\n * @title Mento Token\\n * @author Mento Labs\\n * @notice This contract represents the Mento Protocol Token which is a Burnable ERC20 token.\\n */\\ncontract MentoToken is ERC20Burnable {\\n  /// @notice The address of the emission contract that has the capability to emit new tokens.\\n  address public immutable emission;\\n\\n  /// @notice The total amount of tokens that can be minted by the emission contract.\\n  uint256 public immutable emissionSupply;\\n\\n  /// @notice The total amount of tokens that have been minted by the emission contract so far.\\n  uint256 public emittedAmount;\\n\\n  // solhint-disable max-line-length\\n  /**\\n   * @dev Constructor for the MentoToken contract.\\n   * @notice It mints and allocates the initial token supply among several contracts.\\n   * @param mentoLabsMultiSig The address of the Mento Labs MultiSig where 8% of the total supply will be sent for vesting.\\n   * @param mentoLabsTreasuryTimelock The address of the timelocked Mento Labs treasury where 12% of the total supply will be sent.\\n   * @param airgrab The address of the airgrab contract where 5% of the total supply will be sent.\\n   * @param governanceTimelock The address of the treasury contract where 10% of the total supply will be sent.\\n   * @param emission_ The address of the emission contract where the rest of the supply will be emitted.\\n   */\\n  // solhint-enable max-line-length\\n  constructor(\\n    address mentoLabsMultiSig,\\n    address mentoLabsTreasuryTimelock,\\n    address airgrab,\\n    address governanceTimelock,\\n    address emission_\\n  ) ERC20(\\\"Mento Token\\\", \\\"MENTO\\\") {\\n    uint256 supply = 1_000_000_000 * 10**decimals();\\n\\n    uint256 mentoLabsMultiSigSupply = (supply * 8) / 100;\\n    uint256 mentoLabsTreasurySupply = (supply * 12) / 100;\\n    uint256 airgrabSupply = (supply * 5) / 100;\\n    uint256 governanceTimelockSupply = (supply * 10) / 100;\\n    uint256 emissionSupply_ = (supply * 65) / 100;\\n\\n    _mint(mentoLabsMultiSig, mentoLabsMultiSigSupply);\\n    _mint(mentoLabsTreasuryTimelock, mentoLabsTreasurySupply);\\n    _mint(airgrab, airgrabSupply);\\n    _mint(governanceTimelock, governanceTimelockSupply);\\n\\n    emission = emission_;\\n    emissionSupply = emissionSupply_;\\n  }\\n\\n  /**\\n   * @dev Allows the emission contract to mint new tokens up to the emission supply limit.\\n   * @notice This function can only be called by the emission contract and\\n   * only if the total emitted amount hasn't exceeded the emission supply.\\n   * @param target Address to which the newly minted tokens will be sent.\\n   * @param amount Amount of tokens to be minted.\\n   */\\n  function mint(address target, uint256 amount) external {\\n    require(msg.sender == emission, \\\"MentoToken: only emission contract\\\");\\n    require(emittedAmount + amount <= emissionSupply, \\\"MentoToken: emission supply exceeded\\\");\\n\\n    emittedAmount += amount;\\n    _mint(target, amount);\\n  }\\n}\\n\",\"keccak256\":\"0xd5d1e9485e4b4ad8fc4ce28dadb3dda8be5ca34dcc4e157c89042cdbc3907709\",\"license\":\"GPL-3.0-or-later\"},\"lib/mento-core-gov/contracts/governance/deployers/EmissionDeployerLib.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity 0.8.18;\\n// solhint-disable max-line-length\\n\\nimport { Emission } from \\\"../Emission.sol\\\";\\n\\nlibrary EmissionDeployerLib {\\n  /**\\n   * @notice Deploys a new Emission contract\\n   * @param mentoToken The address of the MentoToken contract\\n   * @param emissionTarget The address of the emission target\\n   * @return The address of the new Emission contract\\n   */\\n  function deploy(address mentoToken, address emissionTarget) external returns (Emission) {\\n    return new Emission(mentoToken, emissionTarget);\\n  }\\n}\\n\",\"keccak256\":\"0xdbe27f8106f7985f3356772a18eeb4474bc0304f100eaecdfd56616ec9b610fa\",\"license\":\"GPL-3.0-or-later\"},\"openzeppelin-contracts-next/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xa94b34880e3c1b0b931662cb1c09e5dfa6662f31cba80e07c5ee71cd135c9673\",\"license\":\"MIT\"},\"openzeppelin-contracts-next/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./extensions/IERC20Metadata.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, amount);\\n        _transfer(from, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        uint256 currentAllowance = allowance(owner, spender);\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(owner, spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `from` to `to`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, amount);\\n\\n        uint256 fromBalance = _balances[from];\\n        require(fromBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[from] = fromBalance - amount;\\n            // Overflow not possible: the sum of all balances is capped by totalSupply, and the sum is preserved by\\n            // decrementing then incrementing.\\n            _balances[to] += amount;\\n        }\\n\\n        emit Transfer(from, to, amount);\\n\\n        _afterTokenTransfer(from, to, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        unchecked {\\n            // Overflow not possible: balance + amount is at most totalSupply + amount, which is checked above.\\n            _balances[account] += amount;\\n        }\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n            // Overflow not possible: amount <= accountBalance <= totalSupply.\\n            _totalSupply -= amount;\\n        }\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\\n     *\\n     * Does not update the allowance amount in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Might emit an {Approval} event.\\n     */\\n    function _spendAllowance(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            require(currentAllowance >= amount, \\\"ERC20: insufficient allowance\\\");\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - amount);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0x4ffc0547c02ad22925310c585c0f166f8759e2648a09e9b489100c42f15dd98d\",\"license\":\"MIT\"},\"openzeppelin-contracts-next/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"openzeppelin-contracts-next/contracts/token/ERC20/extensions/ERC20Burnable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/extensions/ERC20Burnable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC20.sol\\\";\\nimport \\\"../../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Extension of {ERC20} that allows token holders to destroy both their own\\n * tokens and those that they have an allowance for, in a way that can be\\n * recognized off-chain (via event analysis).\\n */\\nabstract contract ERC20Burnable is Context, ERC20 {\\n    /**\\n     * @dev Destroys `amount` tokens from the caller.\\n     *\\n     * See {ERC20-_burn}.\\n     */\\n    function burn(uint256 amount) public virtual {\\n        _burn(_msgSender(), amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, deducting from the caller's\\n     * allowance.\\n     *\\n     * See {ERC20-_burn} and {ERC20-allowance}.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have allowance for ``accounts``'s tokens of at least\\n     * `amount`.\\n     */\\n    function burnFrom(address account, uint256 amount) public virtual {\\n        _spendAllowance(account, _msgSender(), amount);\\n        _burn(account, amount);\\n    }\\n}\\n\",\"keccak256\":\"0x0d19410453cda55960a818e02bd7c18952a5c8fe7a3036e81f0d599f34487a7b\",\"license\":\"MIT\"},\"openzeppelin-contracts-next/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca\",\"license\":\"MIT\"},\"openzeppelin-contracts-next/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x6080806040523461001c576108ea908161002282393081602d0152f35b600080fdfe608080604052600436101561001357600080fd5b600090813560e01c63545e7c611461002a57600080fd5b307f0000000000000000000000000000000000000000000000000000000000000000146100ef5760403660031901126100ef576001600160a01b0390600435828116908190036100eb576024358381168091036100e7576107c1918284019284841067ffffffffffffffff8511176100d357916040939185936100f485398252602082015203019083f09081156100c8576020925060405191168152f35b6040513d84823e3d90fd5b634e487b7160e01b87526041600452602487fd5b8480fd5b8380fd5b5080fdfe60a0346100d757601f6107c138819003918201601f19168301916001600160401b038311848410176100dc5780849260409485528339810103126100d757610052602061004b836100f2565b92016100f2565b60008054336001600160a01b0319808316821784556040519590946001600160a01b03949093859391908416907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09080a34260805216836001541617600155169060025416176002556106ba9081610107823960805181818161034e015261051e0152f35b600080fd5b634e487b7160e01b600052604160045260246000fd5b51906001600160a01b03821682036100d75756fe608060408181526004918236101561001657600080fd5b600092833560e01c9182631efbdcd3146104b157508163715018a6146104545781637cfd0f99146103e65781638da5cb5b146103be57816396354a9314610395578163aa8754e414610371578163b55e511d14610336578163c89aee831461020c578163d73e1792146101ed578163f003f2c0146101ca578163f2fde38b146100fb57508063f446c1d0146100dd5763ff3c4e92146100b457600080fd5b346100d957816003193601126100d957602090516b0219aada9b14535aca0000008152f35b5080fd5b50346100d957816003193601126100d95760209051631b1e43f48152f35b919050346101c65760203660031901126101c6576001600160a01b038235818116939192908490036101c25761012f61062c565b831561017057505082546001600160a01b0319811683178455167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08380a380f35b906020608492519162461bcd60e51b8352820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152fd5b8480fd5b8280fd5b5050346100d957816003193601126100d95760209051670de0b6b3a76400008152f35b5050346100d957816003193601126100d9576020906003549051908152f35b8383346100d957816003193601126100d957610226610519565b9182156102f357610239836003546104d6565b60035560018060a01b03806002541690817f2a0663121101e671ccf9b7a37475f4b7dd34994b8711f1bd2cc11fa8f0760d0b60208651888152a26001541690813b156101c657829160448392865195869384926340c10f1960e01b84528b8401528960248401525af180156102e7576102b7575b6020848451908152f35b67ffffffffffffffff82116102d4575060209350815283806102ad565b634e487b7160e01b815260418552602490fd5b508251903d90823e3d90fd5b815162461bcd60e51b8152602081860152601b60248201527f456d697373696f6e3a206e6f20746f6b656e7320746f20656d697400000000006044820152606490fd5b5050346100d957816003193601126100d957602090517f00000000000000000000000000000000000000000000000000000000000000008152f35b5050346100d957816003193601126100d95760209061038e610519565b9051908152f35b5050346100d957816003193601126100d95760015490516001600160a01b039091168152602090f35b5050346100d957816003193601126100d957905490516001600160a01b039091168152602090f35b9050346101c65760203660031901126101c657356001600160a01b03811691908290036101c6577ff8c91b1c6f821fe1e0f54a700d7971394e31753d44867fa41b80762dd3e2362c9160209161043a61062c565b600280546001600160a01b0319168317905551908152a180f35b83346104ae57806003193601126104ae5761046d61062c565b80546001600160a01b03198116825581906001600160a01b03167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08280a380f35b80fd5b8490346100d957816003193601126100d9576002546001600160a01b03168152602090f35b919082018092116104e357565b634e487b7160e01b600052601160045260246000fd5b919082039182116104e357565b818102929181159184041417156104e357565b6105437f0000000000000000000000000000000000000000000000000000000000000000426104f9565b670de0b6b3a76400009080820282810482036104e357631b1e43f490049063363c87e86105708284610506565b0463515acbdc6105808383610506565b049163879753c46105a1636c790fd06105998487610506565b049283610506565b04918501928386116104e3576105bd6105c3926105c8956104d6565b946104d6565b6104d6565b80821061060c576105d8916104f9565b906b0219aada9b14535aca0000009180830290838204036104e3570481039081116104e357600354610609916104f9565b90565b5050506003546b0219aada9b14535aca0000009081039081116104e35790565b6000546001600160a01b0316330361064057565b606460405162461bcd60e51b815260206004820152602060248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152fdfea26469706673582212202790dae590a9b9e318085065a25d907d159f5c1c8be7ebefda2208d5f776756564736f6c63430008120033a264697066735822122080aa64c36b22e48ceec0c48c05dcf2ecd616beb54e9cdb1320dd7134437c49ff64736f6c63430008120033",
  "deployedBytecode": "0x608080604052600436101561001357600080fd5b600090813560e01c63545e7c611461002a57600080fd5b307f0000000000000000000000000000000000000000000000000000000000000000146100ef5760403660031901126100ef576001600160a01b0390600435828116908190036100eb576024358381168091036100e7576107c1918284019284841067ffffffffffffffff8511176100d357916040939185936100f485398252602082015203019083f09081156100c8576020925060405191168152f35b6040513d84823e3d90fd5b634e487b7160e01b87526041600452602487fd5b8480fd5b8380fd5b5080fdfe60a0346100d757601f6107c138819003918201601f19168301916001600160401b038311848410176100dc5780849260409485528339810103126100d757610052602061004b836100f2565b92016100f2565b60008054336001600160a01b0319808316821784556040519590946001600160a01b03949093859391908416907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09080a34260805216836001541617600155169060025416176002556106ba9081610107823960805181818161034e015261051e0152f35b600080fd5b634e487b7160e01b600052604160045260246000fd5b51906001600160a01b03821682036100d75756fe608060408181526004918236101561001657600080fd5b600092833560e01c9182631efbdcd3146104b157508163715018a6146104545781637cfd0f99146103e65781638da5cb5b146103be57816396354a9314610395578163aa8754e414610371578163b55e511d14610336578163c89aee831461020c578163d73e1792146101ed578163f003f2c0146101ca578163f2fde38b146100fb57508063f446c1d0146100dd5763ff3c4e92146100b457600080fd5b346100d957816003193601126100d957602090516b0219aada9b14535aca0000008152f35b5080fd5b50346100d957816003193601126100d95760209051631b1e43f48152f35b919050346101c65760203660031901126101c6576001600160a01b038235818116939192908490036101c25761012f61062c565b831561017057505082546001600160a01b0319811683178455167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08380a380f35b906020608492519162461bcd60e51b8352820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152fd5b8480fd5b8280fd5b5050346100d957816003193601126100d95760209051670de0b6b3a76400008152f35b5050346100d957816003193601126100d9576020906003549051908152f35b8383346100d957816003193601126100d957610226610519565b9182156102f357610239836003546104d6565b60035560018060a01b03806002541690817f2a0663121101e671ccf9b7a37475f4b7dd34994b8711f1bd2cc11fa8f0760d0b60208651888152a26001541690813b156101c657829160448392865195869384926340c10f1960e01b84528b8401528960248401525af180156102e7576102b7575b6020848451908152f35b67ffffffffffffffff82116102d4575060209350815283806102ad565b634e487b7160e01b815260418552602490fd5b508251903d90823e3d90fd5b815162461bcd60e51b8152602081860152601b60248201527f456d697373696f6e3a206e6f20746f6b656e7320746f20656d697400000000006044820152606490fd5b5050346100d957816003193601126100d957602090517f00000000000000000000000000000000000000000000000000000000000000008152f35b5050346100d957816003193601126100d95760209061038e610519565b9051908152f35b5050346100d957816003193601126100d95760015490516001600160a01b039091168152602090f35b5050346100d957816003193601126100d957905490516001600160a01b039091168152602090f35b9050346101c65760203660031901126101c657356001600160a01b03811691908290036101c6577ff8c91b1c6f821fe1e0f54a700d7971394e31753d44867fa41b80762dd3e2362c9160209161043a61062c565b600280546001600160a01b0319168317905551908152a180f35b83346104ae57806003193601126104ae5761046d61062c565b80546001600160a01b03198116825581906001600160a01b03167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08280a380f35b80fd5b8490346100d957816003193601126100d9576002546001600160a01b03168152602090f35b919082018092116104e357565b634e487b7160e01b600052601160045260246000fd5b919082039182116104e357565b818102929181159184041417156104e357565b6105437f0000000000000000000000000000000000000000000000000000000000000000426104f9565b670de0b6b3a76400009080820282810482036104e357631b1e43f490049063363c87e86105708284610506565b0463515acbdc6105808383610506565b049163879753c46105a1636c790fd06105998487610506565b049283610506565b04918501928386116104e3576105bd6105c3926105c8956104d6565b946104d6565b6104d6565b80821061060c576105d8916104f9565b906b0219aada9b14535aca0000009180830290838204036104e3570481039081116104e357600354610609916104f9565b90565b5050506003546b0219aada9b14535aca0000009081039081116104e35790565b6000546001600160a01b0316330361064057565b606460405162461bcd60e51b815260206004820152602060248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152fdfea26469706673582212202790dae590a9b9e318085065a25d907d159f5c1c8be7ebefda2208d5f776756564736f6c63430008120033a264697066735822122080aa64c36b22e48ceec0c48c05dcf2ecd616beb54e9cdb1320dd7134437c49ff64736f6c63430008120033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "deploy(address,address)": {
        "params": {
          "emissionTarget": "The address of the emission target",
          "mentoToken": "The address of the MentoToken contract"
        },
        "returns": {
          "_0": "The address of the new Emission contract"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "deploy(address,address)": {
        "notice": "Deploys a new Emission contract"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}
