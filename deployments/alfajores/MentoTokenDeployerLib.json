{
  "address": "0x220Ab057Be0aA9395dBd8A444A0209F81dA4F54F",
  "abi": [],
  "transactionHash": "0x59511f0cd3092d18a29ce9995650fe6db505c6863e272b10179a25b0bae8ec3f",
  "receipt": {
    "to": null,
    "from": "0x56fD3F2bEE130e9867942D0F463a16fBE49B8d81",
    "contractAddress": "0x220Ab057Be0aA9395dBd8A444A0209F81dA4F54F",
    "transactionIndex": 0,
    "gasUsed": "1374854",
    "logsBloom": "0x
    "blockHash": "0xf42c141c36d72759e06517113794869985b0653eb81824740b3d9f220e96059f",
    "transactionHash": "0x59511f0cd3092d18a29ce9995650fe6db505c6863e272b10179a25b0bae8ec3f",
    "logs": [],
    "blockNumber": 22350455,
    "cumulativeGasUsed": "1374854",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 5,
  "solcInputHash": "673806e0359841b9f9b0bb70f553d1c9",
  "metadata": "{\"compiler\":{\"version\":\"0.8.18+commit.87f61d96\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"deploy(address[],uint256[],address)\":{\"params\":{\"allocationAmounts\":\"The percentage of tokens to be allocated to each recipient\",\"allocationRecipients\":\"The addresses of the initial token recipients\",\"emission\":\"The address of the emission contract\"},\"returns\":{\"_0\":\"The address of the new MentoToken contract\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"deploy(address[],uint256[],address)\":{\"notice\":\"Deploys a new MentoToken contract\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"lib/mento-core-gov/contracts/governance/deployers/MentoTokenDeployerLib.sol\":\"MentoTokenDeployerLib\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"lib/mento-core-gov/contracts/governance/MentoToken.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity 0.8.18;\\n\\nimport { ERC20Burnable, ERC20 } from \\\"openzeppelin-contracts-next/contracts/token/ERC20/extensions/ERC20Burnable.sol\\\";\\n\\n/**\\n * @title Mento Token\\n * @author Mento Labs\\n * @notice This contract represents the Mento Protocol Token which is a Burnable ERC20 token.\\n */\\ncontract MentoToken is ERC20Burnable {\\n  /// @notice The address of the emission contract that has the capability to emit new tokens.\\n  address public immutable emission;\\n\\n  /// @notice The total amount of tokens that can be minted by the emission contract.\\n  uint256 public immutable emissionSupply;\\n\\n  /// @notice The total amount of tokens that have been minted by the emission contract so far.\\n  uint256 public emittedAmount;\\n\\n  // solhint-disable max-line-length\\n  /**\\n   * @dev Constructor for the MentoToken contract.\\n   * @notice It mints and allocates the initial token supply among several contracts.\\n   * @param allocationRecipients_ The addresses of the initial token recipients.\\n   * @param allocationAmounts_ The percentage of tokens to be allocated to each recipient.\\n   * @param emission_ The address of the emission contract where the rest of the supply will be emitted.\\n   */\\n  // solhint-enable max-line-length\\n  constructor(\\n    address[] memory allocationRecipients_,\\n    uint256[] memory allocationAmounts_,\\n    address emission_\\n  ) ERC20(\\\"Mento Token\\\", \\\"MENTO\\\") {\\n    require(emission_ != address(0), \\\"MentoToken: emission is zero address\\\");\\n    require(\\n      allocationRecipients_.length == allocationAmounts_.length,\\n      \\\"MentoToken: recipients and amounts length mismatch\\\"\\n    );\\n\\n    uint256 supply = 1_000_000_000 * 10**decimals();\\n\\n    uint256 totalAllocated;\\n    for (uint256 i = 0; i < allocationRecipients_.length; i++) {\\n      require(allocationRecipients_[i] != address(0), \\\"MentoToken: allocation recipient is zero address\\\");\\n\\n      if (allocationAmounts_[i] == 0) continue;\\n\\n      totalAllocated += allocationAmounts_[i];\\n      _mint(allocationRecipients_[i], (supply * allocationAmounts_[i]) / 1000);\\n    }\\n    require(totalAllocated <= 1000, \\\"MentoToken: total allocation exceeds 100%\\\");\\n\\n    emission = emission_;\\n    emissionSupply = (supply * (1000 - totalAllocated)) / 1000;\\n  }\\n\\n  /**\\n   * @dev Allows the emission contract to mint new tokens up to the emission supply limit.\\n   * @notice This function can only be called by the emission contract and\\n   * only if the total emitted amount hasn't exceeded the emission supply.\\n   * @param target Address to which the newly minted tokens will be sent.\\n   * @param amount Amount of tokens to be minted.\\n   */\\n  function mint(address target, uint256 amount) external {\\n    require(msg.sender == emission, \\\"MentoToken: only emission contract\\\");\\n    require(emittedAmount + amount <= emissionSupply, \\\"MentoToken: emission supply exceeded\\\");\\n\\n    emittedAmount += amount;\\n    _mint(target, amount);\\n  }\\n}\\n\",\"keccak256\":\"0xe3bab35fa4af17a61e3fddc6f82701aa70ac01b8148278aa81183da31b66f595\",\"license\":\"GPL-3.0-or-later\"},\"lib/mento-core-gov/contracts/governance/deployers/MentoTokenDeployerLib.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity 0.8.18;\\n// solhint-disable max-line-length\\n\\nimport { MentoToken } from \\\"../MentoToken.sol\\\";\\n\\nlibrary MentoTokenDeployerLib {\\n  /**\\n   * @notice Deploys a new MentoToken contract\\n   * @param allocationRecipients The addresses of the initial token recipients\\n   * @param allocationAmounts The percentage of tokens to be allocated to each recipient\\n   * @param emission The address of the emission contract\\n   * @return The address of the new MentoToken contract\\n   */\\n  function deploy(\\n    address[] memory allocationRecipients,\\n    uint256[] memory allocationAmounts,\\n    address emission\\n  ) external returns (MentoToken) {\\n    return new MentoToken(allocationRecipients, allocationAmounts, emission);\\n  }\\n}\\n\",\"keccak256\":\"0xb784f3e2a2b9d3e1563b73e1faaf6f0d1d32cd15c7330d6e22d83cb0765e84ea\",\"license\":\"GPL-3.0-or-later\"},\"openzeppelin-contracts-next/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./extensions/IERC20Metadata.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, amount);\\n        _transfer(from, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        uint256 currentAllowance = allowance(owner, spender);\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(owner, spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `from` to `to`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, amount);\\n\\n        uint256 fromBalance = _balances[from];\\n        require(fromBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[from] = fromBalance - amount;\\n            // Overflow not possible: the sum of all balances is capped by totalSupply, and the sum is preserved by\\n            // decrementing then incrementing.\\n            _balances[to] += amount;\\n        }\\n\\n        emit Transfer(from, to, amount);\\n\\n        _afterTokenTransfer(from, to, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        unchecked {\\n            // Overflow not possible: balance + amount is at most totalSupply + amount, which is checked above.\\n            _balances[account] += amount;\\n        }\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n            // Overflow not possible: amount <= accountBalance <= totalSupply.\\n            _totalSupply -= amount;\\n        }\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\\n     *\\n     * Does not update the allowance amount in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Might emit an {Approval} event.\\n     */\\n    function _spendAllowance(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            require(currentAllowance >= amount, \\\"ERC20: insufficient allowance\\\");\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - amount);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0x4ffc0547c02ad22925310c585c0f166f8759e2648a09e9b489100c42f15dd98d\",\"license\":\"MIT\"},\"openzeppelin-contracts-next/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"openzeppelin-contracts-next/contracts/token/ERC20/extensions/ERC20Burnable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/extensions/ERC20Burnable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC20.sol\\\";\\nimport \\\"../../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Extension of {ERC20} that allows token holders to destroy both their own\\n * tokens and those that they have an allowance for, in a way that can be\\n * recognized off-chain (via event analysis).\\n */\\nabstract contract ERC20Burnable is Context, ERC20 {\\n    /**\\n     * @dev Destroys `amount` tokens from the caller.\\n     *\\n     * See {ERC20-_burn}.\\n     */\\n    function burn(uint256 amount) public virtual {\\n        _burn(_msgSender(), amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, deducting from the caller's\\n     * allowance.\\n     *\\n     * See {ERC20-_burn} and {ERC20-allowance}.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have allowance for ``accounts``'s tokens of at least\\n     * `amount`.\\n     */\\n    function burnFrom(address account, uint256 amount) public virtual {\\n        _spendAllowance(account, _msgSender(), amount);\\n        _burn(account, amount);\\n    }\\n}\\n\",\"keccak256\":\"0x0d19410453cda55960a818e02bd7c18952a5c8fe7a3036e81f0d599f34487a7b\",\"license\":\"MIT\"},\"openzeppelin-contracts-next/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca\",\"license\":\"MIT\"},\"openzeppelin-contracts-next/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x6080806040523461001c576117f5908161002282393081602d0152f35b600080fdfe608060405260043610156200001357600080fd5b6000803560e01c63e579f29c146200002a57600080fd5b307f0000000000000000000000000000000000000000000000000000000000000000146200024f5760603660031901126200024f576004359067ffffffffffffffff8083116200024b57366023840112156200024b5782600401356200009a62000094826200028f565b62000252565b938492828652602080960191826024809560051b8301019136831162000247578501905b82821062000226575050508235908082116200022257366023830112156200022257816004013592620000f562000094856200028f565b9288848681520186819660051b830101913683116200021e5790878b9201905b8382106200020e57505050506044359260018060a01b03968785168095036200020a5760405196611517908189019589871090871117620001f85750918a91889796959493620002a98939606085019060608652518091526080850193908b5b818110620001dc57505050838303828501525191828152019390885b8a828210620001c4575050505060400152039083f0918215620001b8575060405191168152f35b604051903d90823e3d90fd5b83518752889750958601959092019160010162000191565b82518c1686528a9950948401948d949092019160010162000175565b634e487b7160e01b8b5260416004528afd5b8880fd5b8135815290820190820162000115565b8980fd5b8580fd5b81356001600160a01b03811681036200020a578152908801908801620000be565b8780fd5b5080fd5b80fd5b6040519190601f01601f1916820167ffffffffffffffff8111838210176200027957604052565b634e487b7160e01b600052604160045260246000fd5b67ffffffffffffffff8111620002795760051b6020019056fe604060c08152346200075a5762001517803803806200001e816200079a565b92833981016060828203126200075a5781516001600160401b03908181116200075a57830190601f908382840112156200075a578251936200006a6200006486620007c0565b6200079a565b958694868852602080980188600598891b830101918483116200075a5789809101915b8383106200075f57509150508101518381116200075a578101918085840112156200075a578251620000c36200006482620007c0565b9389808684815201928a1b8201019283116200075a579089808c949301915b838310620007465750505050620000fa9101620007d8565b92620001056200077a565b92600b84526a26b2b73a37902a37b5b2b760a91b88850152620001276200077a565b878152644d454e544f60d81b89820152845190828211620006355760039182546001978882811c921680156200073b575b8d83101462000725578c8c888481879611620006ca575b505050508c9087831160011462000657576000926200064b575b505060001982851b1c191690871b1782555b805192831162000635576004988954908782811c921680156200062a575b8c8310146200061557818c91878796959411620005bb575b5050508a90858411600114620005505760009362000544575b505082861b92600019911b1c19161786555b6001600160a01b0384811615620004f557855183510362000497579083929160009687955b620002ef575b5050505050506103e8938483116200029b57506080528203908282116200028657506200025490620007ed565b0460a05251610cbd90816200085a82396080518181816103370152610419015260a05181818161044f01526105d00152f35b601190634e487b7160e01b6000525260246000fd5b8360849187519162461bcd60e51b8352820152602960248201527f4d656e746f546f6b656e3a20746f74616c20616c6c6f636174696f6e2065786360448201526865656473203130302560b81b6064820152fd5b90919293949681518810156200049057826200030c898462000820565b511615620004345762000320888662000820565b51156200042d57620003409062000338898762000820565b51906200084b565b96826200034e828462000820565b51166103e86200036a62000363848962000820565b51620007ed565b048115620003eb577fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8c6000928f6002620003a78382546200084b565b905585855284835280852082815401905551908152a35b6000198114620003d657850194939291908462000221565b601189634e487b7160e01b6000525260246000fd5b5060648a868d8f519262461bcd60e51b845283015260248201527f45524332303a206d696e7420746f20746865207a65726f2061646472657373006044820152fd5b96620003be565b8a5162461bcd60e51b8152808a018b9052603060248201527f4d656e746f546f6b656e3a20616c6c6f636174696f6e20726563697069656e7460448201526f206973207a65726f206164647265737360801b6064820152608490fd5b9662000227565b885162461bcd60e51b8152808801899052603260248201527f4d656e746f546f6b656e3a20726563697069656e747320616e6420616d6f756e6044820152710e8e640d8cadccee8d040dad2e6dac2e8c6d60731b6064820152608490fd5b885162461bcd60e51b81528088018990526024808201527f4d656e746f546f6b656e3a20656d697373696f6e206973207a65726f206164646044820152637265737360e01b6064820152608490fd5b015191503880620001ea565b60008b81528c812089965093929190601f198616908e5b828210620005a3575050851162000588575b50505050811b018655620001fc565b01519060f884600019921b161c191690553880808062000579565b8385015187558b989096019593840193018e62000567565b9091929394508b600052868360002092818801831c84019488106200060b575b918796959493918b9301901c01915b828110620005fb578d9250620001d1565b60008155869550899101620005ea565b93508293620005db565b60228b634e487b7160e01b6000525260246000fd5b91607f1691620001b9565b634e487b7160e01b600052604160045260246000fd5b01519050388062000189565b899350908d91601f1984168760005283600020936000905b828210620006a857505084116200068f575b505050811b0182556200019b565b015160001983871b60f8161c1916905538808062000681565b91929395968291958786015181550195019301908f918c96959493926200066f565b909192939450876000528360002092828701901c83019386106200071b575b918e8c928796959401901c01915b8281106200070b5750508c888f926200016f565b600081558594508b9101620006f7565b92508192620006e9565b634e487b7160e01b600052602260045260246000fd5b91607f169162000158565b825181528c9450918101918b9101620000e2565b600080fd5b81906200076c84620007d8565b81520191019089906200008d565b60408051919082016001600160401b038111838210176200063557604052565b6040519190601f01601f191682016001600160401b038111838210176200063557604052565b6001600160401b038111620006355760051b60200190565b51906001600160a01b03821682036200075a57565b906b033b2e3c9fd0803ce800000091808302928304036200080a57565b634e487b7160e01b600052601160045260246000fd5b8051821015620008355760209160051b010190565b634e487b7160e01b600052603260045260246000fd5b919082018092116200080a5756fe608060408181526004918236101561001657600080fd5b600092833560e01c918263023a7d7a146107bf5750816306fdde03146106e5578163095ea7b3146106bb57816318160ddd1461069c57816323b872dd1461065f578163313ce5671461064357816339509351146105f35781633fecb087146105b857816340c10f19146103ee57816342966c68146103d057816370a082311461039957816379cc679014610366578163827c049e1461032257816395d89b4114610203578163a457c2d71461015b57508063a9059cbb1461012b5763dd62ed3e146100e057600080fd5b34610127578060031936011261012757806020926100fc610824565b61010461083f565b6001600160a01b0391821683526001865283832091168252845220549051908152f35b5080fd5b503461012757806003193601126101275760209061015461014a610824565b6024359033610878565b5160018152f35b90508234610200578260031936011261020057610176610824565b918360243592338152600160205281812060018060a01b03861682526020522054908282106101af5760208561015485850387336109e6565b608490602086519162461bcd60e51b8352820152602560248201527f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f77604482015264207a65726f60d81b6064820152fd5b80fd5b838334610127578160031936011261012757805190828454600181811c90808316928315610318575b6020938484108114610305578388529081156102e95750600114610294575b505050829003601f01601f191682019267ffffffffffffffff841183851017610281575082918261027d9252826107db565b0390f35b634e487b7160e01b815260418552602490fd5b8787529192508591837f8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19b5b8385106102d5575050505083010185808061024b565b8054888601830152930192849082016102bf565b60ff1916878501525050151560051b840101905085808061024b565b634e487b7160e01b895260228a52602489fd5b91607f169161022c565b505034610127578160031936011261012757517f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03168152602090f35b5050346101275736600319011261020057610396610382610824565b60243590610391823383610ae8565b610b80565b80f35b5050346101275760203660031901126101275760209181906001600160a01b036103c1610824565b16815280845220549051908152f35b83903461012757602036600319011261012757610396903533610b80565b919050346105b457806003193601126105b457610409610824565b60243591906001600160a01b03907f0000000000000000000000000000000000000000000000000000000000000000821633036105665760055461044d8582610855565b7f000000000000000000000000000000000000000000000000000000000000000010610517578461047d91610855565b600555169283156104d557506020827fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef926104bb8795600254610855565b60025585855284835280852082815401905551908152a380f35b6020606492519162461bcd60e51b8352820152601f60248201527f45524332303a206d696e7420746f20746865207a65726f2061646472657373006044820152fd5b835162461bcd60e51b81526020818801526024808201527f4d656e746f546f6b656e3a20656d697373696f6e20737570706c7920657863656044820152631959195960e21b6064820152608490fd5b825162461bcd60e51b8152602081870152602260248201527f4d656e746f546f6b656e3a206f6e6c7920656d697373696f6e20636f6e74726160448201526118dd60f21b6064820152608490fd5b8280fd5b505034610127578160031936011261012757602090517f00000000000000000000000000000000000000000000000000000000000000008152f35b50503461012757806003193601126101275761015460209261063c610616610824565b338352600186528483206001600160a01b03821684528652918490205460243590610855565b90336109e6565b5050346101275781600319360112610127576020905160128152f35b50503461012757606036600319011261012757602090610154610680610824565b61068861083f565b60443591610697833383610ae8565b610878565b5050346101275781600319360112610127576020906002549051908152f35b5050346101275780600319360112610127576020906101546106db610824565b60243590336109e6565b83833461012757816003193601126101275780519082600354600181811c908083169283156107b5575b6020938484108114610305578388529081156102e9575060011461075f57505050829003601f01601f191682019267ffffffffffffffff841183851017610281575082918261027d9252826107db565b600387529192508591837fc2575a0e9e593c00f959f8c92f12db2869c3395a3b0502d05e2516446f71f85b5b8385106107a1575050505083010185808061024b565b80548886018301529301928490820161078b565b91607f169161070f565b8490346101275781600319360112610127576020906005548152f35b6020808252825181830181905290939260005b82811061081057505060409293506000838284010152601f8019910116010190565b8181018601518482016040015285016107ee565b600435906001600160a01b038216820361083a57565b600080fd5b602435906001600160a01b038216820361083a57565b9190820180921161086257565b634e487b7160e01b600052601160045260246000fd5b6001600160a01b039081169182156109935716918215610942576000828152806020526040812054918083106108ee57604082827fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef958760209652828652038282205586815220818154019055604051908152a3565b60405162461bcd60e51b815260206004820152602660248201527f45524332303a207472616e7366657220616d6f756e7420657863656564732062604482015265616c616e636560d01b6064820152608490fd5b60405162461bcd60e51b815260206004820152602360248201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260448201526265737360e81b6064820152608490fd5b60405162461bcd60e51b815260206004820152602560248201527f45524332303a207472616e736665722066726f6d20746865207a65726f206164604482015264647265737360d81b6064820152608490fd5b6001600160a01b03908116918215610a975716918215610a475760207f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925918360005260018252604060002085600052825280604060002055604051908152a3565b60405162461bcd60e51b815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f206164647265604482015261737360f01b6064820152608490fd5b60405162461bcd60e51b8152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f206164646044820152637265737360e01b6064820152608490fd5b9060018060a01b0380831660005260016020526040600020908216600052602052604060002054926000198403610b20575b50505050565b808410610b3b57610b329303916109e6565b38808080610b1a565b60405162461bcd60e51b815260206004820152601d60248201527f45524332303a20696e73756666696369656e7420616c6c6f77616e63650000006044820152606490fd5b6001600160a01b03168015610c3857600091818352826020526040832054818110610be857817fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef926020928587528684520360408620558060025403600255604051908152a3565b60405162461bcd60e51b815260206004820152602260248201527f45524332303a206275726e20616d6f756e7420657863656564732062616c616e604482015261636560f01b6064820152608490fd5b60405162461bcd60e51b815260206004820152602160248201527f45524332303a206275726e2066726f6d20746865207a65726f206164647265736044820152607360f81b6064820152608490fdfea2646970667358221220a1e4b67b3df398627c018e6ef57bf732e227365baea6e15e171987ee04115a5c64736f6c63430008120033a264697066735822122087bac0e26663130a8ea9337e5c81ba1d509d9132d351f6d6e1a39d394eadd28164736f6c63430008120033",
  "deployedBytecode": "",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "deploy(address[],uint256[],address)": {
        "params": {
          "allocationAmounts": "The percentage of tokens to be allocated to each recipient",
          "allocationRecipients": "The addresses of the initial token recipients",
          "emission": "The address of the emission contract"
        },
        "returns": {
          "_0": "The address of the new MentoToken contract"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "deploy(address[],uint256[],address)": {
        "notice": "Deploys a new MentoToken contract"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}
