{
  "address": "0x3670e0A9F8fA4C05108fDc56Bd0AB220491b863C",
  "abi": [],
  "transactionHash": "0xcb957b933c8d55408b12b5ef771e8cf423f9c6251201044aebfc8b1bf31a52bf",
  "receipt": {
    "to": null,
    "from": "0x56fD3F2bEE130e9867942D0F463a16fBE49B8d81",
    "contractAddress": "0x3670e0A9F8fA4C05108fDc56Bd0AB220491b863C",
    "transactionIndex": 0,
    "gasUsed": "1538188",
    "logsBloom": "0x
    "blockHash": "0xbe453ddaeda8698b45915eb2b68758ef22f2734c79175ffa31026de4549f674a",
    "transactionHash": "0xcb957b933c8d55408b12b5ef771e8cf423f9c6251201044aebfc8b1bf31a52bf",
    "logs": [],
    "blockNumber": 21449337,
    "cumulativeGasUsed": "1538188",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 2,
  "solcInputHash": "7e83205a170b12fd7688a59ae658f360",
  "metadata": "{\"compiler\":{\"version\":\"0.8.18+commit.87f61d96\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"deploy(bytes32,address,uint256,uint256,uint32,uint32,address,address,address)\":{\"params\":{\"airgrabEnds\":\"The timestamp when the airgrab ends\",\"airgrabLockCliff\":\"The cliff duration for the airgrabed tokens in weeks\",\"airgrabLockSlope\":\"The slope duration for the airgrabed tokens in weeks\",\"airgrabRoot\":\"The merkle root of the airgrab\",\"celoCommunityFund_\":\"The Celo community fund address where unclaimed tokens will be refunded to.\",\"fractalMaxAge\":\"The maximum age of the kyc for the airgrab\",\"fractalSigner\":\"The address of the fractal signer\",\"locking_\":\"The locking contract for veToken.\",\"token_\":\"The token address in the airgrab.\"},\"returns\":{\"_0\":\"Airgrab The address of the new Airgrab contract\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"deploy(bytes32,address,uint256,uint256,uint32,uint32,address,address,address)\":{\"notice\":\"Deploys a new Airgrab contract\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"lib/mento-core-gov/contracts/governance/deployers/AirgrabDeployerLib.sol\":\"AirgrabDeployerLib\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"lib/mento-core-gov/contracts/governance/Airgrab.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity 0.8.18;\\n\\nimport { MerkleProof } from \\\"openzeppelin-contracts-next/contracts/utils/cryptography/MerkleProof.sol\\\";\\nimport { IERC20 } from \\\"openzeppelin-contracts-next/contracts/token/ERC20/IERC20.sol\\\";\\nimport { SafeERC20 } from \\\"openzeppelin-contracts-next/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport { ECDSA } from \\\"openzeppelin-contracts-next/contracts/utils/cryptography/ECDSA.sol\\\";\\nimport { SignatureChecker } from \\\"openzeppelin-contracts-next/contracts/utils/cryptography/SignatureChecker.sol\\\";\\nimport { Strings } from \\\"openzeppelin-contracts-next/contracts/utils/Strings.sol\\\";\\nimport { ReentrancyGuard } from \\\"openzeppelin-contracts-next/contracts/security/ReentrancyGuard.sol\\\";\\n\\nimport { ILocking } from \\\"./locking/interfaces/ILocking.sol\\\";\\n\\n/**\\n * @title Airgrab\\n * @author Mento Labs\\n * @notice This contract implements a token airgrab gated by a MerkleTree and KYC using fractal.\\n * The airgrab also forces claimers to immediately lock their tokens as veTokens for a\\n * predetermined period.\\n */\\ncontract Airgrab is ReentrancyGuard {\\n  using SafeERC20 for IERC20;\\n\\n  uint32 public constant MAX_CLIFF_PERIOD = 103;\\n  uint32 public constant MAX_SLOPE_PERIOD = 104;\\n\\n  /**\\n   * @notice Emitted when tokens are claimed\\n   * @param claimer The account claiming the tokens\\n   * @param amount The amount of tokens being claimed\\n   * @param lockId The ID of the resulting veMento lock\\n   */\\n  event TokensClaimed(address indexed claimer, uint256 amount, uint256 lockId);\\n\\n  /**\\n   * @notice Emitted when tokens are drained\\n   * @param token The token addresses that was drained\\n   * @param amount The amount drained\\n   */\\n  event TokensDrained(address indexed token, uint256 amount);\\n\\n  /// @notice The root of the merkle tree.\\n  bytes32 public immutable root;\\n  /// @notice The Fractal Credential message signer for KYC/KYB.\\n  address public immutable fractalSigner;\\n  /// @notice The Fractal Credential maximum age in seconds\\n  uint256 public immutable fractalMaxAge;\\n  /// @notice The timestamp when the airgrab ends.\\n  uint256 public immutable endTimestamp;\\n  /// @notice The slope period that the airgrab will be locked for.\\n  uint32 public immutable slopePeriod;\\n  /// @notice The cliff period that the airgrab will be locked for.\\n  uint32 public immutable cliffPeriod;\\n  /// @notice The token in the airgrab.\\n  IERC20 public immutable token;\\n  /// @notice The locking contract for veToken.\\n  ILocking public immutable locking;\\n  /// @notice The Celo community fund address where unclaimed tokens will be refunded to.\\n  address payable public immutable celoCommunityFund;\\n\\n  /// @notice The map of addresses that have claimed\\n  mapping(address => bool) public claimed;\\n\\n  /**\\n   * @dev Check if the account has a valid kyc signature.\\n   * See: https://docs.developer.fractal.id/fractal-credentials-api\\n   *      https://github.com/trustfractal/credentials-api-verifiers\\n   * @notice This function checks the kyc signature with the data provided.\\n   * @param account The address of the account to check.\\n   * @param proof The kyc proof for the account.\\n   * @param validUntil The kyc proof valid until timestamp.\\n   * @param approvedAt The kyc proof approved at timestamp.\\n   * @param fractalId The kyc proof fractal id.\\n   */\\n  modifier hasValidKyc(\\n    address account,\\n    bytes memory proof,\\n    uint256 validUntil,\\n    uint256 approvedAt,\\n    string memory fractalId\\n  ) {\\n    require(block.timestamp < validUntil, \\\"Airgrab: KYC no longer valid\\\");\\n    require(fractalMaxAge == 0 || block.timestamp < approvedAt + fractalMaxAge, \\\"Airgrab: KYC not recent enough\\\");\\n    string memory accountString = Strings.toHexString(uint256(uint160(account)), 20);\\n\\n    bytes32 signedMessageHash = ECDSA.toEthSignedMessageHash(\\n      abi.encodePacked(\\n        accountString,\\n        \\\";\\\",\\n        fractalId,\\n        \\\";\\\",\\n        Strings.toString(approvedAt),\\n        \\\";\\\",\\n        Strings.toString(validUntil),\\n        \\\";\\\",\\n        //  TODO: if we parameterize this at the contract level\\n        // it has to go in storage because solidity only supports\\n        // immutable base types. One way to work around this would\\n        // be to record a hash of this string as an immutable\\n        // value during initialization and then pass the actual\\n        // string from the caller and just verify its hash.\\n        // Otherwise we can just keep it static here.\\n        \\\"level:plus;residency_not:ca,us\\\"\\n      )\\n    );\\n\\n    require(SignatureChecker.isValidSignatureNow(fractalSigner, signedMessageHash, proof), \\\"Airgrab: Invalid KYC\\\");\\n\\n    _;\\n  }\\n\\n  /**\\n   * @dev Check if the account can claim\\n   * @notice This modifier checks if the airgrab is still active,\\n   * if the account hasn't already claimed and if it's included\\n   * in the MerkleTree.\\n   * @param account The address of the account to check.\\n   * @param amount The amount of tokens to be claimed.\\n   * @param merkleProof The merkle proof for the account.\\n   */\\n  modifier canClaim(\\n    address account,\\n    uint256 amount,\\n    bytes32[] calldata merkleProof\\n  ) {\\n    require(block.timestamp <= endTimestamp, \\\"Airgrab: finished\\\");\\n    require(!claimed[account], \\\"Airgrab: already claimed\\\");\\n    bytes32 leaf = keccak256(bytes.concat(keccak256(abi.encode(account, amount))));\\n    require(MerkleProof.verify(merkleProof, root, leaf), \\\"Airgrab: not in tree\\\");\\n    _;\\n  }\\n\\n  /**\\n   * @dev Constructor for the Airgrab contract.\\n   * @notice It checks and configures all immutable params\\n   * @param root_ The root of the merkle tree.\\n   * @param fractalSigner_ The Fractal message signer for KYC/KYB.\\n   * @param fractalMaxAge_ The Fractal Credential maximum age in seconds.\\n   * @param endTimestamp_ The timestamp when the airgrab ends.\\n   * @param cliffPeriod_ The cliff period that the airgrab will be locked for.\\n   * @param slopePeriod_ The slope period that the airgrab will be locked for.\\n   * @param token_ The token address in the airgrab.\\n   * @param locking_ The locking contract for veToken.\\n   * @param celoCommunityFund_ The Celo community fund address where unclaimed tokens will be refunded to.\\n   */\\n  constructor(\\n    bytes32 root_,\\n    address fractalSigner_,\\n    uint256 fractalMaxAge_,\\n    uint256 endTimestamp_,\\n    uint32 cliffPeriod_,\\n    uint32 slopePeriod_,\\n    address token_,\\n    address locking_,\\n    address payable celoCommunityFund_\\n  ) {\\n    require(root_ != bytes32(0), \\\"Airgrab: invalid root\\\");\\n    require(fractalSigner_ != address(0), \\\"Airgrab: invalid fractal issuer\\\");\\n    // slither-disable-next-line timestamp\\n    require(endTimestamp_ > block.timestamp, \\\"Airgrab: invalid end timestamp\\\");\\n    require(cliffPeriod_ <= MAX_CLIFF_PERIOD, \\\"Airgrab: cliff period too large\\\");\\n    require(slopePeriod_ <= MAX_SLOPE_PERIOD, \\\"Airgrab: slope period too large\\\");\\n    require(token_ != address(0), \\\"Airgrab: invalid token\\\");\\n    require(locking_ != address(0), \\\"Airgrab: invalid locking\\\");\\n    require(celoCommunityFund_ != address(0), \\\"Airgrab: invalid celo community fund\\\");\\n\\n    root = root_;\\n    fractalSigner = fractalSigner_;\\n    fractalMaxAge = fractalMaxAge_;\\n    endTimestamp = endTimestamp_;\\n    cliffPeriod = cliffPeriod_;\\n    slopePeriod = slopePeriod_;\\n    token = IERC20(token_);\\n    locking = ILocking(locking_);\\n    celoCommunityFund = celoCommunityFund_;\\n\\n    require(token.approve(locking_, type(uint256).max), \\\"Airgrab: approval failed\\\");\\n  }\\n\\n  /**\\n   * @dev Allows `msg.sender` to claim `amount` tokens if the merkle proof and kyc is valid.\\n   * @notice This function can be called by anybody, but the (msg.sender, amount) pair\\n   * must be in the merkle tree, has to not have claimed yet, and must have\\n   * an associated KYC signature from Fractal. And the airgrab must not have ended.\\n   * The tokens will be locked for the cliff and slope configured at the contract level.\\n   * @param amount The amount of tokens to be claimed.\\n   * @param delegate The address of the account that gets voting power delegated\\n   * @param merkleProof The merkle proof for the account.\\n   * @param fractalProof The Fractal KYC proof for the account.\\n   * @param fractalProofValidUntil The Fractal KYC proof valid until timestamp.\\n   * @param fractalProofApprovedAt The Fractal KYC proof approved at timestamp.\\n   * @param fractalId The Fractal KYC ID.\\n   */\\n  function claim(\\n    uint96 amount,\\n    address delegate,\\n    bytes32[] calldata merkleProof,\\n    bytes calldata fractalProof,\\n    uint256 fractalProofValidUntil,\\n    uint256 fractalProofApprovedAt,\\n    string memory fractalId\\n  )\\n    external\\n    hasValidKyc(msg.sender, fractalProof, fractalProofValidUntil, fractalProofApprovedAt, fractalId)\\n    canClaim(msg.sender, amount, merkleProof)\\n    nonReentrant\\n  {\\n    require(token.balanceOf(address(this)) >= amount, \\\"Airgrab: insufficient balance\\\");\\n\\n    claimed[msg.sender] = true;\\n    uint256 lockId = locking.lock(msg.sender, delegate, amount, slopePeriod, cliffPeriod);\\n    emit TokensClaimed(msg.sender, amount, lockId);\\n  }\\n\\n  /**\\n   * @dev Allows the Celo community fund to reclaim any tokens after the airgrab has ended.\\n   * @notice This function can only be called after the airgrab has ended.\\n   * @param tokenToDrain Token is parameterized in case the contract has been sent\\n   *  tokens other than the airgrab token.\\n   */\\n  function drain(address tokenToDrain) external nonReentrant {\\n    // slither-disable-next-line timestamp\\n    require(block.timestamp > endTimestamp, \\\"Airgrab: not finished\\\");\\n    uint256 balance = IERC20(tokenToDrain).balanceOf(address(this));\\n    require(balance > 0, \\\"Airgrab: nothing to drain\\\");\\n    IERC20(tokenToDrain).safeTransfer(celoCommunityFund, balance);\\n    emit TokensDrained(tokenToDrain, balance);\\n  }\\n}\\n\",\"keccak256\":\"0xeefc97dcbf5c91209733184987da1075b727c47ccd487b283f7e3a7588ef7adc\",\"license\":\"GPL-3.0-or-later\"},\"lib/mento-core-gov/contracts/governance/deployers/AirgrabDeployerLib.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity 0.8.18;\\n// solhint-disable max-line-length\\n\\nimport { Airgrab } from \\\"../Airgrab.sol\\\";\\n\\nlibrary AirgrabDeployerLib {\\n  /**\\n   * @notice Deploys a new Airgrab contract\\n   * @param airgrabRoot The merkle root of the airgrab\\n   * @param fractalSigner The address of the fractal signer\\n   * @param fractalMaxAge The maximum age of the kyc for the airgrab\\n   * @param airgrabEnds The timestamp when the airgrab ends\\n   * @param airgrabLockCliff The cliff duration for the airgrabed tokens in weeks\\n   * @param airgrabLockSlope The slope duration for the airgrabed tokens in weeks\\n   * @param token_ The token address in the airgrab.\\n   * @param locking_ The locking contract for veToken.\\n   * @param celoCommunityFund_ The Celo community fund address where unclaimed tokens will be refunded to.\\n   * @return Airgrab The address of the new Airgrab contract\\n   */\\n  function deploy(\\n    bytes32 airgrabRoot,\\n    address fractalSigner,\\n    uint256 fractalMaxAge,\\n    uint256 airgrabEnds,\\n    uint32 airgrabLockCliff,\\n    uint32 airgrabLockSlope,\\n    address token_,\\n    address locking_,\\n    address payable celoCommunityFund_\\n  ) external returns (Airgrab) {\\n    return\\n      new Airgrab(\\n        airgrabRoot,\\n        fractalSigner,\\n        fractalMaxAge,\\n        airgrabEnds,\\n        airgrabLockCliff,\\n        airgrabLockSlope,\\n        token_,\\n        locking_,\\n        celoCommunityFund_\\n      );\\n  }\\n}\\n\",\"keccak256\":\"0x84799b2cdf79d71c122c74753cdca543d816aad5320a1a5a75aca08c4d8454d7\",\"license\":\"GPL-3.0-or-later\"},\"lib/mento-core-gov/contracts/governance/locking/interfaces/ILocking.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.18;\\n\\ninterface ILocking {\\n  function lock(\\n    address account,\\n    address delegate,\\n    uint96 amount,\\n    uint32 slope,\\n    uint32 cliff\\n  ) external returns (uint256);\\n}\\n\",\"keccak256\":\"0x7d98e1f5ff58de12b95cdb21f3294d103272001b05fd9485699a27de47be64b4\",\"license\":\"MIT\"},\"openzeppelin-contracts-next/contracts/interfaces/IERC1271.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC1271.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC1271 standard signature validation method for\\n * contracts as defined in https://eips.ethereum.org/EIPS/eip-1271[ERC-1271].\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC1271 {\\n    /**\\n     * @dev Should return whether the signature provided is valid for the provided data\\n     * @param hash      Hash of the data to be signed\\n     * @param signature Signature byte array associated with _data\\n     */\\n    function isValidSignature(bytes32 hash, bytes memory signature) external view returns (bytes4 magicValue);\\n}\\n\",\"keccak256\":\"0x0705a4b1b86d7b0bd8432118f226ba139c44b9dcaba0a6eafba2dd7d0639c544\",\"license\":\"MIT\"},\"openzeppelin-contracts-next/contracts/security/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x190dd6f8d592b7e4e930feb7f4313aeb8e1c4ad3154c27ce1cf6a512fc30d8cc\",\"license\":\"MIT\"},\"openzeppelin-contracts-next/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"openzeppelin-contracts-next/contracts/token/ERC20/extensions/draft-IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xf41ca991f30855bf80ffd11e9347856a517b977f0a6c2d52e6421a99b7840329\",\"license\":\"MIT\"},\"openzeppelin-contracts-next/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/draft-IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x9b72f93be69ca894d8492c244259615c4a742afc8d63720dbc8bb81087d9b238\",\"license\":\"MIT\"},\"openzeppelin-contracts-next/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf96f969e24029d43d0df89e59d365f277021dac62b48e1c1e3ebe0acdd7f1ca1\",\"license\":\"MIT\"},\"openzeppelin-contracts-next/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\",\"keccak256\":\"0xa4d1d62251f8574deb032a35fc948386a9b4de74b812d4f545a1ac120486b48a\",\"license\":\"MIT\"},\"openzeppelin-contracts-next/contracts/utils/cryptography/ECDSA.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/cryptography/ECDSA.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../Strings.sol\\\";\\n\\n/**\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\n *\\n * These functions can be used to verify that a message was signed by the holder\\n * of the private keys of a given address.\\n */\\nlibrary ECDSA {\\n    enum RecoverError {\\n        NoError,\\n        InvalidSignature,\\n        InvalidSignatureLength,\\n        InvalidSignatureS,\\n        InvalidSignatureV // Deprecated in v4.8\\n    }\\n\\n    function _throwError(RecoverError error) private pure {\\n        if (error == RecoverError.NoError) {\\n            return; // no error: do nothing\\n        } else if (error == RecoverError.InvalidSignature) {\\n            revert(\\\"ECDSA: invalid signature\\\");\\n        } else if (error == RecoverError.InvalidSignatureLength) {\\n            revert(\\\"ECDSA: invalid signature length\\\");\\n        } else if (error == RecoverError.InvalidSignatureS) {\\n            revert(\\\"ECDSA: invalid signature 's' value\\\");\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature` or error string. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     *\\n     * Documentation for signature generation:\\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\\n        if (signature.length == 65) {\\n            bytes32 r;\\n            bytes32 s;\\n            uint8 v;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                s := mload(add(signature, 0x40))\\n                v := byte(0, mload(add(signature, 0x60)))\\n            }\\n            return tryRecover(hash, v, r, s);\\n        } else {\\n            return (address(0), RecoverError.InvalidSignatureLength);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature`. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     */\\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\\n     *\\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address, RecoverError) {\\n        bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\\n        uint8 v = uint8((uint256(vs) >> 255) + 27);\\n        return tryRecover(hash, v, r, s);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\\n     *\\n     * _Available since v4.2._\\n     */\\n    function recover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address, RecoverError) {\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n        // the valid range for s in (301): 0 < s < secp256k1n \\u00f7 2 + 1, and for v in (302): v \\u2208 {27, 28}. Most\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n        //\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n        // these malleable signatures as well.\\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\\n            return (address(0), RecoverError.InvalidSignatureS);\\n        }\\n\\n        // If the signature is valid (and not malleable), return the signer address\\n        address signer = ecrecover(hash, v, r, s);\\n        if (signer == address(0)) {\\n            return (address(0), RecoverError.InvalidSignature);\\n        }\\n\\n        return (signer, RecoverError.NoError);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function recover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\\n        // 32 is the length in bytes of hash,\\n        // enforced by the type signature above\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\", hash));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n\\\", Strings.toString(s.length), s));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Typed Data, created from a\\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\\n     * to the one signed with the\\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\\n     * JSON-RPC method as part of EIP-712.\\n     *\\n     * See {recover}.\\n     */\\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19\\\\x01\\\", domainSeparator, structHash));\\n    }\\n}\\n\",\"keccak256\":\"0xda898fa084aa1ddfdb346e6a40459e00a59d87071cce7c315a46d648dd71d0ba\",\"license\":\"MIT\"},\"openzeppelin-contracts-next/contracts/utils/cryptography/MerkleProof.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/cryptography/MerkleProof.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev These functions deal with verification of Merkle Tree proofs.\\n *\\n * The tree and the proofs can be generated using our\\n * https://github.com/OpenZeppelin/merkle-tree[JavaScript library].\\n * You will find a quickstart guide in the readme.\\n *\\n * WARNING: You should avoid using leaf values that are 64 bytes long prior to\\n * hashing, or use a hash function other than keccak256 for hashing leaves.\\n * This is because the concatenation of a sorted pair of internal nodes in\\n * the merkle tree could be reinterpreted as a leaf value.\\n * OpenZeppelin's JavaScript library generates merkle trees that are safe\\n * against this attack out of the box.\\n */\\nlibrary MerkleProof {\\n    /**\\n     * @dev Returns true if a `leaf` can be proved to be a part of a Merkle tree\\n     * defined by `root`. For this, a `proof` must be provided, containing\\n     * sibling hashes on the branch from the leaf to the root of the tree. Each\\n     * pair of leaves and each pair of pre-images are assumed to be sorted.\\n     */\\n    function verify(\\n        bytes32[] memory proof,\\n        bytes32 root,\\n        bytes32 leaf\\n    ) internal pure returns (bool) {\\n        return processProof(proof, leaf) == root;\\n    }\\n\\n    /**\\n     * @dev Calldata version of {verify}\\n     *\\n     * _Available since v4.7._\\n     */\\n    function verifyCalldata(\\n        bytes32[] calldata proof,\\n        bytes32 root,\\n        bytes32 leaf\\n    ) internal pure returns (bool) {\\n        return processProofCalldata(proof, leaf) == root;\\n    }\\n\\n    /**\\n     * @dev Returns the rebuilt hash obtained by traversing a Merkle tree up\\n     * from `leaf` using `proof`. A `proof` is valid if and only if the rebuilt\\n     * hash matches the root of the tree. When processing the proof, the pairs\\n     * of leafs & pre-images are assumed to be sorted.\\n     *\\n     * _Available since v4.4._\\n     */\\n    function processProof(bytes32[] memory proof, bytes32 leaf) internal pure returns (bytes32) {\\n        bytes32 computedHash = leaf;\\n        for (uint256 i = 0; i < proof.length; i++) {\\n            computedHash = _hashPair(computedHash, proof[i]);\\n        }\\n        return computedHash;\\n    }\\n\\n    /**\\n     * @dev Calldata version of {processProof}\\n     *\\n     * _Available since v4.7._\\n     */\\n    function processProofCalldata(bytes32[] calldata proof, bytes32 leaf) internal pure returns (bytes32) {\\n        bytes32 computedHash = leaf;\\n        for (uint256 i = 0; i < proof.length; i++) {\\n            computedHash = _hashPair(computedHash, proof[i]);\\n        }\\n        return computedHash;\\n    }\\n\\n    /**\\n     * @dev Returns true if the `leaves` can be simultaneously proven to be a part of a merkle tree defined by\\n     * `root`, according to `proof` and `proofFlags` as described in {processMultiProof}.\\n     *\\n     * CAUTION: Not all merkle trees admit multiproofs. See {processMultiProof} for details.\\n     *\\n     * _Available since v4.7._\\n     */\\n    function multiProofVerify(\\n        bytes32[] memory proof,\\n        bool[] memory proofFlags,\\n        bytes32 root,\\n        bytes32[] memory leaves\\n    ) internal pure returns (bool) {\\n        return processMultiProof(proof, proofFlags, leaves) == root;\\n    }\\n\\n    /**\\n     * @dev Calldata version of {multiProofVerify}\\n     *\\n     * CAUTION: Not all merkle trees admit multiproofs. See {processMultiProof} for details.\\n     *\\n     * _Available since v4.7._\\n     */\\n    function multiProofVerifyCalldata(\\n        bytes32[] calldata proof,\\n        bool[] calldata proofFlags,\\n        bytes32 root,\\n        bytes32[] memory leaves\\n    ) internal pure returns (bool) {\\n        return processMultiProofCalldata(proof, proofFlags, leaves) == root;\\n    }\\n\\n    /**\\n     * @dev Returns the root of a tree reconstructed from `leaves` and sibling nodes in `proof`. The reconstruction\\n     * proceeds by incrementally reconstructing all inner nodes by combining a leaf/inner node with either another\\n     * leaf/inner node or a proof sibling node, depending on whether each `proofFlags` item is true or false\\n     * respectively.\\n     *\\n     * CAUTION: Not all merkle trees admit multiproofs. To use multiproofs, it is sufficient to ensure that: 1) the tree\\n     * is complete (but not necessarily perfect), 2) the leaves to be proven are in the opposite order they are in the\\n     * tree (i.e., as seen from right to left starting at the deepest layer and continuing at the next layer).\\n     *\\n     * _Available since v4.7._\\n     */\\n    function processMultiProof(\\n        bytes32[] memory proof,\\n        bool[] memory proofFlags,\\n        bytes32[] memory leaves\\n    ) internal pure returns (bytes32 merkleRoot) {\\n        // This function rebuild the root hash by traversing the tree up from the leaves. The root is rebuilt by\\n        // consuming and producing values on a queue. The queue starts with the `leaves` array, then goes onto the\\n        // `hashes` array. At the end of the process, the last hash in the `hashes` array should contain the root of\\n        // the merkle tree.\\n        uint256 leavesLen = leaves.length;\\n        uint256 totalHashes = proofFlags.length;\\n\\n        // Check proof validity.\\n        require(leavesLen + proof.length - 1 == totalHashes, \\\"MerkleProof: invalid multiproof\\\");\\n\\n        // The xxxPos values are \\\"pointers\\\" to the next value to consume in each array. All accesses are done using\\n        // `xxx[xxxPos++]`, which return the current value and increment the pointer, thus mimicking a queue's \\\"pop\\\".\\n        bytes32[] memory hashes = new bytes32[](totalHashes);\\n        uint256 leafPos = 0;\\n        uint256 hashPos = 0;\\n        uint256 proofPos = 0;\\n        // At each step, we compute the next hash using two values:\\n        // - a value from the \\\"main queue\\\". If not all leaves have been consumed, we get the next leaf, otherwise we\\n        //   get the next hash.\\n        // - depending on the flag, either another value for the \\\"main queue\\\" (merging branches) or an element from the\\n        //   `proof` array.\\n        for (uint256 i = 0; i < totalHashes; i++) {\\n            bytes32 a = leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++];\\n            bytes32 b = proofFlags[i] ? leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++] : proof[proofPos++];\\n            hashes[i] = _hashPair(a, b);\\n        }\\n\\n        if (totalHashes > 0) {\\n            return hashes[totalHashes - 1];\\n        } else if (leavesLen > 0) {\\n            return leaves[0];\\n        } else {\\n            return proof[0];\\n        }\\n    }\\n\\n    /**\\n     * @dev Calldata version of {processMultiProof}.\\n     *\\n     * CAUTION: Not all merkle trees admit multiproofs. See {processMultiProof} for details.\\n     *\\n     * _Available since v4.7._\\n     */\\n    function processMultiProofCalldata(\\n        bytes32[] calldata proof,\\n        bool[] calldata proofFlags,\\n        bytes32[] memory leaves\\n    ) internal pure returns (bytes32 merkleRoot) {\\n        // This function rebuild the root hash by traversing the tree up from the leaves. The root is rebuilt by\\n        // consuming and producing values on a queue. The queue starts with the `leaves` array, then goes onto the\\n        // `hashes` array. At the end of the process, the last hash in the `hashes` array should contain the root of\\n        // the merkle tree.\\n        uint256 leavesLen = leaves.length;\\n        uint256 totalHashes = proofFlags.length;\\n\\n        // Check proof validity.\\n        require(leavesLen + proof.length - 1 == totalHashes, \\\"MerkleProof: invalid multiproof\\\");\\n\\n        // The xxxPos values are \\\"pointers\\\" to the next value to consume in each array. All accesses are done using\\n        // `xxx[xxxPos++]`, which return the current value and increment the pointer, thus mimicking a queue's \\\"pop\\\".\\n        bytes32[] memory hashes = new bytes32[](totalHashes);\\n        uint256 leafPos = 0;\\n        uint256 hashPos = 0;\\n        uint256 proofPos = 0;\\n        // At each step, we compute the next hash using two values:\\n        // - a value from the \\\"main queue\\\". If not all leaves have been consumed, we get the next leaf, otherwise we\\n        //   get the next hash.\\n        // - depending on the flag, either another value for the \\\"main queue\\\" (merging branches) or an element from the\\n        //   `proof` array.\\n        for (uint256 i = 0; i < totalHashes; i++) {\\n            bytes32 a = leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++];\\n            bytes32 b = proofFlags[i] ? leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++] : proof[proofPos++];\\n            hashes[i] = _hashPair(a, b);\\n        }\\n\\n        if (totalHashes > 0) {\\n            return hashes[totalHashes - 1];\\n        } else if (leavesLen > 0) {\\n            return leaves[0];\\n        } else {\\n            return proof[0];\\n        }\\n    }\\n\\n    function _hashPair(bytes32 a, bytes32 b) private pure returns (bytes32) {\\n        return a < b ? _efficientHash(a, b) : _efficientHash(b, a);\\n    }\\n\\n    function _efficientHash(bytes32 a, bytes32 b) private pure returns (bytes32 value) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            mstore(0x00, a)\\n            mstore(0x20, b)\\n            value := keccak256(0x00, 0x40)\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xd466e8b07f4c6220eac16da5127f3ff142e65f0c15c03c7d38f257b02c8585e1\",\"license\":\"MIT\"},\"openzeppelin-contracts-next/contracts/utils/cryptography/SignatureChecker.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/cryptography/SignatureChecker.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./ECDSA.sol\\\";\\nimport \\\"../Address.sol\\\";\\nimport \\\"../../interfaces/IERC1271.sol\\\";\\n\\n/**\\n * @dev Signature verification helper that can be used instead of `ECDSA.recover` to seamlessly support both ECDSA\\n * signatures from externally owned accounts (EOAs) as well as ERC1271 signatures from smart contract wallets like\\n * Argent and Gnosis Safe.\\n *\\n * _Available since v4.1._\\n */\\nlibrary SignatureChecker {\\n    /**\\n     * @dev Checks if a signature is valid for a given signer and data hash. If the signer is a smart contract, the\\n     * signature is validated against that smart contract using ERC1271, otherwise it's validated using `ECDSA.recover`.\\n     *\\n     * NOTE: Unlike ECDSA signatures, contract signatures are revocable, and the outcome of this function can thus\\n     * change through time. It could return true at block N and false at block N+1 (or the opposite).\\n     */\\n    function isValidSignatureNow(\\n        address signer,\\n        bytes32 hash,\\n        bytes memory signature\\n    ) internal view returns (bool) {\\n        (address recovered, ECDSA.RecoverError error) = ECDSA.tryRecover(hash, signature);\\n        if (error == ECDSA.RecoverError.NoError && recovered == signer) {\\n            return true;\\n        }\\n\\n        (bool success, bytes memory result) = signer.staticcall(\\n            abi.encodeWithSelector(IERC1271.isValidSignature.selector, hash, signature)\\n        );\\n        return (success &&\\n            result.length == 32 &&\\n            abi.decode(result, (bytes32)) == bytes32(IERC1271.isValidSignature.selector));\\n    }\\n}\\n\",\"keccak256\":\"0xbc8d1f66b26e211a1f6f40a17453e9d5020ec96749014379205cff100809884c\",\"license\":\"MIT\"},\"openzeppelin-contracts-next/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1);\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator,\\n        Rounding rounding\\n    ) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10**64) {\\n                value /= 10**64;\\n                result += 64;\\n            }\\n            if (value >= 10**32) {\\n                value /= 10**32;\\n                result += 32;\\n            }\\n            if (value >= 10**16) {\\n                value /= 10**16;\\n                result += 16;\\n            }\\n            if (value >= 10**8) {\\n                value /= 10**8;\\n                result += 8;\\n            }\\n            if (value >= 10**4) {\\n                value /= 10**4;\\n                result += 4;\\n            }\\n            if (value >= 10**2) {\\n                value /= 10**2;\\n                result += 2;\\n            }\\n            if (value >= 10**1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10**result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result * 8) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa1e8e83cd0087785df04ac79fb395d9f3684caeaf973d9e2c71caef723a3a5d6\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x6080806040523461001c57611b05908161002282393081602c0152f35b600080fdfe608080604052600436101561001357600080fd5b6000803560e01c6373564ab01461002957600080fd5b307f00000000000000000000000000000000000000000000000000000000000000001461016c5761012080600319360112610168576001600160a01b0360243581811694919290859003610164576084359463ffffffff8087168097036101605760a4359081168091036101605760c43585811680910361015c5760e4359086821680920361015857610104359287841680940361015457611960998a88019588871067ffffffffffffffff8811176101405788999a9b98979861017089396004358752602087015260443560408701526064356060870152608086015260a085015260c084015260e083015261010082015203019083f0908115610135576020925060405191168152f35b6040513d84823e3d90fd5b634e487b7160e01b8b52604160045260248bfd5b8880fd5b8780fd5b8680fd5b8580fd5b8380fd5b5080fd5b80fdfe6101a0604081815234620004bd578190620019608038038091620000248286620004c2565b843961012092839181010312620004bd578251602062000046818601620004fc565b92808601519160608701516200005f6080890162000511565b6200006d60a08a0162000511565b906200007c60c08b01620004fc565b926200008b60e08c01620004fc565b6101009b8c0151996001600160a01b03808c169a929992908b8d03620004bd57600097600189558215620004795781841615620004355742861115620003f15763ffffffff606781891611620003ad57606890891611620003695781169a8b156200032557169a8b15620002e15715620002915760805260a05260c05260e05288528852808261014095808752604461016098808a526101809a8b528751958693849263095ea7b360e01b8452600484015260001960248401525af1918215620002855781926200023d575b505015620001fb5750519361143c95866200052487396080518681816103c00152610963015260a0518681816103f901526107fa015260c0518681816106320152610ed5015260e0518681816101280152818161049b01526108250152518581816105200152610a44015251848181610a6b0152610e9b01525183818160cf01526109aa015251828181610aa10152610e3301525181818161019e01526104d40152f35b606491519062461bcd60e51b82526004820152601860248201527f416972677261623a20617070726f76616c206661696c656400000000000000006044820152fd5b9091508281813d83116200027d575b620002588183620004c2565b81010312620002795751908115158203620002765750388062000157565b80fd5b5080fd5b503d6200024c565b508351903d90823e3d90fd5b885162461bcd60e51b8152600481018990526024808201527f416972677261623a20696e76616c69642063656c6f20636f6d6d756e69747920604482015263199d5b9960e21b6064820152608490fd5b895162461bcd60e51b8152600481018a9052601860248201527f416972677261623a20696e76616c6964206c6f636b696e6700000000000000006044820152606490fd5b8a5162461bcd60e51b8152600481018b9052601660248201527f416972677261623a20696e76616c696420746f6b656e000000000000000000006044820152606490fd5b8a5162461bcd60e51b8152600481018b9052601f60248201527f416972677261623a20736c6f706520706572696f6420746f6f206c61726765006044820152606490fd5b8b5162461bcd60e51b8152600481018c9052601f60248201527f416972677261623a20636c69666620706572696f6420746f6f206c61726765006044820152606490fd5b8a5162461bcd60e51b8152600481018b9052601e60248201527f416972677261623a20696e76616c696420656e642074696d657374616d7000006044820152606490fd5b8a5162461bcd60e51b8152600481018b9052601f60248201527f416972677261623a20696e76616c6964206672616374616c20697373756572006044820152606490fd5b8a5162461bcd60e51b8152600481018b9052601560248201527f416972677261623a20696e76616c696420726f6f7400000000000000000000006044820152606490fd5b600080fd5b601f909101601f19168101906001600160401b03821190821017620004e657604052565b634e487b7160e01b600052604160045260246000fd5b51906001600160a01b0382168203620004bd57565b519063ffffffff82168203620004bd5756fe608080604052600436101561001357600080fd5b60003560e01c9081630b219c6314610ebf575080632f66194614610e7e5780634196666414610e6257806358ad5a8b14610e1d5780635dff1c2a14610544578063757dc92d1461050357806392182359146104be578063a85adeab14610483578063aad83ff214610467578063c884ef8314610428578063d934bcc0146103e3578063ebf0c717146103a8578063ece53132146101035763fc0c546a146100b957600080fd5b346100fe5760003660031901126100fe576040517f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03168152602090f35b600080fd5b346100fe576020806003193601126100fe5761011d610ef8565b90610126610fc2565b7f000000000000000000000000000000000000000000000000000000000000000042111561036c576040516370a0823160e01b81523060048201526001600160a01b03928316928282602481875afa91821561036057600092610331575b5081156102ec5760405163a9059cbb60e01b8482019081527f0000000000000000000000000000000000000000000000000000000000000000929092166001600160a01b03166024820152604480820184905281526102379160009081906101ed606485610f2a565b604051936101fa85610f0e565b8785527f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c656488860152519082895af1610230611018565b9086611048565b805180610271575b847f7ca3046ca99d7152bf8cb59d68d9a4f131c6b0dadfd2307f65609db067d5259a8585604051908152a26001600055005b818491810103126100fe578201518015908115036100fe5761029457838061023f565b60405162461bcd60e51b815260048101839052602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b6064820152608490fd5b60405162461bcd60e51b815260048101849052601960248201527f416972677261623a206e6f7468696e6720746f20647261696e000000000000006044820152606490fd5b9091508281813d8311610359575b6103498183610f2a565b810103126100fe57519084610184565b503d61033f565b6040513d6000823e3d90fd5b6064906040519062461bcd60e51b825260048201526015602482015274105a5c99dc98588e881b9bdd08199a5b9a5cda1959605a1b6044820152fd5b346100fe5760003660031901126100fe5760206040517f00000000000000000000000000000000000000000000000000000000000000008152f35b346100fe5760003660031901126100fe576040517f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03168152602090f35b346100fe5760203660031901126100fe576001600160a01b03610449610ef8565b166000526001602052602060ff604060002054166040519015158152f35b346100fe5760003660031901126100fe57602060405160688152f35b346100fe5760003660031901126100fe5760206040517f00000000000000000000000000000000000000000000000000000000000000008152f35b346100fe5760003660031901126100fe576040517f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03168152602090f35b346100fe5760003660031901126100fe57602060405163ffffffff7f0000000000000000000000000000000000000000000000000000000000000000168152f35b346100fe5760e03660031901126100fe576004356001600160601b03811681036100fe57602435906001600160a01b03821682036100fe5767ffffffffffffffff80604435116100fe573660236044350112156100fe578060443560040135116100fe573660246044356004013560051b6044350101116100fe576064358181116100fe57366023820112156100fe578060040135908282116100fe5736602483830101116100fe5760c435908382116100fe57366023830112156100fe5761061a610625923690602481600401359101610f68565b926024369201610f68565b90608435421015610dd8577f00000000000000000000000000000000000000000000000000000000000000008015908115610dc1575b5015610d7c573360405193606085019085821090821117610d6657604052602a84526040366020860137835115610d505760306020850153835160011015610d50576078602185015360295b60018111610d075750610cc35761081e9261078360426106c860a43561110a565b6106d360843561110a565b9460405195869260206106ef8186019889815193849201610f9f565b840192603b60f81b93846020820152610712825180936020602185019101610f9f565b0183602182015261072d825180936020602285019101610f9f565b01826022820152610748825180936020602385019101610f9f565b019060238201527f6c6576656c3a706c75733b7265736964656e63795f6e6f743a63612c757300006024820152036022810185520183610f2a565b6107f5603a610792845161110a565b936040519384916107e660208401977f19457468657265756d205369676e6564204d6573736167653a0a00000000000089526107d78151809260208989019101610f9f565b84019151809386840190610f9f565b0103601a810184520182610f2a565b5190207f0000000000000000000000000000000000000000000000000000000000000000611272565b15610c87577f00000000000000000000000000000000000000000000000000000000000000004211610c4e5733600052600160205260ff60406000205416610c09576040805133602082019081526001600160601b0384169282019290925261089481606081015b03601f198101835282610f2a565b51902060405160208101918252602081526108ae81610f0e565b519020604051906108cb60206044356004013560051b0183610f2a565b60443560048101358352602401602083015b60246044356004013560051b60443501018210610bf9575050916000925b825184101561095f5760208460051b840101519081811060001461094e5760005260205260406000205b92600019811461093857600101926108fb565b634e487b7160e01b600052601160045260246000fd5b906000526020526040600020610925565b84907f000000000000000000000000000000000000000000000000000000000000000003610bbd5761098f610fc2565b6040516370a0823160e01b81523060048201526020816024817f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03165afa90811561036057600091610b8b575b506001600160601b03831611610b46573360005260016020526040600020600160ff1982541617905560405190630e9176bd60e31b825233600483015260018060a01b031660248201526001600160601b038216604482015263ffffffff807f00000000000000000000000000000000000000000000000000000000000000001660648301527f000000000000000000000000000000000000000000000000000000000000000016608482015260208160a481600060018060a01b037f0000000000000000000000000000000000000000000000000000000000000000165af190811561036057600091610b14575b506001600160601b036040519216825260208201527f9923b4306c6c030f2bdfbf156517d5983b87e15b96176da122cd4f2effa4ba7b60403392a26001600055005b90506020813d602011610b3e575b81610b2f60209383610f2a565b810103126100fe575182610ad2565b3d9150610b22565b60405162461bcd60e51b815260206004820152601d60248201527f416972677261623a20696e73756666696369656e742062616c616e63650000006044820152606490fd5b90506020813d602011610bb5575b81610ba660209383610f2a565b810103126100fe5751836109e3565b3d9150610b99565b60405162461bcd60e51b8152602060048201526014602482015273416972677261623a206e6f7420696e207472656560601b6044820152606490fd5b81358152602091820191016108dd565b60405162461bcd60e51b815260206004820152601860248201527f416972677261623a20616c726561647920636c61696d656400000000000000006044820152606490fd5b60405162461bcd60e51b8152602060048201526011602482015270105a5c99dc98588e88199a5b9a5cda1959607a1b6044820152606490fd5b60405162461bcd60e51b8152602060048201526014602482015273416972677261623a20496e76616c6964204b594360601b6044820152606490fd5b606460405162461bcd60e51b815260206004820152602060248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e746044820152fd5b906010600f82161015610d50578451821015610d50576f181899199a1a9b1b9c1cb0b131b232b360811b600f82161a8583016020015360041c90801561093857600019016106a7565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b60405162461bcd60e51b815260206004820152601e60248201527f416972677261623a204b5943206e6f7420726563656e7420656e6f75676800006044820152606490fd5b905060a4359081018091116109385742108661065b565b60405162461bcd60e51b815260206004820152601c60248201527f416972677261623a204b5943206e6f206c6f6e6765722076616c6964000000006044820152606490fd5b346100fe5760003660031901126100fe576040517f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03168152602090f35b346100fe5760003660031901126100fe57602060405160678152f35b346100fe5760003660031901126100fe57602060405163ffffffff7f0000000000000000000000000000000000000000000000000000000000000000168152f35b346100fe5760003660031901126100fe576020907f00000000000000000000000000000000000000000000000000000000000000008152f35b600435906001600160a01b03821682036100fe57565b6040810190811067ffffffffffffffff821117610d6657604052565b90601f8019910116810190811067ffffffffffffffff821117610d6657604052565b67ffffffffffffffff8111610d6657601f01601f191660200190565b929192610f7482610f4c565b91610f826040519384610f2a565b8294818452818301116100fe578281602093846000960137010152565b60005b838110610fb25750506000910152565b8181015183820152602001610fa2565b600260005414610fd3576002600055565b60405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606490fd5b3d15611043573d9061102982610f4c565b916110376040519384610f2a565b82523d6000602084013e565b606090565b919290156110aa575081511561105c575090565b3b156110655790565b60405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606490fd5b8251909150156110bd5750805190602001fd5b60405162461bcd60e51b8152602060048201529081906110e19060248301906110e5565b0390fd5b906020916110fe81518092818552858086019101610f9f565b601f01601f1916010190565b806000917a184f03e93ff9f4daa797ed6e38ed64bf6a1f01000000000000000080821015611264575b506d04ee2d6d415b85acef810000000080831015611255575b50662386f26fc1000080831015611246575b506305f5e10080831015611237575b5061271080831015611228575b506064821015611218575b600a8092101561120e575b600190816021818601956111a387610f4c565b966111b16040519889610f2a565b8088526111c0601f1991610f4c565b01366020890137860101905b6111d8575b5050505090565b600019019083906f181899199a1a9b1b9c1cb0b131b232b360811b8282061a835304918215611209579190826111cc565b6111d1565b9160010191611190565b9190606460029104910191611185565b6004919392049101913861117a565b6008919392049101913861116d565b6010919392049101913861115e565b6020919392049101913861114c565b604093508104915038611133565b909161127e818461133f565b600581101561132957159081611313575b5061130b5760009182916040516112ca816108866020820194630b135d3f60e11b998a875260248401526040604484015260648301906110e5565b51915afa906112d7611018565b826112ff575b826112e757505090565b9091506020818051810103126100fe57602001511490565b805160201492506112dd565b505050600190565b6001600160a01b0384811691161490503861128f565b634e487b7160e01b600052602160045260246000fd5b90604181511460001461136d57611369916020820151906060604084015193015160001a90611377565b9091565b5050600090600290565b9291907f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a083116113fa5791608094939160ff602094604051948552168484015260408301526060820152600093849182805260015afa156113ed5781516001600160a01b038116156113e7579190565b50600190565b50604051903d90823e3d90fd5b5050505060009060039056fea26469706673582212200729b119be7af5eb7997e03946a34cbfeeeaa23b40a4dd0c5ac6b83bdd7450af64736f6c63430008120033a2646970667358221220a170a2453414d300372b19e7784c69fe2cf575b9b34a6e5c1393af736c987cc664736f6c63430008120033",
  "deployedBytecode": "0x608080604052600436101561001357600080fd5b6000803560e01c6373564ab01461002957600080fd5b307f00000000000000000000000000000000000000000000000000000000000000001461016c5761012080600319360112610168576001600160a01b0360243581811694919290859003610164576084359463ffffffff8087168097036101605760a4359081168091036101605760c43585811680910361015c5760e4359086821680920361015857610104359287841680940361015457611960998a88019588871067ffffffffffffffff8811176101405788999a9b98979861017089396004358752602087015260443560408701526064356060870152608086015260a085015260c084015260e083015261010082015203019083f0908115610135576020925060405191168152f35b6040513d84823e3d90fd5b634e487b7160e01b8b52604160045260248bfd5b8880fd5b8780fd5b8680fd5b8580fd5b8380fd5b5080fd5b80fdfe6101a0604081815234620004bd578190620019608038038091620000248286620004c2565b843961012092839181010312620004bd578251602062000046818601620004fc565b92808601519160608701516200005f6080890162000511565b6200006d60a08a0162000511565b906200007c60c08b01620004fc565b926200008b60e08c01620004fc565b6101009b8c0151996001600160a01b03808c169a929992908b8d03620004bd57600097600189558215620004795781841615620004355742861115620003f15763ffffffff606781891611620003ad57606890891611620003695781169a8b156200032557169a8b15620002e15715620002915760805260a05260c05260e05288528852808261014095808752604461016098808a526101809a8b528751958693849263095ea7b360e01b8452600484015260001960248401525af1918215620002855781926200023d575b505015620001fb5750519361143c95866200052487396080518681816103c00152610963015260a0518681816103f901526107fa015260c0518681816106320152610ed5015260e0518681816101280152818161049b01526108250152518581816105200152610a44015251848181610a6b0152610e9b01525183818160cf01526109aa015251828181610aa10152610e3301525181818161019e01526104d40152f35b606491519062461bcd60e51b82526004820152601860248201527f416972677261623a20617070726f76616c206661696c656400000000000000006044820152fd5b9091508281813d83116200027d575b620002588183620004c2565b81010312620002795751908115158203620002765750388062000157565b80fd5b5080fd5b503d6200024c565b508351903d90823e3d90fd5b885162461bcd60e51b8152600481018990526024808201527f416972677261623a20696e76616c69642063656c6f20636f6d6d756e69747920604482015263199d5b9960e21b6064820152608490fd5b895162461bcd60e51b8152600481018a9052601860248201527f416972677261623a20696e76616c6964206c6f636b696e6700000000000000006044820152606490fd5b8a5162461bcd60e51b8152600481018b9052601660248201527f416972677261623a20696e76616c696420746f6b656e000000000000000000006044820152606490fd5b8a5162461bcd60e51b8152600481018b9052601f60248201527f416972677261623a20736c6f706520706572696f6420746f6f206c61726765006044820152606490fd5b8b5162461bcd60e51b8152600481018c9052601f60248201527f416972677261623a20636c69666620706572696f6420746f6f206c61726765006044820152606490fd5b8a5162461bcd60e51b8152600481018b9052601e60248201527f416972677261623a20696e76616c696420656e642074696d657374616d7000006044820152606490fd5b8a5162461bcd60e51b8152600481018b9052601f60248201527f416972677261623a20696e76616c6964206672616374616c20697373756572006044820152606490fd5b8a5162461bcd60e51b8152600481018b9052601560248201527f416972677261623a20696e76616c696420726f6f7400000000000000000000006044820152606490fd5b600080fd5b601f909101601f19168101906001600160401b03821190821017620004e657604052565b634e487b7160e01b600052604160045260246000fd5b51906001600160a01b0382168203620004bd57565b519063ffffffff82168203620004bd5756fe608080604052600436101561001357600080fd5b60003560e01c9081630b219c6314610ebf575080632f66194614610e7e5780634196666414610e6257806358ad5a8b14610e1d5780635dff1c2a14610544578063757dc92d1461050357806392182359146104be578063a85adeab14610483578063aad83ff214610467578063c884ef8314610428578063d934bcc0146103e3578063ebf0c717146103a8578063ece53132146101035763fc0c546a146100b957600080fd5b346100fe5760003660031901126100fe576040517f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03168152602090f35b600080fd5b346100fe576020806003193601126100fe5761011d610ef8565b90610126610fc2565b7f000000000000000000000000000000000000000000000000000000000000000042111561036c576040516370a0823160e01b81523060048201526001600160a01b03928316928282602481875afa91821561036057600092610331575b5081156102ec5760405163a9059cbb60e01b8482019081527f0000000000000000000000000000000000000000000000000000000000000000929092166001600160a01b03166024820152604480820184905281526102379160009081906101ed606485610f2a565b604051936101fa85610f0e565b8785527f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c656488860152519082895af1610230611018565b9086611048565b805180610271575b847f7ca3046ca99d7152bf8cb59d68d9a4f131c6b0dadfd2307f65609db067d5259a8585604051908152a26001600055005b818491810103126100fe578201518015908115036100fe5761029457838061023f565b60405162461bcd60e51b815260048101839052602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b6064820152608490fd5b60405162461bcd60e51b815260048101849052601960248201527f416972677261623a206e6f7468696e6720746f20647261696e000000000000006044820152606490fd5b9091508281813d8311610359575b6103498183610f2a565b810103126100fe57519084610184565b503d61033f565b6040513d6000823e3d90fd5b6064906040519062461bcd60e51b825260048201526015602482015274105a5c99dc98588e881b9bdd08199a5b9a5cda1959605a1b6044820152fd5b346100fe5760003660031901126100fe5760206040517f00000000000000000000000000000000000000000000000000000000000000008152f35b346100fe5760003660031901126100fe576040517f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03168152602090f35b346100fe5760203660031901126100fe576001600160a01b03610449610ef8565b166000526001602052602060ff604060002054166040519015158152f35b346100fe5760003660031901126100fe57602060405160688152f35b346100fe5760003660031901126100fe5760206040517f00000000000000000000000000000000000000000000000000000000000000008152f35b346100fe5760003660031901126100fe576040517f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03168152602090f35b346100fe5760003660031901126100fe57602060405163ffffffff7f0000000000000000000000000000000000000000000000000000000000000000168152f35b346100fe5760e03660031901126100fe576004356001600160601b03811681036100fe57602435906001600160a01b03821682036100fe5767ffffffffffffffff80604435116100fe573660236044350112156100fe578060443560040135116100fe573660246044356004013560051b6044350101116100fe576064358181116100fe57366023820112156100fe578060040135908282116100fe5736602483830101116100fe5760c435908382116100fe57366023830112156100fe5761061a610625923690602481600401359101610f68565b926024369201610f68565b90608435421015610dd8577f00000000000000000000000000000000000000000000000000000000000000008015908115610dc1575b5015610d7c573360405193606085019085821090821117610d6657604052602a84526040366020860137835115610d505760306020850153835160011015610d50576078602185015360295b60018111610d075750610cc35761081e9261078360426106c860a43561110a565b6106d360843561110a565b9460405195869260206106ef8186019889815193849201610f9f565b840192603b60f81b93846020820152610712825180936020602185019101610f9f565b0183602182015261072d825180936020602285019101610f9f565b01826022820152610748825180936020602385019101610f9f565b019060238201527f6c6576656c3a706c75733b7265736964656e63795f6e6f743a63612c757300006024820152036022810185520183610f2a565b6107f5603a610792845161110a565b936040519384916107e660208401977f19457468657265756d205369676e6564204d6573736167653a0a00000000000089526107d78151809260208989019101610f9f565b84019151809386840190610f9f565b0103601a810184520182610f2a565b5190207f0000000000000000000000000000000000000000000000000000000000000000611272565b15610c87577f00000000000000000000000000000000000000000000000000000000000000004211610c4e5733600052600160205260ff60406000205416610c09576040805133602082019081526001600160601b0384169282019290925261089481606081015b03601f198101835282610f2a565b51902060405160208101918252602081526108ae81610f0e565b519020604051906108cb60206044356004013560051b0183610f2a565b60443560048101358352602401602083015b60246044356004013560051b60443501018210610bf9575050916000925b825184101561095f5760208460051b840101519081811060001461094e5760005260205260406000205b92600019811461093857600101926108fb565b634e487b7160e01b600052601160045260246000fd5b906000526020526040600020610925565b84907f000000000000000000000000000000000000000000000000000000000000000003610bbd5761098f610fc2565b6040516370a0823160e01b81523060048201526020816024817f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03165afa90811561036057600091610b8b575b506001600160601b03831611610b46573360005260016020526040600020600160ff1982541617905560405190630e9176bd60e31b825233600483015260018060a01b031660248201526001600160601b038216604482015263ffffffff807f00000000000000000000000000000000000000000000000000000000000000001660648301527f000000000000000000000000000000000000000000000000000000000000000016608482015260208160a481600060018060a01b037f0000000000000000000000000000000000000000000000000000000000000000165af190811561036057600091610b14575b506001600160601b036040519216825260208201527f9923b4306c6c030f2bdfbf156517d5983b87e15b96176da122cd4f2effa4ba7b60403392a26001600055005b90506020813d602011610b3e575b81610b2f60209383610f2a565b810103126100fe575182610ad2565b3d9150610b22565b60405162461bcd60e51b815260206004820152601d60248201527f416972677261623a20696e73756666696369656e742062616c616e63650000006044820152606490fd5b90506020813d602011610bb5575b81610ba660209383610f2a565b810103126100fe5751836109e3565b3d9150610b99565b60405162461bcd60e51b8152602060048201526014602482015273416972677261623a206e6f7420696e207472656560601b6044820152606490fd5b81358152602091820191016108dd565b60405162461bcd60e51b815260206004820152601860248201527f416972677261623a20616c726561647920636c61696d656400000000000000006044820152606490fd5b60405162461bcd60e51b8152602060048201526011602482015270105a5c99dc98588e88199a5b9a5cda1959607a1b6044820152606490fd5b60405162461bcd60e51b8152602060048201526014602482015273416972677261623a20496e76616c6964204b594360601b6044820152606490fd5b606460405162461bcd60e51b815260206004820152602060248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e746044820152fd5b906010600f82161015610d50578451821015610d50576f181899199a1a9b1b9c1cb0b131b232b360811b600f82161a8583016020015360041c90801561093857600019016106a7565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b60405162461bcd60e51b815260206004820152601e60248201527f416972677261623a204b5943206e6f7420726563656e7420656e6f75676800006044820152606490fd5b905060a4359081018091116109385742108661065b565b60405162461bcd60e51b815260206004820152601c60248201527f416972677261623a204b5943206e6f206c6f6e6765722076616c6964000000006044820152606490fd5b346100fe5760003660031901126100fe576040517f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03168152602090f35b346100fe5760003660031901126100fe57602060405160678152f35b346100fe5760003660031901126100fe57602060405163ffffffff7f0000000000000000000000000000000000000000000000000000000000000000168152f35b346100fe5760003660031901126100fe576020907f00000000000000000000000000000000000000000000000000000000000000008152f35b600435906001600160a01b03821682036100fe57565b6040810190811067ffffffffffffffff821117610d6657604052565b90601f8019910116810190811067ffffffffffffffff821117610d6657604052565b67ffffffffffffffff8111610d6657601f01601f191660200190565b929192610f7482610f4c565b91610f826040519384610f2a565b8294818452818301116100fe578281602093846000960137010152565b60005b838110610fb25750506000910152565b8181015183820152602001610fa2565b600260005414610fd3576002600055565b60405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606490fd5b3d15611043573d9061102982610f4c565b916110376040519384610f2a565b82523d6000602084013e565b606090565b919290156110aa575081511561105c575090565b3b156110655790565b60405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606490fd5b8251909150156110bd5750805190602001fd5b60405162461bcd60e51b8152602060048201529081906110e19060248301906110e5565b0390fd5b906020916110fe81518092818552858086019101610f9f565b601f01601f1916010190565b806000917a184f03e93ff9f4daa797ed6e38ed64bf6a1f01000000000000000080821015611264575b506d04ee2d6d415b85acef810000000080831015611255575b50662386f26fc1000080831015611246575b506305f5e10080831015611237575b5061271080831015611228575b506064821015611218575b600a8092101561120e575b600190816021818601956111a387610f4c565b966111b16040519889610f2a565b8088526111c0601f1991610f4c565b01366020890137860101905b6111d8575b5050505090565b600019019083906f181899199a1a9b1b9c1cb0b131b232b360811b8282061a835304918215611209579190826111cc565b6111d1565b9160010191611190565b9190606460029104910191611185565b6004919392049101913861117a565b6008919392049101913861116d565b6010919392049101913861115e565b6020919392049101913861114c565b604093508104915038611133565b909161127e818461133f565b600581101561132957159081611313575b5061130b5760009182916040516112ca816108866020820194630b135d3f60e11b998a875260248401526040604484015260648301906110e5565b51915afa906112d7611018565b826112ff575b826112e757505090565b9091506020818051810103126100fe57602001511490565b805160201492506112dd565b505050600190565b6001600160a01b0384811691161490503861128f565b634e487b7160e01b600052602160045260246000fd5b90604181511460001461136d57611369916020820151906060604084015193015160001a90611377565b9091565b5050600090600290565b9291907f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a083116113fa5791608094939160ff602094604051948552168484015260408301526060820152600093849182805260015afa156113ed5781516001600160a01b038116156113e7579190565b50600190565b50604051903d90823e3d90fd5b5050505060009060039056fea26469706673582212200729b119be7af5eb7997e03946a34cbfeeeaa23b40a4dd0c5ac6b83bdd7450af64736f6c63430008120033a2646970667358221220a170a2453414d300372b19e7784c69fe2cf575b9b34a6e5c1393af736c987cc664736f6c63430008120033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "deploy(bytes32,address,uint256,uint256,uint32,uint32,address,address,address)": {
        "params": {
          "airgrabEnds": "The timestamp when the airgrab ends",
          "airgrabLockCliff": "The cliff duration for the airgrabed tokens in weeks",
          "airgrabLockSlope": "The slope duration for the airgrabed tokens in weeks",
          "airgrabRoot": "The merkle root of the airgrab",
          "celoCommunityFund_": "The Celo community fund address where unclaimed tokens will be refunded to.",
          "fractalMaxAge": "The maximum age of the kyc for the airgrab",
          "fractalSigner": "The address of the fractal signer",
          "locking_": "The locking contract for veToken.",
          "token_": "The token address in the airgrab."
        },
        "returns": {
          "_0": "Airgrab The address of the new Airgrab contract"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "deploy(bytes32,address,uint256,uint256,uint32,uint32,address,address,address)": {
        "notice": "Deploys a new Airgrab contract"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}
